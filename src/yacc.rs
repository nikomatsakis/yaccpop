#![allow(unused_imports)]
#![allow(unused_variables)]
use bison::*;
extern crate lalrpop_util as __lalrpop_util;
use self::__lalrpop_util::ParseError as __ParseError;

mod __parse__Yacc {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports)]

    use bison::*;
    extern crate lalrpop_util as __lalrpop_util;
    use self::__lalrpop_util::ParseError as __ParseError;
    pub fn parse_Yacc<
        'input,
    >(
        input: &'input str,
    ) -> Result<Yacc<'input>, __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __tokens = super::__intern_token::__Matcher::new(input);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match try!(__state0(input, None, &mut __tokens, __lookahead)) {
            (_, Some(__lookahead), _) => {
                Err(__ParseError::ExtraToken { token: __lookahead })
            }
            (_, None, __Nonterminal::____Yacc(__nt)) => {
                Ok(__nt)
            }
            _ => unreachable!(),
        }
    }

    #[allow(dead_code)]
    pub enum __Nonterminal<'input> {
        ActionCode(()),
        Alternative(Alternative<'input>),
        Alternatives(Vec<Alternative<'input>>),
        AnyToken(()),
        AnyToken_2a(::std::vec::Vec<()>),
        AnyToken_2b(::std::vec::Vec<()>),
        BisonDeclaration(Option<BisonDecl<'input>>),
        BisonDeclaration_2a(::std::vec::Vec<Option<BisonDecl<'input>>>),
        BisonDeclaration_2b(::std::vec::Vec<Option<BisonDecl<'input>>>),
        BisonDeclarations(Vec<BisonDecl<'input>>),
        CDeclarations(()),
        GrammarRhs(Option<Symbol<'input>>),
        GrammarRhs_2b(::std::vec::Vec<Option<Symbol<'input>>>),
        GrammarRule(GrammarRule<'input>),
        GrammarRule_2a(::std::vec::Vec<GrammarRule<'input>>),
        GrammarRule_2b(::std::vec::Vec<GrammarRule<'input>>),
        Ident(Ident<'input>),
        Integer(&'input str),
        Symbol(Symbol<'input>),
        Symbol_2b(::std::vec::Vec<Symbol<'input>>),
        TokenTree(()),
        TokenTree_2a(::std::vec::Vec<()>),
        TokenTree_2b(::std::vec::Vec<()>),
        UnpairedToken(()),
        Yacc(Yacc<'input>),
        ____Yacc(Yacc<'input>),
    }

    // State 0
    //   CDeclarations = (*) "%{" AnyToken+ "%}" ["%%"]
    //   CDeclarations = (*) "%{" AnyToken+ "%}" ["%debug"]
    //   CDeclarations = (*) "%{" AnyToken+ "%}" ["%expect"]
    //   CDeclarations = (*) "%{" AnyToken+ "%}" ["%left"]
    //   CDeclarations = (*) "%{" AnyToken+ "%}" ["%nonassoc"]
    //   CDeclarations = (*) "%{" AnyToken+ "%}" ["%precedence"]
    //   CDeclarations = (*) "%{" AnyToken+ "%}" ["%right"]
    //   CDeclarations = (*) "%{" AnyToken+ "%}" ["%start"]
    //   CDeclarations = (*) "%{" AnyToken+ "%}" ["%token"]
    //   CDeclarations = (*) "%{" "%}" ["%%"]
    //   CDeclarations = (*) "%{" "%}" ["%debug"]
    //   CDeclarations = (*) "%{" "%}" ["%expect"]
    //   CDeclarations = (*) "%{" "%}" ["%left"]
    //   CDeclarations = (*) "%{" "%}" ["%nonassoc"]
    //   CDeclarations = (*) "%{" "%}" ["%precedence"]
    //   CDeclarations = (*) "%{" "%}" ["%right"]
    //   CDeclarations = (*) "%{" "%}" ["%start"]
    //   CDeclarations = (*) "%{" "%}" ["%token"]
    //   Yacc = (*) CDeclarations BisonDeclarations "%%" [EOF]
    //   Yacc = (*) CDeclarations BisonDeclarations "%%" GrammarRule+ [EOF]
    //   __Yacc = (*) Yacc [EOF]
    //
    //   "%{" -> Shift(S3)
    //
    //   CDeclarations -> S1
    //   Yacc -> S2
    pub fn __state0<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (11, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym0 = &mut Some((__tok0));
                __result = try!(__state3(input, __lookbehind, __tokens, __sym0));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        loop {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::CDeclarations(__nt) => {
                    let __sym0 = &mut Some(__nt);
                    __result = try!(__state1(input, __lookbehind, __tokens, __lookahead, __sym0));
                }
                __Nonterminal::Yacc(__nt) => {
                    let __sym0 = &mut Some(__nt);
                    __result = try!(__state2(input, __lookbehind, __tokens, __lookahead, __sym0));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
    }

    // State 1
    //   BisonDeclaration = (*) "%debug" ["%%"]
    //   BisonDeclaration = (*) "%debug" ["%debug"]
    //   BisonDeclaration = (*) "%debug" ["%expect"]
    //   BisonDeclaration = (*) "%debug" ["%left"]
    //   BisonDeclaration = (*) "%debug" ["%nonassoc"]
    //   BisonDeclaration = (*) "%debug" ["%precedence"]
    //   BisonDeclaration = (*) "%debug" ["%right"]
    //   BisonDeclaration = (*) "%debug" ["%start"]
    //   BisonDeclaration = (*) "%debug" ["%token"]
    //   BisonDeclaration = (*) "%expect" Integer ["%%"]
    //   BisonDeclaration = (*) "%expect" Integer ["%debug"]
    //   BisonDeclaration = (*) "%expect" Integer ["%expect"]
    //   BisonDeclaration = (*) "%expect" Integer ["%left"]
    //   BisonDeclaration = (*) "%expect" Integer ["%nonassoc"]
    //   BisonDeclaration = (*) "%expect" Integer ["%precedence"]
    //   BisonDeclaration = (*) "%expect" Integer ["%right"]
    //   BisonDeclaration = (*) "%expect" Integer ["%start"]
    //   BisonDeclaration = (*) "%expect" Integer ["%token"]
    //   BisonDeclaration = (*) "%left" Symbol+ ["%%"]
    //   BisonDeclaration = (*) "%left" Symbol+ ["%debug"]
    //   BisonDeclaration = (*) "%left" Symbol+ ["%expect"]
    //   BisonDeclaration = (*) "%left" Symbol+ ["%left"]
    //   BisonDeclaration = (*) "%left" Symbol+ ["%nonassoc"]
    //   BisonDeclaration = (*) "%left" Symbol+ ["%precedence"]
    //   BisonDeclaration = (*) "%left" Symbol+ ["%right"]
    //   BisonDeclaration = (*) "%left" Symbol+ ["%start"]
    //   BisonDeclaration = (*) "%left" Symbol+ ["%token"]
    //   BisonDeclaration = (*) "%nonassoc" Symbol+ ["%%"]
    //   BisonDeclaration = (*) "%nonassoc" Symbol+ ["%debug"]
    //   BisonDeclaration = (*) "%nonassoc" Symbol+ ["%expect"]
    //   BisonDeclaration = (*) "%nonassoc" Symbol+ ["%left"]
    //   BisonDeclaration = (*) "%nonassoc" Symbol+ ["%nonassoc"]
    //   BisonDeclaration = (*) "%nonassoc" Symbol+ ["%precedence"]
    //   BisonDeclaration = (*) "%nonassoc" Symbol+ ["%right"]
    //   BisonDeclaration = (*) "%nonassoc" Symbol+ ["%start"]
    //   BisonDeclaration = (*) "%nonassoc" Symbol+ ["%token"]
    //   BisonDeclaration = (*) "%precedence" Symbol+ ["%%"]
    //   BisonDeclaration = (*) "%precedence" Symbol+ ["%debug"]
    //   BisonDeclaration = (*) "%precedence" Symbol+ ["%expect"]
    //   BisonDeclaration = (*) "%precedence" Symbol+ ["%left"]
    //   BisonDeclaration = (*) "%precedence" Symbol+ ["%nonassoc"]
    //   BisonDeclaration = (*) "%precedence" Symbol+ ["%precedence"]
    //   BisonDeclaration = (*) "%precedence" Symbol+ ["%right"]
    //   BisonDeclaration = (*) "%precedence" Symbol+ ["%start"]
    //   BisonDeclaration = (*) "%precedence" Symbol+ ["%token"]
    //   BisonDeclaration = (*) "%right" Symbol+ ["%%"]
    //   BisonDeclaration = (*) "%right" Symbol+ ["%debug"]
    //   BisonDeclaration = (*) "%right" Symbol+ ["%expect"]
    //   BisonDeclaration = (*) "%right" Symbol+ ["%left"]
    //   BisonDeclaration = (*) "%right" Symbol+ ["%nonassoc"]
    //   BisonDeclaration = (*) "%right" Symbol+ ["%precedence"]
    //   BisonDeclaration = (*) "%right" Symbol+ ["%right"]
    //   BisonDeclaration = (*) "%right" Symbol+ ["%start"]
    //   BisonDeclaration = (*) "%right" Symbol+ ["%token"]
    //   BisonDeclaration = (*) "%start" Ident ["%%"]
    //   BisonDeclaration = (*) "%start" Ident ["%debug"]
    //   BisonDeclaration = (*) "%start" Ident ["%expect"]
    //   BisonDeclaration = (*) "%start" Ident ["%left"]
    //   BisonDeclaration = (*) "%start" Ident ["%nonassoc"]
    //   BisonDeclaration = (*) "%start" Ident ["%precedence"]
    //   BisonDeclaration = (*) "%start" Ident ["%right"]
    //   BisonDeclaration = (*) "%start" Ident ["%start"]
    //   BisonDeclaration = (*) "%start" Ident ["%token"]
    //   BisonDeclaration = (*) "%token" Ident ["%%"]
    //   BisonDeclaration = (*) "%token" Ident ["%debug"]
    //   BisonDeclaration = (*) "%token" Ident ["%expect"]
    //   BisonDeclaration = (*) "%token" Ident ["%left"]
    //   BisonDeclaration = (*) "%token" Ident ["%nonassoc"]
    //   BisonDeclaration = (*) "%token" Ident ["%precedence"]
    //   BisonDeclaration = (*) "%token" Ident ["%right"]
    //   BisonDeclaration = (*) "%token" Ident ["%start"]
    //   BisonDeclaration = (*) "%token" Ident ["%token"]
    //   BisonDeclaration+ = (*) BisonDeclaration ["%%"]
    //   BisonDeclaration+ = (*) BisonDeclaration ["%debug"]
    //   BisonDeclaration+ = (*) BisonDeclaration ["%expect"]
    //   BisonDeclaration+ = (*) BisonDeclaration ["%left"]
    //   BisonDeclaration+ = (*) BisonDeclaration ["%nonassoc"]
    //   BisonDeclaration+ = (*) BisonDeclaration ["%precedence"]
    //   BisonDeclaration+ = (*) BisonDeclaration ["%right"]
    //   BisonDeclaration+ = (*) BisonDeclaration ["%start"]
    //   BisonDeclaration+ = (*) BisonDeclaration ["%token"]
    //   BisonDeclaration+ = (*) BisonDeclaration+ BisonDeclaration ["%%"]
    //   BisonDeclaration+ = (*) BisonDeclaration+ BisonDeclaration ["%debug"]
    //   BisonDeclaration+ = (*) BisonDeclaration+ BisonDeclaration ["%expect"]
    //   BisonDeclaration+ = (*) BisonDeclaration+ BisonDeclaration ["%left"]
    //   BisonDeclaration+ = (*) BisonDeclaration+ BisonDeclaration ["%nonassoc"]
    //   BisonDeclaration+ = (*) BisonDeclaration+ BisonDeclaration ["%precedence"]
    //   BisonDeclaration+ = (*) BisonDeclaration+ BisonDeclaration ["%right"]
    //   BisonDeclaration+ = (*) BisonDeclaration+ BisonDeclaration ["%start"]
    //   BisonDeclaration+ = (*) BisonDeclaration+ BisonDeclaration ["%token"]
    //   BisonDeclarations = (*) ["%%"]
    //   BisonDeclarations = (*) BisonDeclaration+ ["%%"]
    //   Yacc = CDeclarations (*) BisonDeclarations "%%" [EOF]
    //   Yacc = CDeclarations (*) BisonDeclarations "%%" GrammarRule+ [EOF]
    //
    //   "%%" -> Reduce(BisonDeclarations =  => ActionFn(69);)
    //   "%debug" -> Shift(S7)
    //   "%expect" -> Shift(S8)
    //   "%left" -> Shift(S9)
    //   "%nonassoc" -> Shift(S10)
    //   "%precedence" -> Shift(S11)
    //   "%right" -> Shift(S12)
    //   "%start" -> Shift(S13)
    //   "%token" -> Shift(S14)
    //
    //   BisonDeclaration -> S4
    //   BisonDeclaration+ -> S5
    //   BisonDeclarations -> S6
    pub fn __state1<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<()>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state7(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state8(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state9(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (5, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state10(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (7, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (8, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state12(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (9, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state13(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (10, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state14(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (0, _), _)) => {
                let __nt = super::__action69(input, &__lookbehind, &__lookahead);
                __result = (__lookbehind, __lookahead, __Nonterminal::BisonDeclarations(__nt));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::BisonDeclaration(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state4(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::BisonDeclaration_2b(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state5(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::BisonDeclarations(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state6(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 2
    //   __Yacc = Yacc (*) [EOF]
    //
    //   EOF -> Reduce(__Yacc = Yacc => ActionFn(0);)
    //
    pub fn __state2<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Yacc<'input>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action0(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::____Yacc(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 3
    //   AnyToken = (*) UnpairedToken ["%}"]
    //   AnyToken = (*) UnpairedToken ["("]
    //   AnyToken = (*) UnpairedToken [")"]
    //   AnyToken = (*) UnpairedToken ["*"]
    //   AnyToken = (*) UnpairedToken [","]
    //   AnyToken = (*) UnpairedToken ["."]
    //   AnyToken = (*) UnpairedToken [";"]
    //   AnyToken = (*) UnpairedToken ["="]
    //   AnyToken = (*) UnpairedToken ["["]
    //   AnyToken = (*) UnpairedToken ["]"]
    //   AnyToken = (*) UnpairedToken ["{"]
    //   AnyToken = (*) UnpairedToken ["}"]
    //   AnyToken = (*) UnpairedToken [r#"\"[^\"]*\""#]
    //   AnyToken = (*) UnpairedToken [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   AnyToken = (*) UnpairedToken [r#"$[$0-9]+"#]
    //   AnyToken = (*) UnpairedToken [r#"\'.\'"#]
    //   AnyToken = (*) UnpairedToken [r#"[0-9]+"#]
    //   AnyToken = (*) UnpairedToken [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   AnyToken = (*) "(" ["%}"]
    //   AnyToken = (*) "(" ["("]
    //   AnyToken = (*) "(" [")"]
    //   AnyToken = (*) "(" ["*"]
    //   AnyToken = (*) "(" [","]
    //   AnyToken = (*) "(" ["."]
    //   AnyToken = (*) "(" [";"]
    //   AnyToken = (*) "(" ["="]
    //   AnyToken = (*) "(" ["["]
    //   AnyToken = (*) "(" ["]"]
    //   AnyToken = (*) "(" ["{"]
    //   AnyToken = (*) "(" ["}"]
    //   AnyToken = (*) "(" [r#"\"[^\"]*\""#]
    //   AnyToken = (*) "(" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   AnyToken = (*) "(" [r#"$[$0-9]+"#]
    //   AnyToken = (*) "(" [r#"\'.\'"#]
    //   AnyToken = (*) "(" [r#"[0-9]+"#]
    //   AnyToken = (*) "(" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   AnyToken = (*) ")" ["%}"]
    //   AnyToken = (*) ")" ["("]
    //   AnyToken = (*) ")" [")"]
    //   AnyToken = (*) ")" ["*"]
    //   AnyToken = (*) ")" [","]
    //   AnyToken = (*) ")" ["."]
    //   AnyToken = (*) ")" [";"]
    //   AnyToken = (*) ")" ["="]
    //   AnyToken = (*) ")" ["["]
    //   AnyToken = (*) ")" ["]"]
    //   AnyToken = (*) ")" ["{"]
    //   AnyToken = (*) ")" ["}"]
    //   AnyToken = (*) ")" [r#"\"[^\"]*\""#]
    //   AnyToken = (*) ")" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   AnyToken = (*) ")" [r#"$[$0-9]+"#]
    //   AnyToken = (*) ")" [r#"\'.\'"#]
    //   AnyToken = (*) ")" [r#"[0-9]+"#]
    //   AnyToken = (*) ")" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   AnyToken = (*) "[" ["%}"]
    //   AnyToken = (*) "[" ["("]
    //   AnyToken = (*) "[" [")"]
    //   AnyToken = (*) "[" ["*"]
    //   AnyToken = (*) "[" [","]
    //   AnyToken = (*) "[" ["."]
    //   AnyToken = (*) "[" [";"]
    //   AnyToken = (*) "[" ["="]
    //   AnyToken = (*) "[" ["["]
    //   AnyToken = (*) "[" ["]"]
    //   AnyToken = (*) "[" ["{"]
    //   AnyToken = (*) "[" ["}"]
    //   AnyToken = (*) "[" [r#"\"[^\"]*\""#]
    //   AnyToken = (*) "[" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   AnyToken = (*) "[" [r#"$[$0-9]+"#]
    //   AnyToken = (*) "[" [r#"\'.\'"#]
    //   AnyToken = (*) "[" [r#"[0-9]+"#]
    //   AnyToken = (*) "[" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   AnyToken = (*) "]" ["%}"]
    //   AnyToken = (*) "]" ["("]
    //   AnyToken = (*) "]" [")"]
    //   AnyToken = (*) "]" ["*"]
    //   AnyToken = (*) "]" [","]
    //   AnyToken = (*) "]" ["."]
    //   AnyToken = (*) "]" [";"]
    //   AnyToken = (*) "]" ["="]
    //   AnyToken = (*) "]" ["["]
    //   AnyToken = (*) "]" ["]"]
    //   AnyToken = (*) "]" ["{"]
    //   AnyToken = (*) "]" ["}"]
    //   AnyToken = (*) "]" [r#"\"[^\"]*\""#]
    //   AnyToken = (*) "]" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   AnyToken = (*) "]" [r#"$[$0-9]+"#]
    //   AnyToken = (*) "]" [r#"\'.\'"#]
    //   AnyToken = (*) "]" [r#"[0-9]+"#]
    //   AnyToken = (*) "]" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   AnyToken = (*) "{" ["%}"]
    //   AnyToken = (*) "{" ["("]
    //   AnyToken = (*) "{" [")"]
    //   AnyToken = (*) "{" ["*"]
    //   AnyToken = (*) "{" [","]
    //   AnyToken = (*) "{" ["."]
    //   AnyToken = (*) "{" [";"]
    //   AnyToken = (*) "{" ["="]
    //   AnyToken = (*) "{" ["["]
    //   AnyToken = (*) "{" ["]"]
    //   AnyToken = (*) "{" ["{"]
    //   AnyToken = (*) "{" ["}"]
    //   AnyToken = (*) "{" [r#"\"[^\"]*\""#]
    //   AnyToken = (*) "{" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   AnyToken = (*) "{" [r#"$[$0-9]+"#]
    //   AnyToken = (*) "{" [r#"\'.\'"#]
    //   AnyToken = (*) "{" [r#"[0-9]+"#]
    //   AnyToken = (*) "{" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   AnyToken = (*) "}" ["%}"]
    //   AnyToken = (*) "}" ["("]
    //   AnyToken = (*) "}" [")"]
    //   AnyToken = (*) "}" ["*"]
    //   AnyToken = (*) "}" [","]
    //   AnyToken = (*) "}" ["."]
    //   AnyToken = (*) "}" [";"]
    //   AnyToken = (*) "}" ["="]
    //   AnyToken = (*) "}" ["["]
    //   AnyToken = (*) "}" ["]"]
    //   AnyToken = (*) "}" ["{"]
    //   AnyToken = (*) "}" ["}"]
    //   AnyToken = (*) "}" [r#"\"[^\"]*\""#]
    //   AnyToken = (*) "}" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   AnyToken = (*) "}" [r#"$[$0-9]+"#]
    //   AnyToken = (*) "}" [r#"\'.\'"#]
    //   AnyToken = (*) "}" [r#"[0-9]+"#]
    //   AnyToken = (*) "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   AnyToken+ = (*) AnyToken ["%}"]
    //   AnyToken+ = (*) AnyToken ["("]
    //   AnyToken+ = (*) AnyToken [")"]
    //   AnyToken+ = (*) AnyToken ["*"]
    //   AnyToken+ = (*) AnyToken [","]
    //   AnyToken+ = (*) AnyToken ["."]
    //   AnyToken+ = (*) AnyToken [";"]
    //   AnyToken+ = (*) AnyToken ["="]
    //   AnyToken+ = (*) AnyToken ["["]
    //   AnyToken+ = (*) AnyToken ["]"]
    //   AnyToken+ = (*) AnyToken ["{"]
    //   AnyToken+ = (*) AnyToken ["}"]
    //   AnyToken+ = (*) AnyToken [r#"\"[^\"]*\""#]
    //   AnyToken+ = (*) AnyToken [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   AnyToken+ = (*) AnyToken [r#"$[$0-9]+"#]
    //   AnyToken+ = (*) AnyToken [r#"\'.\'"#]
    //   AnyToken+ = (*) AnyToken [r#"[0-9]+"#]
    //   AnyToken+ = (*) AnyToken [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   AnyToken+ = (*) AnyToken+ AnyToken ["%}"]
    //   AnyToken+ = (*) AnyToken+ AnyToken ["("]
    //   AnyToken+ = (*) AnyToken+ AnyToken [")"]
    //   AnyToken+ = (*) AnyToken+ AnyToken ["*"]
    //   AnyToken+ = (*) AnyToken+ AnyToken [","]
    //   AnyToken+ = (*) AnyToken+ AnyToken ["."]
    //   AnyToken+ = (*) AnyToken+ AnyToken [";"]
    //   AnyToken+ = (*) AnyToken+ AnyToken ["="]
    //   AnyToken+ = (*) AnyToken+ AnyToken ["["]
    //   AnyToken+ = (*) AnyToken+ AnyToken ["]"]
    //   AnyToken+ = (*) AnyToken+ AnyToken ["{"]
    //   AnyToken+ = (*) AnyToken+ AnyToken ["}"]
    //   AnyToken+ = (*) AnyToken+ AnyToken [r#"\"[^\"]*\""#]
    //   AnyToken+ = (*) AnyToken+ AnyToken [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   AnyToken+ = (*) AnyToken+ AnyToken [r#"$[$0-9]+"#]
    //   AnyToken+ = (*) AnyToken+ AnyToken [r#"\'.\'"#]
    //   AnyToken+ = (*) AnyToken+ AnyToken [r#"[0-9]+"#]
    //   AnyToken+ = (*) AnyToken+ AnyToken [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   CDeclarations = "%{" (*) AnyToken+ "%}" ["%%"]
    //   CDeclarations = "%{" (*) AnyToken+ "%}" ["%debug"]
    //   CDeclarations = "%{" (*) AnyToken+ "%}" ["%expect"]
    //   CDeclarations = "%{" (*) AnyToken+ "%}" ["%left"]
    //   CDeclarations = "%{" (*) AnyToken+ "%}" ["%nonassoc"]
    //   CDeclarations = "%{" (*) AnyToken+ "%}" ["%precedence"]
    //   CDeclarations = "%{" (*) AnyToken+ "%}" ["%right"]
    //   CDeclarations = "%{" (*) AnyToken+ "%}" ["%start"]
    //   CDeclarations = "%{" (*) AnyToken+ "%}" ["%token"]
    //   CDeclarations = "%{" (*) "%}" ["%%"]
    //   CDeclarations = "%{" (*) "%}" ["%debug"]
    //   CDeclarations = "%{" (*) "%}" ["%expect"]
    //   CDeclarations = "%{" (*) "%}" ["%left"]
    //   CDeclarations = "%{" (*) "%}" ["%nonassoc"]
    //   CDeclarations = "%{" (*) "%}" ["%precedence"]
    //   CDeclarations = "%{" (*) "%}" ["%right"]
    //   CDeclarations = "%{" (*) "%}" ["%start"]
    //   CDeclarations = "%{" (*) "%}" ["%token"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%}"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["("]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [")"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["*"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [","]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["."]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [";"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["="]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["["]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["]"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["{"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["}"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\"[^\"]*\""#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"$[$0-9]+"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[0-9]+"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Integer = (*) r#"[0-9]+"# ["%}"]
    //   Integer = (*) r#"[0-9]+"# ["("]
    //   Integer = (*) r#"[0-9]+"# [")"]
    //   Integer = (*) r#"[0-9]+"# ["*"]
    //   Integer = (*) r#"[0-9]+"# [","]
    //   Integer = (*) r#"[0-9]+"# ["."]
    //   Integer = (*) r#"[0-9]+"# [";"]
    //   Integer = (*) r#"[0-9]+"# ["="]
    //   Integer = (*) r#"[0-9]+"# ["["]
    //   Integer = (*) r#"[0-9]+"# ["]"]
    //   Integer = (*) r#"[0-9]+"# ["{"]
    //   Integer = (*) r#"[0-9]+"# ["}"]
    //   Integer = (*) r#"[0-9]+"# [r#"\"[^\"]*\""#]
    //   Integer = (*) r#"[0-9]+"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Integer = (*) r#"[0-9]+"# [r#"$[$0-9]+"#]
    //   Integer = (*) r#"[0-9]+"# [r#"\'.\'"#]
    //   Integer = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Integer = (*) r#"[0-9]+"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Ident ["%}"]
    //   UnpairedToken = (*) Ident ["("]
    //   UnpairedToken = (*) Ident [")"]
    //   UnpairedToken = (*) Ident ["*"]
    //   UnpairedToken = (*) Ident [","]
    //   UnpairedToken = (*) Ident ["."]
    //   UnpairedToken = (*) Ident [";"]
    //   UnpairedToken = (*) Ident ["="]
    //   UnpairedToken = (*) Ident ["["]
    //   UnpairedToken = (*) Ident ["]"]
    //   UnpairedToken = (*) Ident ["{"]
    //   UnpairedToken = (*) Ident ["}"]
    //   UnpairedToken = (*) Ident [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) Ident [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Ident [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) Ident [r#"\'.\'"#]
    //   UnpairedToken = (*) Ident [r#"[0-9]+"#]
    //   UnpairedToken = (*) Ident [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Integer ["%}"]
    //   UnpairedToken = (*) Integer ["("]
    //   UnpairedToken = (*) Integer [")"]
    //   UnpairedToken = (*) Integer ["*"]
    //   UnpairedToken = (*) Integer [","]
    //   UnpairedToken = (*) Integer ["."]
    //   UnpairedToken = (*) Integer [";"]
    //   UnpairedToken = (*) Integer ["="]
    //   UnpairedToken = (*) Integer ["["]
    //   UnpairedToken = (*) Integer ["]"]
    //   UnpairedToken = (*) Integer ["{"]
    //   UnpairedToken = (*) Integer ["}"]
    //   UnpairedToken = (*) Integer [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) Integer [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Integer [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) Integer [r#"\'.\'"#]
    //   UnpairedToken = (*) Integer [r#"[0-9]+"#]
    //   UnpairedToken = (*) Integer [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "*" ["%}"]
    //   UnpairedToken = (*) "*" ["("]
    //   UnpairedToken = (*) "*" [")"]
    //   UnpairedToken = (*) "*" ["*"]
    //   UnpairedToken = (*) "*" [","]
    //   UnpairedToken = (*) "*" ["."]
    //   UnpairedToken = (*) "*" [";"]
    //   UnpairedToken = (*) "*" ["="]
    //   UnpairedToken = (*) "*" ["["]
    //   UnpairedToken = (*) "*" ["]"]
    //   UnpairedToken = (*) "*" ["{"]
    //   UnpairedToken = (*) "*" ["}"]
    //   UnpairedToken = (*) "*" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "*" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "*" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "*" [r#"\'.\'"#]
    //   UnpairedToken = (*) "*" [r#"[0-9]+"#]
    //   UnpairedToken = (*) "*" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "," ["%}"]
    //   UnpairedToken = (*) "," ["("]
    //   UnpairedToken = (*) "," [")"]
    //   UnpairedToken = (*) "," ["*"]
    //   UnpairedToken = (*) "," [","]
    //   UnpairedToken = (*) "," ["."]
    //   UnpairedToken = (*) "," [";"]
    //   UnpairedToken = (*) "," ["="]
    //   UnpairedToken = (*) "," ["["]
    //   UnpairedToken = (*) "," ["]"]
    //   UnpairedToken = (*) "," ["{"]
    //   UnpairedToken = (*) "," ["}"]
    //   UnpairedToken = (*) "," [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "," [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "," [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "," [r#"\'.\'"#]
    //   UnpairedToken = (*) "," [r#"[0-9]+"#]
    //   UnpairedToken = (*) "," [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "." ["%}"]
    //   UnpairedToken = (*) "." ["("]
    //   UnpairedToken = (*) "." [")"]
    //   UnpairedToken = (*) "." ["*"]
    //   UnpairedToken = (*) "." [","]
    //   UnpairedToken = (*) "." ["."]
    //   UnpairedToken = (*) "." [";"]
    //   UnpairedToken = (*) "." ["="]
    //   UnpairedToken = (*) "." ["["]
    //   UnpairedToken = (*) "." ["]"]
    //   UnpairedToken = (*) "." ["{"]
    //   UnpairedToken = (*) "." ["}"]
    //   UnpairedToken = (*) "." [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "." [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "." [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "." [r#"\'.\'"#]
    //   UnpairedToken = (*) "." [r#"[0-9]+"#]
    //   UnpairedToken = (*) "." [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) ";" ["%}"]
    //   UnpairedToken = (*) ";" ["("]
    //   UnpairedToken = (*) ";" [")"]
    //   UnpairedToken = (*) ";" ["*"]
    //   UnpairedToken = (*) ";" [","]
    //   UnpairedToken = (*) ";" ["."]
    //   UnpairedToken = (*) ";" [";"]
    //   UnpairedToken = (*) ";" ["="]
    //   UnpairedToken = (*) ";" ["["]
    //   UnpairedToken = (*) ";" ["]"]
    //   UnpairedToken = (*) ";" ["{"]
    //   UnpairedToken = (*) ";" ["}"]
    //   UnpairedToken = (*) ";" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) ";" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) ";" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) ";" [r#"\'.\'"#]
    //   UnpairedToken = (*) ";" [r#"[0-9]+"#]
    //   UnpairedToken = (*) ";" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "=" ["%}"]
    //   UnpairedToken = (*) "=" ["("]
    //   UnpairedToken = (*) "=" [")"]
    //   UnpairedToken = (*) "=" ["*"]
    //   UnpairedToken = (*) "=" [","]
    //   UnpairedToken = (*) "=" ["."]
    //   UnpairedToken = (*) "=" [";"]
    //   UnpairedToken = (*) "=" ["="]
    //   UnpairedToken = (*) "=" ["["]
    //   UnpairedToken = (*) "=" ["]"]
    //   UnpairedToken = (*) "=" ["{"]
    //   UnpairedToken = (*) "=" ["}"]
    //   UnpairedToken = (*) "=" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "=" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "=" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "=" [r#"\'.\'"#]
    //   UnpairedToken = (*) "=" [r#"[0-9]+"#]
    //   UnpairedToken = (*) "=" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["%}"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["("]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [")"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["*"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [","]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["."]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [";"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["="]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["["]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["]"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["{"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["}"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["%}"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["("]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [")"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["*"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [","]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["."]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [";"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["="]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["["]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["]"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["{"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["}"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["%}"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["("]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [")"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["*"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [","]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["."]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [";"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["="]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["["]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["]"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["{"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["}"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\'.\'"# ["%}"]
    //   UnpairedToken = (*) r#"\'.\'"# ["("]
    //   UnpairedToken = (*) r#"\'.\'"# [")"]
    //   UnpairedToken = (*) r#"\'.\'"# ["*"]
    //   UnpairedToken = (*) r#"\'.\'"# [","]
    //   UnpairedToken = (*) r#"\'.\'"# ["."]
    //   UnpairedToken = (*) r#"\'.\'"# [";"]
    //   UnpairedToken = (*) r#"\'.\'"# ["="]
    //   UnpairedToken = (*) r#"\'.\'"# ["["]
    //   UnpairedToken = (*) r#"\'.\'"# ["]"]
    //   UnpairedToken = (*) r#"\'.\'"# ["{"]
    //   UnpairedToken = (*) r#"\'.\'"# ["}"]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "%}" -> Shift(S20)
    //   "(" -> Shift(S21)
    //   ")" -> Shift(S22)
    //   "*" -> Shift(S23)
    //   "," -> Shift(S24)
    //   "." -> Shift(S25)
    //   ";" -> Shift(S26)
    //   "=" -> Shift(S27)
    //   "[" -> Shift(S28)
    //   "]" -> Shift(S29)
    //   "{" -> Shift(S30)
    //   "}" -> Shift(S31)
    //   r#"\"[^\"]*\""# -> Shift(S32)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S33)
    //   r#"$[$0-9]+"# -> Shift(S34)
    //   r#"\'.\'"# -> Shift(S35)
    //   r#"[0-9]+"# -> Shift(S36)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S37)
    //
    //   AnyToken -> S15
    //   AnyToken+ -> S16
    //   Ident -> S17
    //   Integer -> S18
    //   UnpairedToken -> S19
    pub fn __state3<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state20(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state21(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state22(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state23(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state24(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (17, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state25(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state26(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state27(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state28(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (22, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state29(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state30(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state31(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state32(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state33(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state34(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state35(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state36(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (31, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state37(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::AnyToken(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state15(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::AnyToken_2b(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state16(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Ident(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state17(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Integer(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state18(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::UnpairedToken(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state19(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 4
    //   BisonDeclaration+ = BisonDeclaration (*) ["%%"]
    //   BisonDeclaration+ = BisonDeclaration (*) ["%debug"]
    //   BisonDeclaration+ = BisonDeclaration (*) ["%expect"]
    //   BisonDeclaration+ = BisonDeclaration (*) ["%left"]
    //   BisonDeclaration+ = BisonDeclaration (*) ["%nonassoc"]
    //   BisonDeclaration+ = BisonDeclaration (*) ["%precedence"]
    //   BisonDeclaration+ = BisonDeclaration (*) ["%right"]
    //   BisonDeclaration+ = BisonDeclaration (*) ["%start"]
    //   BisonDeclaration+ = BisonDeclaration (*) ["%token"]
    //
    //   "%%" -> Reduce(BisonDeclaration+ = BisonDeclaration => ActionFn(63);)
    //   "%debug" -> Reduce(BisonDeclaration+ = BisonDeclaration => ActionFn(63);)
    //   "%expect" -> Reduce(BisonDeclaration+ = BisonDeclaration => ActionFn(63);)
    //   "%left" -> Reduce(BisonDeclaration+ = BisonDeclaration => ActionFn(63);)
    //   "%nonassoc" -> Reduce(BisonDeclaration+ = BisonDeclaration => ActionFn(63);)
    //   "%precedence" -> Reduce(BisonDeclaration+ = BisonDeclaration => ActionFn(63);)
    //   "%right" -> Reduce(BisonDeclaration+ = BisonDeclaration => ActionFn(63);)
    //   "%start" -> Reduce(BisonDeclaration+ = BisonDeclaration => ActionFn(63);)
    //   "%token" -> Reduce(BisonDeclaration+ = BisonDeclaration => ActionFn(63);)
    //
    pub fn __state4<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Option<BisonDecl<'input>>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (7, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action63(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::BisonDeclaration_2b(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 5
    //   BisonDeclaration = (*) "%debug" ["%%"]
    //   BisonDeclaration = (*) "%debug" ["%debug"]
    //   BisonDeclaration = (*) "%debug" ["%expect"]
    //   BisonDeclaration = (*) "%debug" ["%left"]
    //   BisonDeclaration = (*) "%debug" ["%nonassoc"]
    //   BisonDeclaration = (*) "%debug" ["%precedence"]
    //   BisonDeclaration = (*) "%debug" ["%right"]
    //   BisonDeclaration = (*) "%debug" ["%start"]
    //   BisonDeclaration = (*) "%debug" ["%token"]
    //   BisonDeclaration = (*) "%expect" Integer ["%%"]
    //   BisonDeclaration = (*) "%expect" Integer ["%debug"]
    //   BisonDeclaration = (*) "%expect" Integer ["%expect"]
    //   BisonDeclaration = (*) "%expect" Integer ["%left"]
    //   BisonDeclaration = (*) "%expect" Integer ["%nonassoc"]
    //   BisonDeclaration = (*) "%expect" Integer ["%precedence"]
    //   BisonDeclaration = (*) "%expect" Integer ["%right"]
    //   BisonDeclaration = (*) "%expect" Integer ["%start"]
    //   BisonDeclaration = (*) "%expect" Integer ["%token"]
    //   BisonDeclaration = (*) "%left" Symbol+ ["%%"]
    //   BisonDeclaration = (*) "%left" Symbol+ ["%debug"]
    //   BisonDeclaration = (*) "%left" Symbol+ ["%expect"]
    //   BisonDeclaration = (*) "%left" Symbol+ ["%left"]
    //   BisonDeclaration = (*) "%left" Symbol+ ["%nonassoc"]
    //   BisonDeclaration = (*) "%left" Symbol+ ["%precedence"]
    //   BisonDeclaration = (*) "%left" Symbol+ ["%right"]
    //   BisonDeclaration = (*) "%left" Symbol+ ["%start"]
    //   BisonDeclaration = (*) "%left" Symbol+ ["%token"]
    //   BisonDeclaration = (*) "%nonassoc" Symbol+ ["%%"]
    //   BisonDeclaration = (*) "%nonassoc" Symbol+ ["%debug"]
    //   BisonDeclaration = (*) "%nonassoc" Symbol+ ["%expect"]
    //   BisonDeclaration = (*) "%nonassoc" Symbol+ ["%left"]
    //   BisonDeclaration = (*) "%nonassoc" Symbol+ ["%nonassoc"]
    //   BisonDeclaration = (*) "%nonassoc" Symbol+ ["%precedence"]
    //   BisonDeclaration = (*) "%nonassoc" Symbol+ ["%right"]
    //   BisonDeclaration = (*) "%nonassoc" Symbol+ ["%start"]
    //   BisonDeclaration = (*) "%nonassoc" Symbol+ ["%token"]
    //   BisonDeclaration = (*) "%precedence" Symbol+ ["%%"]
    //   BisonDeclaration = (*) "%precedence" Symbol+ ["%debug"]
    //   BisonDeclaration = (*) "%precedence" Symbol+ ["%expect"]
    //   BisonDeclaration = (*) "%precedence" Symbol+ ["%left"]
    //   BisonDeclaration = (*) "%precedence" Symbol+ ["%nonassoc"]
    //   BisonDeclaration = (*) "%precedence" Symbol+ ["%precedence"]
    //   BisonDeclaration = (*) "%precedence" Symbol+ ["%right"]
    //   BisonDeclaration = (*) "%precedence" Symbol+ ["%start"]
    //   BisonDeclaration = (*) "%precedence" Symbol+ ["%token"]
    //   BisonDeclaration = (*) "%right" Symbol+ ["%%"]
    //   BisonDeclaration = (*) "%right" Symbol+ ["%debug"]
    //   BisonDeclaration = (*) "%right" Symbol+ ["%expect"]
    //   BisonDeclaration = (*) "%right" Symbol+ ["%left"]
    //   BisonDeclaration = (*) "%right" Symbol+ ["%nonassoc"]
    //   BisonDeclaration = (*) "%right" Symbol+ ["%precedence"]
    //   BisonDeclaration = (*) "%right" Symbol+ ["%right"]
    //   BisonDeclaration = (*) "%right" Symbol+ ["%start"]
    //   BisonDeclaration = (*) "%right" Symbol+ ["%token"]
    //   BisonDeclaration = (*) "%start" Ident ["%%"]
    //   BisonDeclaration = (*) "%start" Ident ["%debug"]
    //   BisonDeclaration = (*) "%start" Ident ["%expect"]
    //   BisonDeclaration = (*) "%start" Ident ["%left"]
    //   BisonDeclaration = (*) "%start" Ident ["%nonassoc"]
    //   BisonDeclaration = (*) "%start" Ident ["%precedence"]
    //   BisonDeclaration = (*) "%start" Ident ["%right"]
    //   BisonDeclaration = (*) "%start" Ident ["%start"]
    //   BisonDeclaration = (*) "%start" Ident ["%token"]
    //   BisonDeclaration = (*) "%token" Ident ["%%"]
    //   BisonDeclaration = (*) "%token" Ident ["%debug"]
    //   BisonDeclaration = (*) "%token" Ident ["%expect"]
    //   BisonDeclaration = (*) "%token" Ident ["%left"]
    //   BisonDeclaration = (*) "%token" Ident ["%nonassoc"]
    //   BisonDeclaration = (*) "%token" Ident ["%precedence"]
    //   BisonDeclaration = (*) "%token" Ident ["%right"]
    //   BisonDeclaration = (*) "%token" Ident ["%start"]
    //   BisonDeclaration = (*) "%token" Ident ["%token"]
    //   BisonDeclaration+ = BisonDeclaration+ (*) BisonDeclaration ["%%"]
    //   BisonDeclaration+ = BisonDeclaration+ (*) BisonDeclaration ["%debug"]
    //   BisonDeclaration+ = BisonDeclaration+ (*) BisonDeclaration ["%expect"]
    //   BisonDeclaration+ = BisonDeclaration+ (*) BisonDeclaration ["%left"]
    //   BisonDeclaration+ = BisonDeclaration+ (*) BisonDeclaration ["%nonassoc"]
    //   BisonDeclaration+ = BisonDeclaration+ (*) BisonDeclaration ["%precedence"]
    //   BisonDeclaration+ = BisonDeclaration+ (*) BisonDeclaration ["%right"]
    //   BisonDeclaration+ = BisonDeclaration+ (*) BisonDeclaration ["%start"]
    //   BisonDeclaration+ = BisonDeclaration+ (*) BisonDeclaration ["%token"]
    //   BisonDeclarations = BisonDeclaration+ (*) ["%%"]
    //
    //   "%%" -> Reduce(BisonDeclarations = BisonDeclaration+ => ActionFn(70);)
    //   "%debug" -> Shift(S7)
    //   "%expect" -> Shift(S8)
    //   "%left" -> Shift(S9)
    //   "%nonassoc" -> Shift(S10)
    //   "%precedence" -> Shift(S11)
    //   "%right" -> Shift(S12)
    //   "%start" -> Shift(S13)
    //   "%token" -> Shift(S14)
    //
    //   BisonDeclaration -> S38
    pub fn __state5<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<::std::vec::Vec<Option<BisonDecl<'input>>>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state7(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state8(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state9(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (5, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state10(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (7, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (8, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state12(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (9, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state13(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (10, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state14(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (0, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action70(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::BisonDeclarations(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::BisonDeclaration(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state38(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 6
    //   Yacc = CDeclarations BisonDeclarations (*) "%%" [EOF]
    //   Yacc = CDeclarations BisonDeclarations (*) "%%" GrammarRule+ [EOF]
    //
    //   "%%" -> Shift(S39)
    //
    pub fn __state6<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<()>,
        __sym1: &mut Option<Vec<BisonDecl<'input>>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state39(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 7
    //   BisonDeclaration = "%debug" (*) ["%%"]
    //   BisonDeclaration = "%debug" (*) ["%debug"]
    //   BisonDeclaration = "%debug" (*) ["%expect"]
    //   BisonDeclaration = "%debug" (*) ["%left"]
    //   BisonDeclaration = "%debug" (*) ["%nonassoc"]
    //   BisonDeclaration = "%debug" (*) ["%precedence"]
    //   BisonDeclaration = "%debug" (*) ["%right"]
    //   BisonDeclaration = "%debug" (*) ["%start"]
    //   BisonDeclaration = "%debug" (*) ["%token"]
    //
    //   "%%" -> Reduce(BisonDeclaration = "%debug" => ActionFn(4);)
    //   "%debug" -> Reduce(BisonDeclaration = "%debug" => ActionFn(4);)
    //   "%expect" -> Reduce(BisonDeclaration = "%debug" => ActionFn(4);)
    //   "%left" -> Reduce(BisonDeclaration = "%debug" => ActionFn(4);)
    //   "%nonassoc" -> Reduce(BisonDeclaration = "%debug" => ActionFn(4);)
    //   "%precedence" -> Reduce(BisonDeclaration = "%debug" => ActionFn(4);)
    //   "%right" -> Reduce(BisonDeclaration = "%debug" => ActionFn(4);)
    //   "%start" -> Reduce(BisonDeclaration = "%debug" => ActionFn(4);)
    //   "%token" -> Reduce(BisonDeclaration = "%debug" => ActionFn(4);)
    //
    pub fn __state7<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (7, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action4(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::BisonDeclaration(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 8
    //   BisonDeclaration = "%expect" (*) Integer ["%%"]
    //   BisonDeclaration = "%expect" (*) Integer ["%debug"]
    //   BisonDeclaration = "%expect" (*) Integer ["%expect"]
    //   BisonDeclaration = "%expect" (*) Integer ["%left"]
    //   BisonDeclaration = "%expect" (*) Integer ["%nonassoc"]
    //   BisonDeclaration = "%expect" (*) Integer ["%precedence"]
    //   BisonDeclaration = "%expect" (*) Integer ["%right"]
    //   BisonDeclaration = "%expect" (*) Integer ["%start"]
    //   BisonDeclaration = "%expect" (*) Integer ["%token"]
    //   Integer = (*) r#"[0-9]+"# ["%%"]
    //   Integer = (*) r#"[0-9]+"# ["%debug"]
    //   Integer = (*) r#"[0-9]+"# ["%expect"]
    //   Integer = (*) r#"[0-9]+"# ["%left"]
    //   Integer = (*) r#"[0-9]+"# ["%nonassoc"]
    //   Integer = (*) r#"[0-9]+"# ["%precedence"]
    //   Integer = (*) r#"[0-9]+"# ["%right"]
    //   Integer = (*) r#"[0-9]+"# ["%start"]
    //   Integer = (*) r#"[0-9]+"# ["%token"]
    //
    //   r#"[0-9]+"# -> Shift(S41)
    //
    //   Integer -> S40
    pub fn __state8<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state41(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Integer(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state40(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 9
    //   BisonDeclaration = "%left" (*) Symbol+ ["%%"]
    //   BisonDeclaration = "%left" (*) Symbol+ ["%debug"]
    //   BisonDeclaration = "%left" (*) Symbol+ ["%expect"]
    //   BisonDeclaration = "%left" (*) Symbol+ ["%left"]
    //   BisonDeclaration = "%left" (*) Symbol+ ["%nonassoc"]
    //   BisonDeclaration = "%left" (*) Symbol+ ["%precedence"]
    //   BisonDeclaration = "%left" (*) Symbol+ ["%right"]
    //   BisonDeclaration = "%left" (*) Symbol+ ["%start"]
    //   BisonDeclaration = "%left" (*) Symbol+ ["%token"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%%"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%debug"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%expect"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%left"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%nonassoc"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%precedence"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%right"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%start"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%token"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Symbol = (*) Ident ["%%"]
    //   Symbol = (*) Ident ["%debug"]
    //   Symbol = (*) Ident ["%expect"]
    //   Symbol = (*) Ident ["%left"]
    //   Symbol = (*) Ident ["%nonassoc"]
    //   Symbol = (*) Ident ["%precedence"]
    //   Symbol = (*) Ident ["%right"]
    //   Symbol = (*) Ident ["%start"]
    //   Symbol = (*) Ident ["%token"]
    //   Symbol = (*) Ident [r#"\'.\'"#]
    //   Symbol = (*) Ident [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Symbol = (*) r#"\'.\'"# ["%%"]
    //   Symbol = (*) r#"\'.\'"# ["%debug"]
    //   Symbol = (*) r#"\'.\'"# ["%expect"]
    //   Symbol = (*) r#"\'.\'"# ["%left"]
    //   Symbol = (*) r#"\'.\'"# ["%nonassoc"]
    //   Symbol = (*) r#"\'.\'"# ["%precedence"]
    //   Symbol = (*) r#"\'.\'"# ["%right"]
    //   Symbol = (*) r#"\'.\'"# ["%start"]
    //   Symbol = (*) r#"\'.\'"# ["%token"]
    //   Symbol = (*) r#"\'.\'"# [r#"\'.\'"#]
    //   Symbol = (*) r#"\'.\'"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Symbol+ = (*) Symbol ["%%"]
    //   Symbol+ = (*) Symbol ["%debug"]
    //   Symbol+ = (*) Symbol ["%expect"]
    //   Symbol+ = (*) Symbol ["%left"]
    //   Symbol+ = (*) Symbol ["%nonassoc"]
    //   Symbol+ = (*) Symbol ["%precedence"]
    //   Symbol+ = (*) Symbol ["%right"]
    //   Symbol+ = (*) Symbol ["%start"]
    //   Symbol+ = (*) Symbol ["%token"]
    //   Symbol+ = (*) Symbol [r#"\'.\'"#]
    //   Symbol+ = (*) Symbol [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Symbol+ = (*) Symbol+ Symbol ["%%"]
    //   Symbol+ = (*) Symbol+ Symbol ["%debug"]
    //   Symbol+ = (*) Symbol+ Symbol ["%expect"]
    //   Symbol+ = (*) Symbol+ Symbol ["%left"]
    //   Symbol+ = (*) Symbol+ Symbol ["%nonassoc"]
    //   Symbol+ = (*) Symbol+ Symbol ["%precedence"]
    //   Symbol+ = (*) Symbol+ Symbol ["%right"]
    //   Symbol+ = (*) Symbol+ Symbol ["%start"]
    //   Symbol+ = (*) Symbol+ Symbol ["%token"]
    //   Symbol+ = (*) Symbol+ Symbol [r#"\'.\'"#]
    //   Symbol+ = (*) Symbol+ Symbol [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   r#"\'.\'"# -> Shift(S45)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S46)
    //
    //   Ident -> S42
    //   Symbol -> S43
    //   Symbol+ -> S44
    pub fn __state9<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state45(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (31, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state46(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ident(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Symbol(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state43(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Symbol_2b(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 10
    //   BisonDeclaration = "%nonassoc" (*) Symbol+ ["%%"]
    //   BisonDeclaration = "%nonassoc" (*) Symbol+ ["%debug"]
    //   BisonDeclaration = "%nonassoc" (*) Symbol+ ["%expect"]
    //   BisonDeclaration = "%nonassoc" (*) Symbol+ ["%left"]
    //   BisonDeclaration = "%nonassoc" (*) Symbol+ ["%nonassoc"]
    //   BisonDeclaration = "%nonassoc" (*) Symbol+ ["%precedence"]
    //   BisonDeclaration = "%nonassoc" (*) Symbol+ ["%right"]
    //   BisonDeclaration = "%nonassoc" (*) Symbol+ ["%start"]
    //   BisonDeclaration = "%nonassoc" (*) Symbol+ ["%token"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%%"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%debug"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%expect"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%left"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%nonassoc"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%precedence"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%right"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%start"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%token"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Symbol = (*) Ident ["%%"]
    //   Symbol = (*) Ident ["%debug"]
    //   Symbol = (*) Ident ["%expect"]
    //   Symbol = (*) Ident ["%left"]
    //   Symbol = (*) Ident ["%nonassoc"]
    //   Symbol = (*) Ident ["%precedence"]
    //   Symbol = (*) Ident ["%right"]
    //   Symbol = (*) Ident ["%start"]
    //   Symbol = (*) Ident ["%token"]
    //   Symbol = (*) Ident [r#"\'.\'"#]
    //   Symbol = (*) Ident [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Symbol = (*) r#"\'.\'"# ["%%"]
    //   Symbol = (*) r#"\'.\'"# ["%debug"]
    //   Symbol = (*) r#"\'.\'"# ["%expect"]
    //   Symbol = (*) r#"\'.\'"# ["%left"]
    //   Symbol = (*) r#"\'.\'"# ["%nonassoc"]
    //   Symbol = (*) r#"\'.\'"# ["%precedence"]
    //   Symbol = (*) r#"\'.\'"# ["%right"]
    //   Symbol = (*) r#"\'.\'"# ["%start"]
    //   Symbol = (*) r#"\'.\'"# ["%token"]
    //   Symbol = (*) r#"\'.\'"# [r#"\'.\'"#]
    //   Symbol = (*) r#"\'.\'"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Symbol+ = (*) Symbol ["%%"]
    //   Symbol+ = (*) Symbol ["%debug"]
    //   Symbol+ = (*) Symbol ["%expect"]
    //   Symbol+ = (*) Symbol ["%left"]
    //   Symbol+ = (*) Symbol ["%nonassoc"]
    //   Symbol+ = (*) Symbol ["%precedence"]
    //   Symbol+ = (*) Symbol ["%right"]
    //   Symbol+ = (*) Symbol ["%start"]
    //   Symbol+ = (*) Symbol ["%token"]
    //   Symbol+ = (*) Symbol [r#"\'.\'"#]
    //   Symbol+ = (*) Symbol [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Symbol+ = (*) Symbol+ Symbol ["%%"]
    //   Symbol+ = (*) Symbol+ Symbol ["%debug"]
    //   Symbol+ = (*) Symbol+ Symbol ["%expect"]
    //   Symbol+ = (*) Symbol+ Symbol ["%left"]
    //   Symbol+ = (*) Symbol+ Symbol ["%nonassoc"]
    //   Symbol+ = (*) Symbol+ Symbol ["%precedence"]
    //   Symbol+ = (*) Symbol+ Symbol ["%right"]
    //   Symbol+ = (*) Symbol+ Symbol ["%start"]
    //   Symbol+ = (*) Symbol+ Symbol ["%token"]
    //   Symbol+ = (*) Symbol+ Symbol [r#"\'.\'"#]
    //   Symbol+ = (*) Symbol+ Symbol [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   r#"\'.\'"# -> Shift(S45)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S46)
    //
    //   Ident -> S42
    //   Symbol -> S43
    //   Symbol+ -> S47
    pub fn __state10<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state45(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (31, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state46(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ident(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Symbol(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state43(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Symbol_2b(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state47(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 11
    //   BisonDeclaration = "%precedence" (*) Symbol+ ["%%"]
    //   BisonDeclaration = "%precedence" (*) Symbol+ ["%debug"]
    //   BisonDeclaration = "%precedence" (*) Symbol+ ["%expect"]
    //   BisonDeclaration = "%precedence" (*) Symbol+ ["%left"]
    //   BisonDeclaration = "%precedence" (*) Symbol+ ["%nonassoc"]
    //   BisonDeclaration = "%precedence" (*) Symbol+ ["%precedence"]
    //   BisonDeclaration = "%precedence" (*) Symbol+ ["%right"]
    //   BisonDeclaration = "%precedence" (*) Symbol+ ["%start"]
    //   BisonDeclaration = "%precedence" (*) Symbol+ ["%token"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%%"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%debug"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%expect"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%left"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%nonassoc"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%precedence"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%right"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%start"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%token"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Symbol = (*) Ident ["%%"]
    //   Symbol = (*) Ident ["%debug"]
    //   Symbol = (*) Ident ["%expect"]
    //   Symbol = (*) Ident ["%left"]
    //   Symbol = (*) Ident ["%nonassoc"]
    //   Symbol = (*) Ident ["%precedence"]
    //   Symbol = (*) Ident ["%right"]
    //   Symbol = (*) Ident ["%start"]
    //   Symbol = (*) Ident ["%token"]
    //   Symbol = (*) Ident [r#"\'.\'"#]
    //   Symbol = (*) Ident [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Symbol = (*) r#"\'.\'"# ["%%"]
    //   Symbol = (*) r#"\'.\'"# ["%debug"]
    //   Symbol = (*) r#"\'.\'"# ["%expect"]
    //   Symbol = (*) r#"\'.\'"# ["%left"]
    //   Symbol = (*) r#"\'.\'"# ["%nonassoc"]
    //   Symbol = (*) r#"\'.\'"# ["%precedence"]
    //   Symbol = (*) r#"\'.\'"# ["%right"]
    //   Symbol = (*) r#"\'.\'"# ["%start"]
    //   Symbol = (*) r#"\'.\'"# ["%token"]
    //   Symbol = (*) r#"\'.\'"# [r#"\'.\'"#]
    //   Symbol = (*) r#"\'.\'"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Symbol+ = (*) Symbol ["%%"]
    //   Symbol+ = (*) Symbol ["%debug"]
    //   Symbol+ = (*) Symbol ["%expect"]
    //   Symbol+ = (*) Symbol ["%left"]
    //   Symbol+ = (*) Symbol ["%nonassoc"]
    //   Symbol+ = (*) Symbol ["%precedence"]
    //   Symbol+ = (*) Symbol ["%right"]
    //   Symbol+ = (*) Symbol ["%start"]
    //   Symbol+ = (*) Symbol ["%token"]
    //   Symbol+ = (*) Symbol [r#"\'.\'"#]
    //   Symbol+ = (*) Symbol [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Symbol+ = (*) Symbol+ Symbol ["%%"]
    //   Symbol+ = (*) Symbol+ Symbol ["%debug"]
    //   Symbol+ = (*) Symbol+ Symbol ["%expect"]
    //   Symbol+ = (*) Symbol+ Symbol ["%left"]
    //   Symbol+ = (*) Symbol+ Symbol ["%nonassoc"]
    //   Symbol+ = (*) Symbol+ Symbol ["%precedence"]
    //   Symbol+ = (*) Symbol+ Symbol ["%right"]
    //   Symbol+ = (*) Symbol+ Symbol ["%start"]
    //   Symbol+ = (*) Symbol+ Symbol ["%token"]
    //   Symbol+ = (*) Symbol+ Symbol [r#"\'.\'"#]
    //   Symbol+ = (*) Symbol+ Symbol [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   r#"\'.\'"# -> Shift(S45)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S46)
    //
    //   Ident -> S42
    //   Symbol -> S43
    //   Symbol+ -> S48
    pub fn __state11<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state45(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (31, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state46(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ident(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Symbol(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state43(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Symbol_2b(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state48(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 12
    //   BisonDeclaration = "%right" (*) Symbol+ ["%%"]
    //   BisonDeclaration = "%right" (*) Symbol+ ["%debug"]
    //   BisonDeclaration = "%right" (*) Symbol+ ["%expect"]
    //   BisonDeclaration = "%right" (*) Symbol+ ["%left"]
    //   BisonDeclaration = "%right" (*) Symbol+ ["%nonassoc"]
    //   BisonDeclaration = "%right" (*) Symbol+ ["%precedence"]
    //   BisonDeclaration = "%right" (*) Symbol+ ["%right"]
    //   BisonDeclaration = "%right" (*) Symbol+ ["%start"]
    //   BisonDeclaration = "%right" (*) Symbol+ ["%token"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%%"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%debug"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%expect"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%left"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%nonassoc"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%precedence"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%right"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%start"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%token"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Symbol = (*) Ident ["%%"]
    //   Symbol = (*) Ident ["%debug"]
    //   Symbol = (*) Ident ["%expect"]
    //   Symbol = (*) Ident ["%left"]
    //   Symbol = (*) Ident ["%nonassoc"]
    //   Symbol = (*) Ident ["%precedence"]
    //   Symbol = (*) Ident ["%right"]
    //   Symbol = (*) Ident ["%start"]
    //   Symbol = (*) Ident ["%token"]
    //   Symbol = (*) Ident [r#"\'.\'"#]
    //   Symbol = (*) Ident [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Symbol = (*) r#"\'.\'"# ["%%"]
    //   Symbol = (*) r#"\'.\'"# ["%debug"]
    //   Symbol = (*) r#"\'.\'"# ["%expect"]
    //   Symbol = (*) r#"\'.\'"# ["%left"]
    //   Symbol = (*) r#"\'.\'"# ["%nonassoc"]
    //   Symbol = (*) r#"\'.\'"# ["%precedence"]
    //   Symbol = (*) r#"\'.\'"# ["%right"]
    //   Symbol = (*) r#"\'.\'"# ["%start"]
    //   Symbol = (*) r#"\'.\'"# ["%token"]
    //   Symbol = (*) r#"\'.\'"# [r#"\'.\'"#]
    //   Symbol = (*) r#"\'.\'"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Symbol+ = (*) Symbol ["%%"]
    //   Symbol+ = (*) Symbol ["%debug"]
    //   Symbol+ = (*) Symbol ["%expect"]
    //   Symbol+ = (*) Symbol ["%left"]
    //   Symbol+ = (*) Symbol ["%nonassoc"]
    //   Symbol+ = (*) Symbol ["%precedence"]
    //   Symbol+ = (*) Symbol ["%right"]
    //   Symbol+ = (*) Symbol ["%start"]
    //   Symbol+ = (*) Symbol ["%token"]
    //   Symbol+ = (*) Symbol [r#"\'.\'"#]
    //   Symbol+ = (*) Symbol [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Symbol+ = (*) Symbol+ Symbol ["%%"]
    //   Symbol+ = (*) Symbol+ Symbol ["%debug"]
    //   Symbol+ = (*) Symbol+ Symbol ["%expect"]
    //   Symbol+ = (*) Symbol+ Symbol ["%left"]
    //   Symbol+ = (*) Symbol+ Symbol ["%nonassoc"]
    //   Symbol+ = (*) Symbol+ Symbol ["%precedence"]
    //   Symbol+ = (*) Symbol+ Symbol ["%right"]
    //   Symbol+ = (*) Symbol+ Symbol ["%start"]
    //   Symbol+ = (*) Symbol+ Symbol ["%token"]
    //   Symbol+ = (*) Symbol+ Symbol [r#"\'.\'"#]
    //   Symbol+ = (*) Symbol+ Symbol [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   r#"\'.\'"# -> Shift(S45)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S46)
    //
    //   Ident -> S42
    //   Symbol -> S43
    //   Symbol+ -> S49
    pub fn __state12<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state45(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (31, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state46(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ident(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Symbol(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state43(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Symbol_2b(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state49(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 13
    //   BisonDeclaration = "%start" (*) Ident ["%%"]
    //   BisonDeclaration = "%start" (*) Ident ["%debug"]
    //   BisonDeclaration = "%start" (*) Ident ["%expect"]
    //   BisonDeclaration = "%start" (*) Ident ["%left"]
    //   BisonDeclaration = "%start" (*) Ident ["%nonassoc"]
    //   BisonDeclaration = "%start" (*) Ident ["%precedence"]
    //   BisonDeclaration = "%start" (*) Ident ["%right"]
    //   BisonDeclaration = "%start" (*) Ident ["%start"]
    //   BisonDeclaration = "%start" (*) Ident ["%token"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%%"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%debug"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%expect"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%left"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%nonassoc"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%precedence"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%right"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%start"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%token"]
    //
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S51)
    //
    //   Ident -> S50
    pub fn __state13<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (31, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state51(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ident(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state50(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 14
    //   BisonDeclaration = "%token" (*) Ident ["%%"]
    //   BisonDeclaration = "%token" (*) Ident ["%debug"]
    //   BisonDeclaration = "%token" (*) Ident ["%expect"]
    //   BisonDeclaration = "%token" (*) Ident ["%left"]
    //   BisonDeclaration = "%token" (*) Ident ["%nonassoc"]
    //   BisonDeclaration = "%token" (*) Ident ["%precedence"]
    //   BisonDeclaration = "%token" (*) Ident ["%right"]
    //   BisonDeclaration = "%token" (*) Ident ["%start"]
    //   BisonDeclaration = "%token" (*) Ident ["%token"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%%"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%debug"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%expect"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%left"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%nonassoc"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%precedence"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%right"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%start"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%token"]
    //
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S51)
    //
    //   Ident -> S52
    pub fn __state14<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (31, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state51(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ident(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state52(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 15
    //   AnyToken+ = AnyToken (*) ["%}"]
    //   AnyToken+ = AnyToken (*) ["("]
    //   AnyToken+ = AnyToken (*) [")"]
    //   AnyToken+ = AnyToken (*) ["*"]
    //   AnyToken+ = AnyToken (*) [","]
    //   AnyToken+ = AnyToken (*) ["."]
    //   AnyToken+ = AnyToken (*) [";"]
    //   AnyToken+ = AnyToken (*) ["="]
    //   AnyToken+ = AnyToken (*) ["["]
    //   AnyToken+ = AnyToken (*) ["]"]
    //   AnyToken+ = AnyToken (*) ["{"]
    //   AnyToken+ = AnyToken (*) ["}"]
    //   AnyToken+ = AnyToken (*) [r#"\"[^\"]*\""#]
    //   AnyToken+ = AnyToken (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   AnyToken+ = AnyToken (*) [r#"$[$0-9]+"#]
    //   AnyToken+ = AnyToken (*) [r#"\'.\'"#]
    //   AnyToken+ = AnyToken (*) [r#"[0-9]+"#]
    //   AnyToken+ = AnyToken (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "%}" -> Reduce(AnyToken+ = AnyToken => ActionFn(61);)
    //   "(" -> Reduce(AnyToken+ = AnyToken => ActionFn(61);)
    //   ")" -> Reduce(AnyToken+ = AnyToken => ActionFn(61);)
    //   "*" -> Reduce(AnyToken+ = AnyToken => ActionFn(61);)
    //   "," -> Reduce(AnyToken+ = AnyToken => ActionFn(61);)
    //   "." -> Reduce(AnyToken+ = AnyToken => ActionFn(61);)
    //   ";" -> Reduce(AnyToken+ = AnyToken => ActionFn(61);)
    //   "=" -> Reduce(AnyToken+ = AnyToken => ActionFn(61);)
    //   "[" -> Reduce(AnyToken+ = AnyToken => ActionFn(61);)
    //   "]" -> Reduce(AnyToken+ = AnyToken => ActionFn(61);)
    //   "{" -> Reduce(AnyToken+ = AnyToken => ActionFn(61);)
    //   "}" -> Reduce(AnyToken+ = AnyToken => ActionFn(61);)
    //   r#"\"[^\"]*\""# -> Reduce(AnyToken+ = AnyToken => ActionFn(61);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(AnyToken+ = AnyToken => ActionFn(61);)
    //   r#"$[$0-9]+"# -> Reduce(AnyToken+ = AnyToken => ActionFn(61);)
    //   r#"\'.\'"# -> Reduce(AnyToken+ = AnyToken => ActionFn(61);)
    //   r#"[0-9]+"# -> Reduce(AnyToken+ = AnyToken => ActionFn(61);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(AnyToken+ = AnyToken => ActionFn(61);)
    //
    pub fn __state15<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<()>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (12, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (14, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action61(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::AnyToken_2b(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 16
    //   AnyToken = (*) UnpairedToken ["%}"]
    //   AnyToken = (*) UnpairedToken ["("]
    //   AnyToken = (*) UnpairedToken [")"]
    //   AnyToken = (*) UnpairedToken ["*"]
    //   AnyToken = (*) UnpairedToken [","]
    //   AnyToken = (*) UnpairedToken ["."]
    //   AnyToken = (*) UnpairedToken [";"]
    //   AnyToken = (*) UnpairedToken ["="]
    //   AnyToken = (*) UnpairedToken ["["]
    //   AnyToken = (*) UnpairedToken ["]"]
    //   AnyToken = (*) UnpairedToken ["{"]
    //   AnyToken = (*) UnpairedToken ["}"]
    //   AnyToken = (*) UnpairedToken [r#"\"[^\"]*\""#]
    //   AnyToken = (*) UnpairedToken [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   AnyToken = (*) UnpairedToken [r#"$[$0-9]+"#]
    //   AnyToken = (*) UnpairedToken [r#"\'.\'"#]
    //   AnyToken = (*) UnpairedToken [r#"[0-9]+"#]
    //   AnyToken = (*) UnpairedToken [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   AnyToken = (*) "(" ["%}"]
    //   AnyToken = (*) "(" ["("]
    //   AnyToken = (*) "(" [")"]
    //   AnyToken = (*) "(" ["*"]
    //   AnyToken = (*) "(" [","]
    //   AnyToken = (*) "(" ["."]
    //   AnyToken = (*) "(" [";"]
    //   AnyToken = (*) "(" ["="]
    //   AnyToken = (*) "(" ["["]
    //   AnyToken = (*) "(" ["]"]
    //   AnyToken = (*) "(" ["{"]
    //   AnyToken = (*) "(" ["}"]
    //   AnyToken = (*) "(" [r#"\"[^\"]*\""#]
    //   AnyToken = (*) "(" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   AnyToken = (*) "(" [r#"$[$0-9]+"#]
    //   AnyToken = (*) "(" [r#"\'.\'"#]
    //   AnyToken = (*) "(" [r#"[0-9]+"#]
    //   AnyToken = (*) "(" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   AnyToken = (*) ")" ["%}"]
    //   AnyToken = (*) ")" ["("]
    //   AnyToken = (*) ")" [")"]
    //   AnyToken = (*) ")" ["*"]
    //   AnyToken = (*) ")" [","]
    //   AnyToken = (*) ")" ["."]
    //   AnyToken = (*) ")" [";"]
    //   AnyToken = (*) ")" ["="]
    //   AnyToken = (*) ")" ["["]
    //   AnyToken = (*) ")" ["]"]
    //   AnyToken = (*) ")" ["{"]
    //   AnyToken = (*) ")" ["}"]
    //   AnyToken = (*) ")" [r#"\"[^\"]*\""#]
    //   AnyToken = (*) ")" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   AnyToken = (*) ")" [r#"$[$0-9]+"#]
    //   AnyToken = (*) ")" [r#"\'.\'"#]
    //   AnyToken = (*) ")" [r#"[0-9]+"#]
    //   AnyToken = (*) ")" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   AnyToken = (*) "[" ["%}"]
    //   AnyToken = (*) "[" ["("]
    //   AnyToken = (*) "[" [")"]
    //   AnyToken = (*) "[" ["*"]
    //   AnyToken = (*) "[" [","]
    //   AnyToken = (*) "[" ["."]
    //   AnyToken = (*) "[" [";"]
    //   AnyToken = (*) "[" ["="]
    //   AnyToken = (*) "[" ["["]
    //   AnyToken = (*) "[" ["]"]
    //   AnyToken = (*) "[" ["{"]
    //   AnyToken = (*) "[" ["}"]
    //   AnyToken = (*) "[" [r#"\"[^\"]*\""#]
    //   AnyToken = (*) "[" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   AnyToken = (*) "[" [r#"$[$0-9]+"#]
    //   AnyToken = (*) "[" [r#"\'.\'"#]
    //   AnyToken = (*) "[" [r#"[0-9]+"#]
    //   AnyToken = (*) "[" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   AnyToken = (*) "]" ["%}"]
    //   AnyToken = (*) "]" ["("]
    //   AnyToken = (*) "]" [")"]
    //   AnyToken = (*) "]" ["*"]
    //   AnyToken = (*) "]" [","]
    //   AnyToken = (*) "]" ["."]
    //   AnyToken = (*) "]" [";"]
    //   AnyToken = (*) "]" ["="]
    //   AnyToken = (*) "]" ["["]
    //   AnyToken = (*) "]" ["]"]
    //   AnyToken = (*) "]" ["{"]
    //   AnyToken = (*) "]" ["}"]
    //   AnyToken = (*) "]" [r#"\"[^\"]*\""#]
    //   AnyToken = (*) "]" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   AnyToken = (*) "]" [r#"$[$0-9]+"#]
    //   AnyToken = (*) "]" [r#"\'.\'"#]
    //   AnyToken = (*) "]" [r#"[0-9]+"#]
    //   AnyToken = (*) "]" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   AnyToken = (*) "{" ["%}"]
    //   AnyToken = (*) "{" ["("]
    //   AnyToken = (*) "{" [")"]
    //   AnyToken = (*) "{" ["*"]
    //   AnyToken = (*) "{" [","]
    //   AnyToken = (*) "{" ["."]
    //   AnyToken = (*) "{" [";"]
    //   AnyToken = (*) "{" ["="]
    //   AnyToken = (*) "{" ["["]
    //   AnyToken = (*) "{" ["]"]
    //   AnyToken = (*) "{" ["{"]
    //   AnyToken = (*) "{" ["}"]
    //   AnyToken = (*) "{" [r#"\"[^\"]*\""#]
    //   AnyToken = (*) "{" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   AnyToken = (*) "{" [r#"$[$0-9]+"#]
    //   AnyToken = (*) "{" [r#"\'.\'"#]
    //   AnyToken = (*) "{" [r#"[0-9]+"#]
    //   AnyToken = (*) "{" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   AnyToken = (*) "}" ["%}"]
    //   AnyToken = (*) "}" ["("]
    //   AnyToken = (*) "}" [")"]
    //   AnyToken = (*) "}" ["*"]
    //   AnyToken = (*) "}" [","]
    //   AnyToken = (*) "}" ["."]
    //   AnyToken = (*) "}" [";"]
    //   AnyToken = (*) "}" ["="]
    //   AnyToken = (*) "}" ["["]
    //   AnyToken = (*) "}" ["]"]
    //   AnyToken = (*) "}" ["{"]
    //   AnyToken = (*) "}" ["}"]
    //   AnyToken = (*) "}" [r#"\"[^\"]*\""#]
    //   AnyToken = (*) "}" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   AnyToken = (*) "}" [r#"$[$0-9]+"#]
    //   AnyToken = (*) "}" [r#"\'.\'"#]
    //   AnyToken = (*) "}" [r#"[0-9]+"#]
    //   AnyToken = (*) "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   AnyToken+ = AnyToken+ (*) AnyToken ["%}"]
    //   AnyToken+ = AnyToken+ (*) AnyToken ["("]
    //   AnyToken+ = AnyToken+ (*) AnyToken [")"]
    //   AnyToken+ = AnyToken+ (*) AnyToken ["*"]
    //   AnyToken+ = AnyToken+ (*) AnyToken [","]
    //   AnyToken+ = AnyToken+ (*) AnyToken ["."]
    //   AnyToken+ = AnyToken+ (*) AnyToken [";"]
    //   AnyToken+ = AnyToken+ (*) AnyToken ["="]
    //   AnyToken+ = AnyToken+ (*) AnyToken ["["]
    //   AnyToken+ = AnyToken+ (*) AnyToken ["]"]
    //   AnyToken+ = AnyToken+ (*) AnyToken ["{"]
    //   AnyToken+ = AnyToken+ (*) AnyToken ["}"]
    //   AnyToken+ = AnyToken+ (*) AnyToken [r#"\"[^\"]*\""#]
    //   AnyToken+ = AnyToken+ (*) AnyToken [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   AnyToken+ = AnyToken+ (*) AnyToken [r#"$[$0-9]+"#]
    //   AnyToken+ = AnyToken+ (*) AnyToken [r#"\'.\'"#]
    //   AnyToken+ = AnyToken+ (*) AnyToken [r#"[0-9]+"#]
    //   AnyToken+ = AnyToken+ (*) AnyToken [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   CDeclarations = "%{" AnyToken+ (*) "%}" ["%%"]
    //   CDeclarations = "%{" AnyToken+ (*) "%}" ["%debug"]
    //   CDeclarations = "%{" AnyToken+ (*) "%}" ["%expect"]
    //   CDeclarations = "%{" AnyToken+ (*) "%}" ["%left"]
    //   CDeclarations = "%{" AnyToken+ (*) "%}" ["%nonassoc"]
    //   CDeclarations = "%{" AnyToken+ (*) "%}" ["%precedence"]
    //   CDeclarations = "%{" AnyToken+ (*) "%}" ["%right"]
    //   CDeclarations = "%{" AnyToken+ (*) "%}" ["%start"]
    //   CDeclarations = "%{" AnyToken+ (*) "%}" ["%token"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%}"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["("]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [")"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["*"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [","]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["."]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [";"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["="]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["["]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["]"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["{"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["}"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\"[^\"]*\""#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"$[$0-9]+"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[0-9]+"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Integer = (*) r#"[0-9]+"# ["%}"]
    //   Integer = (*) r#"[0-9]+"# ["("]
    //   Integer = (*) r#"[0-9]+"# [")"]
    //   Integer = (*) r#"[0-9]+"# ["*"]
    //   Integer = (*) r#"[0-9]+"# [","]
    //   Integer = (*) r#"[0-9]+"# ["."]
    //   Integer = (*) r#"[0-9]+"# [";"]
    //   Integer = (*) r#"[0-9]+"# ["="]
    //   Integer = (*) r#"[0-9]+"# ["["]
    //   Integer = (*) r#"[0-9]+"# ["]"]
    //   Integer = (*) r#"[0-9]+"# ["{"]
    //   Integer = (*) r#"[0-9]+"# ["}"]
    //   Integer = (*) r#"[0-9]+"# [r#"\"[^\"]*\""#]
    //   Integer = (*) r#"[0-9]+"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Integer = (*) r#"[0-9]+"# [r#"$[$0-9]+"#]
    //   Integer = (*) r#"[0-9]+"# [r#"\'.\'"#]
    //   Integer = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Integer = (*) r#"[0-9]+"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Ident ["%}"]
    //   UnpairedToken = (*) Ident ["("]
    //   UnpairedToken = (*) Ident [")"]
    //   UnpairedToken = (*) Ident ["*"]
    //   UnpairedToken = (*) Ident [","]
    //   UnpairedToken = (*) Ident ["."]
    //   UnpairedToken = (*) Ident [";"]
    //   UnpairedToken = (*) Ident ["="]
    //   UnpairedToken = (*) Ident ["["]
    //   UnpairedToken = (*) Ident ["]"]
    //   UnpairedToken = (*) Ident ["{"]
    //   UnpairedToken = (*) Ident ["}"]
    //   UnpairedToken = (*) Ident [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) Ident [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Ident [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) Ident [r#"\'.\'"#]
    //   UnpairedToken = (*) Ident [r#"[0-9]+"#]
    //   UnpairedToken = (*) Ident [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Integer ["%}"]
    //   UnpairedToken = (*) Integer ["("]
    //   UnpairedToken = (*) Integer [")"]
    //   UnpairedToken = (*) Integer ["*"]
    //   UnpairedToken = (*) Integer [","]
    //   UnpairedToken = (*) Integer ["."]
    //   UnpairedToken = (*) Integer [";"]
    //   UnpairedToken = (*) Integer ["="]
    //   UnpairedToken = (*) Integer ["["]
    //   UnpairedToken = (*) Integer ["]"]
    //   UnpairedToken = (*) Integer ["{"]
    //   UnpairedToken = (*) Integer ["}"]
    //   UnpairedToken = (*) Integer [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) Integer [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Integer [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) Integer [r#"\'.\'"#]
    //   UnpairedToken = (*) Integer [r#"[0-9]+"#]
    //   UnpairedToken = (*) Integer [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "*" ["%}"]
    //   UnpairedToken = (*) "*" ["("]
    //   UnpairedToken = (*) "*" [")"]
    //   UnpairedToken = (*) "*" ["*"]
    //   UnpairedToken = (*) "*" [","]
    //   UnpairedToken = (*) "*" ["."]
    //   UnpairedToken = (*) "*" [";"]
    //   UnpairedToken = (*) "*" ["="]
    //   UnpairedToken = (*) "*" ["["]
    //   UnpairedToken = (*) "*" ["]"]
    //   UnpairedToken = (*) "*" ["{"]
    //   UnpairedToken = (*) "*" ["}"]
    //   UnpairedToken = (*) "*" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "*" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "*" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "*" [r#"\'.\'"#]
    //   UnpairedToken = (*) "*" [r#"[0-9]+"#]
    //   UnpairedToken = (*) "*" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "," ["%}"]
    //   UnpairedToken = (*) "," ["("]
    //   UnpairedToken = (*) "," [")"]
    //   UnpairedToken = (*) "," ["*"]
    //   UnpairedToken = (*) "," [","]
    //   UnpairedToken = (*) "," ["."]
    //   UnpairedToken = (*) "," [";"]
    //   UnpairedToken = (*) "," ["="]
    //   UnpairedToken = (*) "," ["["]
    //   UnpairedToken = (*) "," ["]"]
    //   UnpairedToken = (*) "," ["{"]
    //   UnpairedToken = (*) "," ["}"]
    //   UnpairedToken = (*) "," [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "," [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "," [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "," [r#"\'.\'"#]
    //   UnpairedToken = (*) "," [r#"[0-9]+"#]
    //   UnpairedToken = (*) "," [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "." ["%}"]
    //   UnpairedToken = (*) "." ["("]
    //   UnpairedToken = (*) "." [")"]
    //   UnpairedToken = (*) "." ["*"]
    //   UnpairedToken = (*) "." [","]
    //   UnpairedToken = (*) "." ["."]
    //   UnpairedToken = (*) "." [";"]
    //   UnpairedToken = (*) "." ["="]
    //   UnpairedToken = (*) "." ["["]
    //   UnpairedToken = (*) "." ["]"]
    //   UnpairedToken = (*) "." ["{"]
    //   UnpairedToken = (*) "." ["}"]
    //   UnpairedToken = (*) "." [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "." [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "." [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "." [r#"\'.\'"#]
    //   UnpairedToken = (*) "." [r#"[0-9]+"#]
    //   UnpairedToken = (*) "." [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) ";" ["%}"]
    //   UnpairedToken = (*) ";" ["("]
    //   UnpairedToken = (*) ";" [")"]
    //   UnpairedToken = (*) ";" ["*"]
    //   UnpairedToken = (*) ";" [","]
    //   UnpairedToken = (*) ";" ["."]
    //   UnpairedToken = (*) ";" [";"]
    //   UnpairedToken = (*) ";" ["="]
    //   UnpairedToken = (*) ";" ["["]
    //   UnpairedToken = (*) ";" ["]"]
    //   UnpairedToken = (*) ";" ["{"]
    //   UnpairedToken = (*) ";" ["}"]
    //   UnpairedToken = (*) ";" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) ";" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) ";" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) ";" [r#"\'.\'"#]
    //   UnpairedToken = (*) ";" [r#"[0-9]+"#]
    //   UnpairedToken = (*) ";" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "=" ["%}"]
    //   UnpairedToken = (*) "=" ["("]
    //   UnpairedToken = (*) "=" [")"]
    //   UnpairedToken = (*) "=" ["*"]
    //   UnpairedToken = (*) "=" [","]
    //   UnpairedToken = (*) "=" ["."]
    //   UnpairedToken = (*) "=" [";"]
    //   UnpairedToken = (*) "=" ["="]
    //   UnpairedToken = (*) "=" ["["]
    //   UnpairedToken = (*) "=" ["]"]
    //   UnpairedToken = (*) "=" ["{"]
    //   UnpairedToken = (*) "=" ["}"]
    //   UnpairedToken = (*) "=" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "=" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "=" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "=" [r#"\'.\'"#]
    //   UnpairedToken = (*) "=" [r#"[0-9]+"#]
    //   UnpairedToken = (*) "=" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["%}"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["("]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [")"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["*"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [","]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["."]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [";"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["="]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["["]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["]"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["{"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["}"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["%}"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["("]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [")"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["*"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [","]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["."]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [";"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["="]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["["]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["]"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["{"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["}"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["%}"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["("]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [")"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["*"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [","]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["."]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [";"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["="]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["["]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["]"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["{"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["}"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\'.\'"# ["%}"]
    //   UnpairedToken = (*) r#"\'.\'"# ["("]
    //   UnpairedToken = (*) r#"\'.\'"# [")"]
    //   UnpairedToken = (*) r#"\'.\'"# ["*"]
    //   UnpairedToken = (*) r#"\'.\'"# [","]
    //   UnpairedToken = (*) r#"\'.\'"# ["."]
    //   UnpairedToken = (*) r#"\'.\'"# [";"]
    //   UnpairedToken = (*) r#"\'.\'"# ["="]
    //   UnpairedToken = (*) r#"\'.\'"# ["["]
    //   UnpairedToken = (*) r#"\'.\'"# ["]"]
    //   UnpairedToken = (*) r#"\'.\'"# ["{"]
    //   UnpairedToken = (*) r#"\'.\'"# ["}"]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "%}" -> Shift(S54)
    //   "(" -> Shift(S21)
    //   ")" -> Shift(S22)
    //   "*" -> Shift(S23)
    //   "," -> Shift(S24)
    //   "." -> Shift(S25)
    //   ";" -> Shift(S26)
    //   "=" -> Shift(S27)
    //   "[" -> Shift(S28)
    //   "]" -> Shift(S29)
    //   "{" -> Shift(S30)
    //   "}" -> Shift(S31)
    //   r#"\"[^\"]*\""# -> Shift(S32)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S33)
    //   r#"$[$0-9]+"# -> Shift(S34)
    //   r#"\'.\'"# -> Shift(S35)
    //   r#"[0-9]+"# -> Shift(S36)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S37)
    //
    //   AnyToken -> S53
    //   Ident -> S17
    //   Integer -> S18
    //   UnpairedToken -> S19
    pub fn __state16<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<::std::vec::Vec<()>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state54(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state21(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state22(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state23(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state24(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (17, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state25(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state26(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state27(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state28(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (22, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state29(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state30(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state31(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state32(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state33(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state34(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state35(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state36(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (31, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state37(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::AnyToken(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym1, __sym2));
                }
                __Nonterminal::Ident(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state17(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state18(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::UnpairedToken(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state19(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 17
    //   UnpairedToken = Ident (*) ["%}"]
    //   UnpairedToken = Ident (*) ["("]
    //   UnpairedToken = Ident (*) [")"]
    //   UnpairedToken = Ident (*) ["*"]
    //   UnpairedToken = Ident (*) [","]
    //   UnpairedToken = Ident (*) ["."]
    //   UnpairedToken = Ident (*) [";"]
    //   UnpairedToken = Ident (*) ["="]
    //   UnpairedToken = Ident (*) ["["]
    //   UnpairedToken = Ident (*) ["]"]
    //   UnpairedToken = Ident (*) ["{"]
    //   UnpairedToken = Ident (*) ["}"]
    //   UnpairedToken = Ident (*) [r#"\"[^\"]*\""#]
    //   UnpairedToken = Ident (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = Ident (*) [r#"$[$0-9]+"#]
    //   UnpairedToken = Ident (*) [r#"\'.\'"#]
    //   UnpairedToken = Ident (*) [r#"[0-9]+"#]
    //   UnpairedToken = Ident (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "%}" -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   "(" -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   ")" -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   "*" -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   "," -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   "." -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   ";" -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   "=" -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   "[" -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   "]" -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   "{" -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   "}" -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   r#"\"[^\"]*\""# -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   r#"$[$0-9]+"# -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   r#"\'.\'"# -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   r#"[0-9]+"# -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //
    pub fn __state17<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Ident<'input>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (12, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (14, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action36(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::UnpairedToken(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 18
    //   UnpairedToken = Integer (*) ["%}"]
    //   UnpairedToken = Integer (*) ["("]
    //   UnpairedToken = Integer (*) [")"]
    //   UnpairedToken = Integer (*) ["*"]
    //   UnpairedToken = Integer (*) [","]
    //   UnpairedToken = Integer (*) ["."]
    //   UnpairedToken = Integer (*) [";"]
    //   UnpairedToken = Integer (*) ["="]
    //   UnpairedToken = Integer (*) ["["]
    //   UnpairedToken = Integer (*) ["]"]
    //   UnpairedToken = Integer (*) ["{"]
    //   UnpairedToken = Integer (*) ["}"]
    //   UnpairedToken = Integer (*) [r#"\"[^\"]*\""#]
    //   UnpairedToken = Integer (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = Integer (*) [r#"$[$0-9]+"#]
    //   UnpairedToken = Integer (*) [r#"\'.\'"#]
    //   UnpairedToken = Integer (*) [r#"[0-9]+"#]
    //   UnpairedToken = Integer (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "%}" -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   "(" -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   ")" -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   "*" -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   "," -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   "." -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   ";" -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   "=" -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   "[" -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   "]" -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   "{" -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   "}" -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   r#"\"[^\"]*\""# -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   r#"$[$0-9]+"# -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   r#"\'.\'"# -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   r#"[0-9]+"# -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //
    pub fn __state18<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (12, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (14, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action37(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::UnpairedToken(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 19
    //   AnyToken = UnpairedToken (*) ["%}"]
    //   AnyToken = UnpairedToken (*) ["("]
    //   AnyToken = UnpairedToken (*) [")"]
    //   AnyToken = UnpairedToken (*) ["*"]
    //   AnyToken = UnpairedToken (*) [","]
    //   AnyToken = UnpairedToken (*) ["."]
    //   AnyToken = UnpairedToken (*) [";"]
    //   AnyToken = UnpairedToken (*) ["="]
    //   AnyToken = UnpairedToken (*) ["["]
    //   AnyToken = UnpairedToken (*) ["]"]
    //   AnyToken = UnpairedToken (*) ["{"]
    //   AnyToken = UnpairedToken (*) ["}"]
    //   AnyToken = UnpairedToken (*) [r#"\"[^\"]*\""#]
    //   AnyToken = UnpairedToken (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   AnyToken = UnpairedToken (*) [r#"$[$0-9]+"#]
    //   AnyToken = UnpairedToken (*) [r#"\'.\'"#]
    //   AnyToken = UnpairedToken (*) [r#"[0-9]+"#]
    //   AnyToken = UnpairedToken (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "%}" -> Reduce(AnyToken = UnpairedToken => ActionFn(35);)
    //   "(" -> Reduce(AnyToken = UnpairedToken => ActionFn(35);)
    //   ")" -> Reduce(AnyToken = UnpairedToken => ActionFn(35);)
    //   "*" -> Reduce(AnyToken = UnpairedToken => ActionFn(35);)
    //   "," -> Reduce(AnyToken = UnpairedToken => ActionFn(35);)
    //   "." -> Reduce(AnyToken = UnpairedToken => ActionFn(35);)
    //   ";" -> Reduce(AnyToken = UnpairedToken => ActionFn(35);)
    //   "=" -> Reduce(AnyToken = UnpairedToken => ActionFn(35);)
    //   "[" -> Reduce(AnyToken = UnpairedToken => ActionFn(35);)
    //   "]" -> Reduce(AnyToken = UnpairedToken => ActionFn(35);)
    //   "{" -> Reduce(AnyToken = UnpairedToken => ActionFn(35);)
    //   "}" -> Reduce(AnyToken = UnpairedToken => ActionFn(35);)
    //   r#"\"[^\"]*\""# -> Reduce(AnyToken = UnpairedToken => ActionFn(35);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(AnyToken = UnpairedToken => ActionFn(35);)
    //   r#"$[$0-9]+"# -> Reduce(AnyToken = UnpairedToken => ActionFn(35);)
    //   r#"\'.\'"# -> Reduce(AnyToken = UnpairedToken => ActionFn(35);)
    //   r#"[0-9]+"# -> Reduce(AnyToken = UnpairedToken => ActionFn(35);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(AnyToken = UnpairedToken => ActionFn(35);)
    //
    pub fn __state19<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<()>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (12, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (14, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action35(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::AnyToken(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 20
    //   CDeclarations = "%{" "%}" (*) ["%%"]
    //   CDeclarations = "%{" "%}" (*) ["%debug"]
    //   CDeclarations = "%{" "%}" (*) ["%expect"]
    //   CDeclarations = "%{" "%}" (*) ["%left"]
    //   CDeclarations = "%{" "%}" (*) ["%nonassoc"]
    //   CDeclarations = "%{" "%}" (*) ["%precedence"]
    //   CDeclarations = "%{" "%}" (*) ["%right"]
    //   CDeclarations = "%{" "%}" (*) ["%start"]
    //   CDeclarations = "%{" "%}" (*) ["%token"]
    //
    //   "%%" -> Reduce(CDeclarations = "%{", "%}" => ActionFn(67);)
    //   "%debug" -> Reduce(CDeclarations = "%{", "%}" => ActionFn(67);)
    //   "%expect" -> Reduce(CDeclarations = "%{", "%}" => ActionFn(67);)
    //   "%left" -> Reduce(CDeclarations = "%{", "%}" => ActionFn(67);)
    //   "%nonassoc" -> Reduce(CDeclarations = "%{", "%}" => ActionFn(67);)
    //   "%precedence" -> Reduce(CDeclarations = "%{", "%}" => ActionFn(67);)
    //   "%right" -> Reduce(CDeclarations = "%{", "%}" => ActionFn(67);)
    //   "%start" -> Reduce(CDeclarations = "%{", "%}" => ActionFn(67);)
    //   "%token" -> Reduce(CDeclarations = "%{", "%}" => ActionFn(67);)
    //
    pub fn __state20<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (7, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action67(input, __sym0, __sym1, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::CDeclarations(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 21
    //   AnyToken = "(" (*) ["%}"]
    //   AnyToken = "(" (*) ["("]
    //   AnyToken = "(" (*) [")"]
    //   AnyToken = "(" (*) ["*"]
    //   AnyToken = "(" (*) [","]
    //   AnyToken = "(" (*) ["."]
    //   AnyToken = "(" (*) [";"]
    //   AnyToken = "(" (*) ["="]
    //   AnyToken = "(" (*) ["["]
    //   AnyToken = "(" (*) ["]"]
    //   AnyToken = "(" (*) ["{"]
    //   AnyToken = "(" (*) ["}"]
    //   AnyToken = "(" (*) [r#"\"[^\"]*\""#]
    //   AnyToken = "(" (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   AnyToken = "(" (*) [r#"$[$0-9]+"#]
    //   AnyToken = "(" (*) [r#"\'.\'"#]
    //   AnyToken = "(" (*) [r#"[0-9]+"#]
    //   AnyToken = "(" (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "%}" -> Reduce(AnyToken = "(" => ActionFn(33);)
    //   "(" -> Reduce(AnyToken = "(" => ActionFn(33);)
    //   ")" -> Reduce(AnyToken = "(" => ActionFn(33);)
    //   "*" -> Reduce(AnyToken = "(" => ActionFn(33);)
    //   "," -> Reduce(AnyToken = "(" => ActionFn(33);)
    //   "." -> Reduce(AnyToken = "(" => ActionFn(33);)
    //   ";" -> Reduce(AnyToken = "(" => ActionFn(33);)
    //   "=" -> Reduce(AnyToken = "(" => ActionFn(33);)
    //   "[" -> Reduce(AnyToken = "(" => ActionFn(33);)
    //   "]" -> Reduce(AnyToken = "(" => ActionFn(33);)
    //   "{" -> Reduce(AnyToken = "(" => ActionFn(33);)
    //   "}" -> Reduce(AnyToken = "(" => ActionFn(33);)
    //   r#"\"[^\"]*\""# -> Reduce(AnyToken = "(" => ActionFn(33);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(AnyToken = "(" => ActionFn(33);)
    //   r#"$[$0-9]+"# -> Reduce(AnyToken = "(" => ActionFn(33);)
    //   r#"\'.\'"# -> Reduce(AnyToken = "(" => ActionFn(33);)
    //   r#"[0-9]+"# -> Reduce(AnyToken = "(" => ActionFn(33);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(AnyToken = "(" => ActionFn(33);)
    //
    pub fn __state21<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (12, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (14, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action33(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::AnyToken(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 22
    //   AnyToken = ")" (*) ["%}"]
    //   AnyToken = ")" (*) ["("]
    //   AnyToken = ")" (*) [")"]
    //   AnyToken = ")" (*) ["*"]
    //   AnyToken = ")" (*) [","]
    //   AnyToken = ")" (*) ["."]
    //   AnyToken = ")" (*) [";"]
    //   AnyToken = ")" (*) ["="]
    //   AnyToken = ")" (*) ["["]
    //   AnyToken = ")" (*) ["]"]
    //   AnyToken = ")" (*) ["{"]
    //   AnyToken = ")" (*) ["}"]
    //   AnyToken = ")" (*) [r#"\"[^\"]*\""#]
    //   AnyToken = ")" (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   AnyToken = ")" (*) [r#"$[$0-9]+"#]
    //   AnyToken = ")" (*) [r#"\'.\'"#]
    //   AnyToken = ")" (*) [r#"[0-9]+"#]
    //   AnyToken = ")" (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "%}" -> Reduce(AnyToken = ")" => ActionFn(34);)
    //   "(" -> Reduce(AnyToken = ")" => ActionFn(34);)
    //   ")" -> Reduce(AnyToken = ")" => ActionFn(34);)
    //   "*" -> Reduce(AnyToken = ")" => ActionFn(34);)
    //   "," -> Reduce(AnyToken = ")" => ActionFn(34);)
    //   "." -> Reduce(AnyToken = ")" => ActionFn(34);)
    //   ";" -> Reduce(AnyToken = ")" => ActionFn(34);)
    //   "=" -> Reduce(AnyToken = ")" => ActionFn(34);)
    //   "[" -> Reduce(AnyToken = ")" => ActionFn(34);)
    //   "]" -> Reduce(AnyToken = ")" => ActionFn(34);)
    //   "{" -> Reduce(AnyToken = ")" => ActionFn(34);)
    //   "}" -> Reduce(AnyToken = ")" => ActionFn(34);)
    //   r#"\"[^\"]*\""# -> Reduce(AnyToken = ")" => ActionFn(34);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(AnyToken = ")" => ActionFn(34);)
    //   r#"$[$0-9]+"# -> Reduce(AnyToken = ")" => ActionFn(34);)
    //   r#"\'.\'"# -> Reduce(AnyToken = ")" => ActionFn(34);)
    //   r#"[0-9]+"# -> Reduce(AnyToken = ")" => ActionFn(34);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(AnyToken = ")" => ActionFn(34);)
    //
    pub fn __state22<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (12, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (14, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action34(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::AnyToken(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 23
    //   UnpairedToken = "*" (*) ["%}"]
    //   UnpairedToken = "*" (*) ["("]
    //   UnpairedToken = "*" (*) [")"]
    //   UnpairedToken = "*" (*) ["*"]
    //   UnpairedToken = "*" (*) [","]
    //   UnpairedToken = "*" (*) ["."]
    //   UnpairedToken = "*" (*) [";"]
    //   UnpairedToken = "*" (*) ["="]
    //   UnpairedToken = "*" (*) ["["]
    //   UnpairedToken = "*" (*) ["]"]
    //   UnpairedToken = "*" (*) ["{"]
    //   UnpairedToken = "*" (*) ["}"]
    //   UnpairedToken = "*" (*) [r#"\"[^\"]*\""#]
    //   UnpairedToken = "*" (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = "*" (*) [r#"$[$0-9]+"#]
    //   UnpairedToken = "*" (*) [r#"\'.\'"#]
    //   UnpairedToken = "*" (*) [r#"[0-9]+"#]
    //   UnpairedToken = "*" (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "%}" -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   "(" -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   ")" -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   "*" -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   "," -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   "." -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   ";" -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   "=" -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   "[" -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   "]" -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   "{" -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   "}" -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   r#"\"[^\"]*\""# -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   r#"$[$0-9]+"# -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   r#"\'.\'"# -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   r#"[0-9]+"# -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //
    pub fn __state23<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (12, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (14, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action45(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::UnpairedToken(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 24
    //   UnpairedToken = "," (*) ["%}"]
    //   UnpairedToken = "," (*) ["("]
    //   UnpairedToken = "," (*) [")"]
    //   UnpairedToken = "," (*) ["*"]
    //   UnpairedToken = "," (*) [","]
    //   UnpairedToken = "," (*) ["."]
    //   UnpairedToken = "," (*) [";"]
    //   UnpairedToken = "," (*) ["="]
    //   UnpairedToken = "," (*) ["["]
    //   UnpairedToken = "," (*) ["]"]
    //   UnpairedToken = "," (*) ["{"]
    //   UnpairedToken = "," (*) ["}"]
    //   UnpairedToken = "," (*) [r#"\"[^\"]*\""#]
    //   UnpairedToken = "," (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = "," (*) [r#"$[$0-9]+"#]
    //   UnpairedToken = "," (*) [r#"\'.\'"#]
    //   UnpairedToken = "," (*) [r#"[0-9]+"#]
    //   UnpairedToken = "," (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "%}" -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   "(" -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   ")" -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   "*" -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   "," -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   "." -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   ";" -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   "=" -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   "[" -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   "]" -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   "{" -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   "}" -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   r#"\"[^\"]*\""# -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   r#"$[$0-9]+"# -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   r#"\'.\'"# -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   r#"[0-9]+"# -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //
    pub fn __state24<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (12, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (14, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action40(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::UnpairedToken(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 25
    //   UnpairedToken = "." (*) ["%}"]
    //   UnpairedToken = "." (*) ["("]
    //   UnpairedToken = "." (*) [")"]
    //   UnpairedToken = "." (*) ["*"]
    //   UnpairedToken = "." (*) [","]
    //   UnpairedToken = "." (*) ["."]
    //   UnpairedToken = "." (*) [";"]
    //   UnpairedToken = "." (*) ["="]
    //   UnpairedToken = "." (*) ["["]
    //   UnpairedToken = "." (*) ["]"]
    //   UnpairedToken = "." (*) ["{"]
    //   UnpairedToken = "." (*) ["}"]
    //   UnpairedToken = "." (*) [r#"\"[^\"]*\""#]
    //   UnpairedToken = "." (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = "." (*) [r#"$[$0-9]+"#]
    //   UnpairedToken = "." (*) [r#"\'.\'"#]
    //   UnpairedToken = "." (*) [r#"[0-9]+"#]
    //   UnpairedToken = "." (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "%}" -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   "(" -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   ")" -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   "*" -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   "," -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   "." -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   ";" -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   "=" -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   "[" -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   "]" -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   "{" -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   "}" -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   r#"\"[^\"]*\""# -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   r#"$[$0-9]+"# -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   r#"\'.\'"# -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   r#"[0-9]+"# -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //
    pub fn __state25<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (12, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (14, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action39(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::UnpairedToken(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 26
    //   UnpairedToken = ";" (*) ["%}"]
    //   UnpairedToken = ";" (*) ["("]
    //   UnpairedToken = ";" (*) [")"]
    //   UnpairedToken = ";" (*) ["*"]
    //   UnpairedToken = ";" (*) [","]
    //   UnpairedToken = ";" (*) ["."]
    //   UnpairedToken = ";" (*) [";"]
    //   UnpairedToken = ";" (*) ["="]
    //   UnpairedToken = ";" (*) ["["]
    //   UnpairedToken = ";" (*) ["]"]
    //   UnpairedToken = ";" (*) ["{"]
    //   UnpairedToken = ";" (*) ["}"]
    //   UnpairedToken = ";" (*) [r#"\"[^\"]*\""#]
    //   UnpairedToken = ";" (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = ";" (*) [r#"$[$0-9]+"#]
    //   UnpairedToken = ";" (*) [r#"\'.\'"#]
    //   UnpairedToken = ";" (*) [r#"[0-9]+"#]
    //   UnpairedToken = ";" (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "%}" -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   "(" -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   ")" -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   "*" -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   "," -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   "." -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   ";" -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   "=" -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   "[" -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   "]" -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   "{" -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   "}" -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   r#"\"[^\"]*\""# -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   r#"$[$0-9]+"# -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   r#"\'.\'"# -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   r#"[0-9]+"# -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //
    pub fn __state26<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (12, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (14, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action42(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::UnpairedToken(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 27
    //   UnpairedToken = "=" (*) ["%}"]
    //   UnpairedToken = "=" (*) ["("]
    //   UnpairedToken = "=" (*) [")"]
    //   UnpairedToken = "=" (*) ["*"]
    //   UnpairedToken = "=" (*) [","]
    //   UnpairedToken = "=" (*) ["."]
    //   UnpairedToken = "=" (*) [";"]
    //   UnpairedToken = "=" (*) ["="]
    //   UnpairedToken = "=" (*) ["["]
    //   UnpairedToken = "=" (*) ["]"]
    //   UnpairedToken = "=" (*) ["{"]
    //   UnpairedToken = "=" (*) ["}"]
    //   UnpairedToken = "=" (*) [r#"\"[^\"]*\""#]
    //   UnpairedToken = "=" (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = "=" (*) [r#"$[$0-9]+"#]
    //   UnpairedToken = "=" (*) [r#"\'.\'"#]
    //   UnpairedToken = "=" (*) [r#"[0-9]+"#]
    //   UnpairedToken = "=" (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "%}" -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   "(" -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   ")" -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   "*" -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   "," -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   "." -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   ";" -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   "=" -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   "[" -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   "]" -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   "{" -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   "}" -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   r#"\"[^\"]*\""# -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   r#"$[$0-9]+"# -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   r#"\'.\'"# -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   r#"[0-9]+"# -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //
    pub fn __state27<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (12, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (14, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action41(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::UnpairedToken(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 28
    //   AnyToken = "[" (*) ["%}"]
    //   AnyToken = "[" (*) ["("]
    //   AnyToken = "[" (*) [")"]
    //   AnyToken = "[" (*) ["*"]
    //   AnyToken = "[" (*) [","]
    //   AnyToken = "[" (*) ["."]
    //   AnyToken = "[" (*) [";"]
    //   AnyToken = "[" (*) ["="]
    //   AnyToken = "[" (*) ["["]
    //   AnyToken = "[" (*) ["]"]
    //   AnyToken = "[" (*) ["{"]
    //   AnyToken = "[" (*) ["}"]
    //   AnyToken = "[" (*) [r#"\"[^\"]*\""#]
    //   AnyToken = "[" (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   AnyToken = "[" (*) [r#"$[$0-9]+"#]
    //   AnyToken = "[" (*) [r#"\'.\'"#]
    //   AnyToken = "[" (*) [r#"[0-9]+"#]
    //   AnyToken = "[" (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "%}" -> Reduce(AnyToken = "[" => ActionFn(31);)
    //   "(" -> Reduce(AnyToken = "[" => ActionFn(31);)
    //   ")" -> Reduce(AnyToken = "[" => ActionFn(31);)
    //   "*" -> Reduce(AnyToken = "[" => ActionFn(31);)
    //   "," -> Reduce(AnyToken = "[" => ActionFn(31);)
    //   "." -> Reduce(AnyToken = "[" => ActionFn(31);)
    //   ";" -> Reduce(AnyToken = "[" => ActionFn(31);)
    //   "=" -> Reduce(AnyToken = "[" => ActionFn(31);)
    //   "[" -> Reduce(AnyToken = "[" => ActionFn(31);)
    //   "]" -> Reduce(AnyToken = "[" => ActionFn(31);)
    //   "{" -> Reduce(AnyToken = "[" => ActionFn(31);)
    //   "}" -> Reduce(AnyToken = "[" => ActionFn(31);)
    //   r#"\"[^\"]*\""# -> Reduce(AnyToken = "[" => ActionFn(31);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(AnyToken = "[" => ActionFn(31);)
    //   r#"$[$0-9]+"# -> Reduce(AnyToken = "[" => ActionFn(31);)
    //   r#"\'.\'"# -> Reduce(AnyToken = "[" => ActionFn(31);)
    //   r#"[0-9]+"# -> Reduce(AnyToken = "[" => ActionFn(31);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(AnyToken = "[" => ActionFn(31);)
    //
    pub fn __state28<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (12, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (14, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action31(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::AnyToken(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 29
    //   AnyToken = "]" (*) ["%}"]
    //   AnyToken = "]" (*) ["("]
    //   AnyToken = "]" (*) [")"]
    //   AnyToken = "]" (*) ["*"]
    //   AnyToken = "]" (*) [","]
    //   AnyToken = "]" (*) ["."]
    //   AnyToken = "]" (*) [";"]
    //   AnyToken = "]" (*) ["="]
    //   AnyToken = "]" (*) ["["]
    //   AnyToken = "]" (*) ["]"]
    //   AnyToken = "]" (*) ["{"]
    //   AnyToken = "]" (*) ["}"]
    //   AnyToken = "]" (*) [r#"\"[^\"]*\""#]
    //   AnyToken = "]" (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   AnyToken = "]" (*) [r#"$[$0-9]+"#]
    //   AnyToken = "]" (*) [r#"\'.\'"#]
    //   AnyToken = "]" (*) [r#"[0-9]+"#]
    //   AnyToken = "]" (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "%}" -> Reduce(AnyToken = "]" => ActionFn(32);)
    //   "(" -> Reduce(AnyToken = "]" => ActionFn(32);)
    //   ")" -> Reduce(AnyToken = "]" => ActionFn(32);)
    //   "*" -> Reduce(AnyToken = "]" => ActionFn(32);)
    //   "," -> Reduce(AnyToken = "]" => ActionFn(32);)
    //   "." -> Reduce(AnyToken = "]" => ActionFn(32);)
    //   ";" -> Reduce(AnyToken = "]" => ActionFn(32);)
    //   "=" -> Reduce(AnyToken = "]" => ActionFn(32);)
    //   "[" -> Reduce(AnyToken = "]" => ActionFn(32);)
    //   "]" -> Reduce(AnyToken = "]" => ActionFn(32);)
    //   "{" -> Reduce(AnyToken = "]" => ActionFn(32);)
    //   "}" -> Reduce(AnyToken = "]" => ActionFn(32);)
    //   r#"\"[^\"]*\""# -> Reduce(AnyToken = "]" => ActionFn(32);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(AnyToken = "]" => ActionFn(32);)
    //   r#"$[$0-9]+"# -> Reduce(AnyToken = "]" => ActionFn(32);)
    //   r#"\'.\'"# -> Reduce(AnyToken = "]" => ActionFn(32);)
    //   r#"[0-9]+"# -> Reduce(AnyToken = "]" => ActionFn(32);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(AnyToken = "]" => ActionFn(32);)
    //
    pub fn __state29<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (12, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (14, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action32(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::AnyToken(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 30
    //   AnyToken = "{" (*) ["%}"]
    //   AnyToken = "{" (*) ["("]
    //   AnyToken = "{" (*) [")"]
    //   AnyToken = "{" (*) ["*"]
    //   AnyToken = "{" (*) [","]
    //   AnyToken = "{" (*) ["."]
    //   AnyToken = "{" (*) [";"]
    //   AnyToken = "{" (*) ["="]
    //   AnyToken = "{" (*) ["["]
    //   AnyToken = "{" (*) ["]"]
    //   AnyToken = "{" (*) ["{"]
    //   AnyToken = "{" (*) ["}"]
    //   AnyToken = "{" (*) [r#"\"[^\"]*\""#]
    //   AnyToken = "{" (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   AnyToken = "{" (*) [r#"$[$0-9]+"#]
    //   AnyToken = "{" (*) [r#"\'.\'"#]
    //   AnyToken = "{" (*) [r#"[0-9]+"#]
    //   AnyToken = "{" (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "%}" -> Reduce(AnyToken = "{" => ActionFn(29);)
    //   "(" -> Reduce(AnyToken = "{" => ActionFn(29);)
    //   ")" -> Reduce(AnyToken = "{" => ActionFn(29);)
    //   "*" -> Reduce(AnyToken = "{" => ActionFn(29);)
    //   "," -> Reduce(AnyToken = "{" => ActionFn(29);)
    //   "." -> Reduce(AnyToken = "{" => ActionFn(29);)
    //   ";" -> Reduce(AnyToken = "{" => ActionFn(29);)
    //   "=" -> Reduce(AnyToken = "{" => ActionFn(29);)
    //   "[" -> Reduce(AnyToken = "{" => ActionFn(29);)
    //   "]" -> Reduce(AnyToken = "{" => ActionFn(29);)
    //   "{" -> Reduce(AnyToken = "{" => ActionFn(29);)
    //   "}" -> Reduce(AnyToken = "{" => ActionFn(29);)
    //   r#"\"[^\"]*\""# -> Reduce(AnyToken = "{" => ActionFn(29);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(AnyToken = "{" => ActionFn(29);)
    //   r#"$[$0-9]+"# -> Reduce(AnyToken = "{" => ActionFn(29);)
    //   r#"\'.\'"# -> Reduce(AnyToken = "{" => ActionFn(29);)
    //   r#"[0-9]+"# -> Reduce(AnyToken = "{" => ActionFn(29);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(AnyToken = "{" => ActionFn(29);)
    //
    pub fn __state30<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (12, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (14, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action29(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::AnyToken(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 31
    //   AnyToken = "}" (*) ["%}"]
    //   AnyToken = "}" (*) ["("]
    //   AnyToken = "}" (*) [")"]
    //   AnyToken = "}" (*) ["*"]
    //   AnyToken = "}" (*) [","]
    //   AnyToken = "}" (*) ["."]
    //   AnyToken = "}" (*) [";"]
    //   AnyToken = "}" (*) ["="]
    //   AnyToken = "}" (*) ["["]
    //   AnyToken = "}" (*) ["]"]
    //   AnyToken = "}" (*) ["{"]
    //   AnyToken = "}" (*) ["}"]
    //   AnyToken = "}" (*) [r#"\"[^\"]*\""#]
    //   AnyToken = "}" (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   AnyToken = "}" (*) [r#"$[$0-9]+"#]
    //   AnyToken = "}" (*) [r#"\'.\'"#]
    //   AnyToken = "}" (*) [r#"[0-9]+"#]
    //   AnyToken = "}" (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "%}" -> Reduce(AnyToken = "}" => ActionFn(30);)
    //   "(" -> Reduce(AnyToken = "}" => ActionFn(30);)
    //   ")" -> Reduce(AnyToken = "}" => ActionFn(30);)
    //   "*" -> Reduce(AnyToken = "}" => ActionFn(30);)
    //   "," -> Reduce(AnyToken = "}" => ActionFn(30);)
    //   "." -> Reduce(AnyToken = "}" => ActionFn(30);)
    //   ";" -> Reduce(AnyToken = "}" => ActionFn(30);)
    //   "=" -> Reduce(AnyToken = "}" => ActionFn(30);)
    //   "[" -> Reduce(AnyToken = "}" => ActionFn(30);)
    //   "]" -> Reduce(AnyToken = "}" => ActionFn(30);)
    //   "{" -> Reduce(AnyToken = "}" => ActionFn(30);)
    //   "}" -> Reduce(AnyToken = "}" => ActionFn(30);)
    //   r#"\"[^\"]*\""# -> Reduce(AnyToken = "}" => ActionFn(30);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(AnyToken = "}" => ActionFn(30);)
    //   r#"$[$0-9]+"# -> Reduce(AnyToken = "}" => ActionFn(30);)
    //   r#"\'.\'"# -> Reduce(AnyToken = "}" => ActionFn(30);)
    //   r#"[0-9]+"# -> Reduce(AnyToken = "}" => ActionFn(30);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(AnyToken = "}" => ActionFn(30);)
    //
    pub fn __state31<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (12, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (14, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action30(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::AnyToken(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 32
    //   UnpairedToken = r#"\"[^\"]*\""# (*) ["%}"]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) ["("]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) [")"]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) ["*"]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) [","]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) ["."]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) [";"]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) ["="]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) ["["]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) ["]"]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) ["{"]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) ["}"]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) [r#"\"[^\"]*\""#]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) [r#"$[$0-9]+"#]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) [r#"\'.\'"#]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) [r#"[0-9]+"#]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "%}" -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   "(" -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   ")" -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   "*" -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   "," -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   "." -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   ";" -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   "=" -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   "[" -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   "]" -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   "{" -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   "}" -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   r#"\"[^\"]*\""# -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   r#"$[$0-9]+"# -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   r#"\'.\'"# -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   r#"[0-9]+"# -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //
    pub fn __state32<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (12, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (14, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action38(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::UnpairedToken(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 33
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["%}"]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["("]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) [")"]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["*"]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) [","]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["."]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) [";"]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["="]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["["]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["]"]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["{"]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["}"]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) [r#"\"[^\"]*\""#]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) [r#"$[$0-9]+"#]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) [r#"\'.\'"#]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) [r#"[0-9]+"#]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "%}" -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   "(" -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   ")" -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   "*" -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   "," -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   "." -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   ";" -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   "=" -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   "[" -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   "]" -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   "{" -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   "}" -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   r#"\"[^\"]*\""# -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   r#"$[$0-9]+"# -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   r#"\'.\'"# -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   r#"[0-9]+"# -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //
    pub fn __state33<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (12, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (14, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action44(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::UnpairedToken(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 34
    //   UnpairedToken = r#"$[$0-9]+"# (*) ["%}"]
    //   UnpairedToken = r#"$[$0-9]+"# (*) ["("]
    //   UnpairedToken = r#"$[$0-9]+"# (*) [")"]
    //   UnpairedToken = r#"$[$0-9]+"# (*) ["*"]
    //   UnpairedToken = r#"$[$0-9]+"# (*) [","]
    //   UnpairedToken = r#"$[$0-9]+"# (*) ["."]
    //   UnpairedToken = r#"$[$0-9]+"# (*) [";"]
    //   UnpairedToken = r#"$[$0-9]+"# (*) ["="]
    //   UnpairedToken = r#"$[$0-9]+"# (*) ["["]
    //   UnpairedToken = r#"$[$0-9]+"# (*) ["]"]
    //   UnpairedToken = r#"$[$0-9]+"# (*) ["{"]
    //   UnpairedToken = r#"$[$0-9]+"# (*) ["}"]
    //   UnpairedToken = r#"$[$0-9]+"# (*) [r#"\"[^\"]*\""#]
    //   UnpairedToken = r#"$[$0-9]+"# (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = r#"$[$0-9]+"# (*) [r#"$[$0-9]+"#]
    //   UnpairedToken = r#"$[$0-9]+"# (*) [r#"\'.\'"#]
    //   UnpairedToken = r#"$[$0-9]+"# (*) [r#"[0-9]+"#]
    //   UnpairedToken = r#"$[$0-9]+"# (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "%}" -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   "(" -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   ")" -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   "*" -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   "," -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   "." -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   ";" -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   "=" -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   "[" -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   "]" -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   "{" -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   "}" -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   r#"\"[^\"]*\""# -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   r#"$[$0-9]+"# -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   r#"\'.\'"# -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   r#"[0-9]+"# -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //
    pub fn __state34<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (12, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (14, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action43(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::UnpairedToken(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 35
    //   UnpairedToken = r#"\'.\'"# (*) ["%}"]
    //   UnpairedToken = r#"\'.\'"# (*) ["("]
    //   UnpairedToken = r#"\'.\'"# (*) [")"]
    //   UnpairedToken = r#"\'.\'"# (*) ["*"]
    //   UnpairedToken = r#"\'.\'"# (*) [","]
    //   UnpairedToken = r#"\'.\'"# (*) ["."]
    //   UnpairedToken = r#"\'.\'"# (*) [";"]
    //   UnpairedToken = r#"\'.\'"# (*) ["="]
    //   UnpairedToken = r#"\'.\'"# (*) ["["]
    //   UnpairedToken = r#"\'.\'"# (*) ["]"]
    //   UnpairedToken = r#"\'.\'"# (*) ["{"]
    //   UnpairedToken = r#"\'.\'"# (*) ["}"]
    //   UnpairedToken = r#"\'.\'"# (*) [r#"\"[^\"]*\""#]
    //   UnpairedToken = r#"\'.\'"# (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = r#"\'.\'"# (*) [r#"$[$0-9]+"#]
    //   UnpairedToken = r#"\'.\'"# (*) [r#"\'.\'"#]
    //   UnpairedToken = r#"\'.\'"# (*) [r#"[0-9]+"#]
    //   UnpairedToken = r#"\'.\'"# (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "%}" -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   "(" -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   ")" -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   "*" -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   "," -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   "." -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   ";" -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   "=" -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   "[" -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   "]" -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   "{" -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   "}" -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   r#"\"[^\"]*\""# -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   r#"$[$0-9]+"# -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   r#"\'.\'"# -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   r#"[0-9]+"# -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //
    pub fn __state35<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (12, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (14, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action46(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::UnpairedToken(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 36
    //   Integer = r#"[0-9]+"# (*) ["%}"]
    //   Integer = r#"[0-9]+"# (*) ["("]
    //   Integer = r#"[0-9]+"# (*) [")"]
    //   Integer = r#"[0-9]+"# (*) ["*"]
    //   Integer = r#"[0-9]+"# (*) [","]
    //   Integer = r#"[0-9]+"# (*) ["."]
    //   Integer = r#"[0-9]+"# (*) [";"]
    //   Integer = r#"[0-9]+"# (*) ["="]
    //   Integer = r#"[0-9]+"# (*) ["["]
    //   Integer = r#"[0-9]+"# (*) ["]"]
    //   Integer = r#"[0-9]+"# (*) ["{"]
    //   Integer = r#"[0-9]+"# (*) ["}"]
    //   Integer = r#"[0-9]+"# (*) [r#"\"[^\"]*\""#]
    //   Integer = r#"[0-9]+"# (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Integer = r#"[0-9]+"# (*) [r#"$[$0-9]+"#]
    //   Integer = r#"[0-9]+"# (*) [r#"\'.\'"#]
    //   Integer = r#"[0-9]+"# (*) [r#"[0-9]+"#]
    //   Integer = r#"[0-9]+"# (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "%}" -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   "(" -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   ")" -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   "*" -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   "," -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   "." -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   ";" -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   "=" -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   "[" -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   "]" -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   "{" -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   "}" -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   r#"\"[^\"]*\""# -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   r#"$[$0-9]+"# -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   r#"\'.\'"# -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   r#"[0-9]+"# -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //
    pub fn __state36<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (12, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (14, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action15(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Integer(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 37
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["%}"]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["("]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) [")"]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["*"]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) [","]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["."]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) [";"]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["="]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["["]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["]"]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["{"]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["}"]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) [r#"\"[^\"]*\""#]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) [r#"$[$0-9]+"#]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) [r#"\'.\'"#]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) [r#"[0-9]+"#]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "%}" -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   "(" -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   ")" -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   "*" -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   "," -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   "." -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   ";" -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   "=" -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   "[" -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   "]" -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   "{" -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   "}" -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   r#"\"[^\"]*\""# -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   r#"$[$0-9]+"# -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   r#"\'.\'"# -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   r#"[0-9]+"# -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //
    pub fn __state37<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (12, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (14, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action14(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ident(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 38
    //   BisonDeclaration+ = BisonDeclaration+ BisonDeclaration (*) ["%%"]
    //   BisonDeclaration+ = BisonDeclaration+ BisonDeclaration (*) ["%debug"]
    //   BisonDeclaration+ = BisonDeclaration+ BisonDeclaration (*) ["%expect"]
    //   BisonDeclaration+ = BisonDeclaration+ BisonDeclaration (*) ["%left"]
    //   BisonDeclaration+ = BisonDeclaration+ BisonDeclaration (*) ["%nonassoc"]
    //   BisonDeclaration+ = BisonDeclaration+ BisonDeclaration (*) ["%precedence"]
    //   BisonDeclaration+ = BisonDeclaration+ BisonDeclaration (*) ["%right"]
    //   BisonDeclaration+ = BisonDeclaration+ BisonDeclaration (*) ["%start"]
    //   BisonDeclaration+ = BisonDeclaration+ BisonDeclaration (*) ["%token"]
    //
    //   "%%" -> Reduce(BisonDeclaration+ = BisonDeclaration+, BisonDeclaration => ActionFn(64);)
    //   "%debug" -> Reduce(BisonDeclaration+ = BisonDeclaration+, BisonDeclaration => ActionFn(64);)
    //   "%expect" -> Reduce(BisonDeclaration+ = BisonDeclaration+, BisonDeclaration => ActionFn(64);)
    //   "%left" -> Reduce(BisonDeclaration+ = BisonDeclaration+, BisonDeclaration => ActionFn(64);)
    //   "%nonassoc" -> Reduce(BisonDeclaration+ = BisonDeclaration+, BisonDeclaration => ActionFn(64);)
    //   "%precedence" -> Reduce(BisonDeclaration+ = BisonDeclaration+, BisonDeclaration => ActionFn(64);)
    //   "%right" -> Reduce(BisonDeclaration+ = BisonDeclaration+, BisonDeclaration => ActionFn(64);)
    //   "%start" -> Reduce(BisonDeclaration+ = BisonDeclaration+, BisonDeclaration => ActionFn(64);)
    //   "%token" -> Reduce(BisonDeclaration+ = BisonDeclaration+, BisonDeclaration => ActionFn(64);)
    //
    pub fn __state38<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<::std::vec::Vec<Option<BisonDecl<'input>>>>,
        __sym1: &mut Option<Option<BisonDecl<'input>>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (7, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action64(input, __sym0, __sym1, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::BisonDeclaration_2b(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 39
    //   GrammarRule = (*) Ident ":" Alternatives ";" [EOF]
    //   GrammarRule = (*) Ident ":" Alternatives ";" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   GrammarRule+ = (*) GrammarRule [EOF]
    //   GrammarRule+ = (*) GrammarRule [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   GrammarRule+ = (*) GrammarRule+ GrammarRule [EOF]
    //   GrammarRule+ = (*) GrammarRule+ GrammarRule [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [":"]
    //   Yacc = CDeclarations BisonDeclarations "%%" (*) [EOF]
    //   Yacc = CDeclarations BisonDeclarations "%%" (*) GrammarRule+ [EOF]
    //
    //   EOF -> Reduce(Yacc = CDeclarations, BisonDeclarations, "%%" => ActionFn(71);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S58)
    //
    //   GrammarRule -> S55
    //   GrammarRule+ -> S56
    //   Ident -> S57
    pub fn __state39<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<()>,
        __sym1: &mut Option<Vec<BisonDecl<'input>>>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (31, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state58(input, __lookbehind, __tokens, __sym3));
            }
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action71(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Yacc(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym2.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::GrammarRule(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state55(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::GrammarRule_2b(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state56(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3));
                }
                __Nonterminal::Ident(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state57(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 40
    //   BisonDeclaration = "%expect" Integer (*) ["%%"]
    //   BisonDeclaration = "%expect" Integer (*) ["%debug"]
    //   BisonDeclaration = "%expect" Integer (*) ["%expect"]
    //   BisonDeclaration = "%expect" Integer (*) ["%left"]
    //   BisonDeclaration = "%expect" Integer (*) ["%nonassoc"]
    //   BisonDeclaration = "%expect" Integer (*) ["%precedence"]
    //   BisonDeclaration = "%expect" Integer (*) ["%right"]
    //   BisonDeclaration = "%expect" Integer (*) ["%start"]
    //   BisonDeclaration = "%expect" Integer (*) ["%token"]
    //
    //   "%%" -> Reduce(BisonDeclaration = "%expect", Integer => ActionFn(6);)
    //   "%debug" -> Reduce(BisonDeclaration = "%expect", Integer => ActionFn(6);)
    //   "%expect" -> Reduce(BisonDeclaration = "%expect", Integer => ActionFn(6);)
    //   "%left" -> Reduce(BisonDeclaration = "%expect", Integer => ActionFn(6);)
    //   "%nonassoc" -> Reduce(BisonDeclaration = "%expect", Integer => ActionFn(6);)
    //   "%precedence" -> Reduce(BisonDeclaration = "%expect", Integer => ActionFn(6);)
    //   "%right" -> Reduce(BisonDeclaration = "%expect", Integer => ActionFn(6);)
    //   "%start" -> Reduce(BisonDeclaration = "%expect", Integer => ActionFn(6);)
    //   "%token" -> Reduce(BisonDeclaration = "%expect", Integer => ActionFn(6);)
    //
    pub fn __state40<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (7, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action6(input, __sym0, __sym1, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::BisonDeclaration(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 41
    //   Integer = r#"[0-9]+"# (*) ["%%"]
    //   Integer = r#"[0-9]+"# (*) ["%debug"]
    //   Integer = r#"[0-9]+"# (*) ["%expect"]
    //   Integer = r#"[0-9]+"# (*) ["%left"]
    //   Integer = r#"[0-9]+"# (*) ["%nonassoc"]
    //   Integer = r#"[0-9]+"# (*) ["%precedence"]
    //   Integer = r#"[0-9]+"# (*) ["%right"]
    //   Integer = r#"[0-9]+"# (*) ["%start"]
    //   Integer = r#"[0-9]+"# (*) ["%token"]
    //
    //   "%%" -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   "%debug" -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   "%expect" -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   "%left" -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   "%nonassoc" -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   "%precedence" -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   "%right" -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   "%start" -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   "%token" -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //
    pub fn __state41<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (7, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action15(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Integer(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 42
    //   Symbol = Ident (*) ["%%"]
    //   Symbol = Ident (*) ["%debug"]
    //   Symbol = Ident (*) ["%expect"]
    //   Symbol = Ident (*) ["%left"]
    //   Symbol = Ident (*) ["%nonassoc"]
    //   Symbol = Ident (*) ["%precedence"]
    //   Symbol = Ident (*) ["%right"]
    //   Symbol = Ident (*) ["%start"]
    //   Symbol = Ident (*) ["%token"]
    //   Symbol = Ident (*) [r#"\'.\'"#]
    //   Symbol = Ident (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "%%" -> Reduce(Symbol = Ident => ActionFn(12);)
    //   "%debug" -> Reduce(Symbol = Ident => ActionFn(12);)
    //   "%expect" -> Reduce(Symbol = Ident => ActionFn(12);)
    //   "%left" -> Reduce(Symbol = Ident => ActionFn(12);)
    //   "%nonassoc" -> Reduce(Symbol = Ident => ActionFn(12);)
    //   "%precedence" -> Reduce(Symbol = Ident => ActionFn(12);)
    //   "%right" -> Reduce(Symbol = Ident => ActionFn(12);)
    //   "%start" -> Reduce(Symbol = Ident => ActionFn(12);)
    //   "%token" -> Reduce(Symbol = Ident => ActionFn(12);)
    //   r#"\'.\'"# -> Reduce(Symbol = Ident => ActionFn(12);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(Symbol = Ident => ActionFn(12);)
    //
    pub fn __state42<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Ident<'input>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (7, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action12(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Symbol(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 43
    //   Symbol+ = Symbol (*) ["%%"]
    //   Symbol+ = Symbol (*) ["%debug"]
    //   Symbol+ = Symbol (*) ["%expect"]
    //   Symbol+ = Symbol (*) ["%left"]
    //   Symbol+ = Symbol (*) ["%nonassoc"]
    //   Symbol+ = Symbol (*) ["%precedence"]
    //   Symbol+ = Symbol (*) ["%right"]
    //   Symbol+ = Symbol (*) ["%start"]
    //   Symbol+ = Symbol (*) ["%token"]
    //   Symbol+ = Symbol (*) [r#"\'.\'"#]
    //   Symbol+ = Symbol (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "%%" -> Reduce(Symbol+ = Symbol => ActionFn(51);)
    //   "%debug" -> Reduce(Symbol+ = Symbol => ActionFn(51);)
    //   "%expect" -> Reduce(Symbol+ = Symbol => ActionFn(51);)
    //   "%left" -> Reduce(Symbol+ = Symbol => ActionFn(51);)
    //   "%nonassoc" -> Reduce(Symbol+ = Symbol => ActionFn(51);)
    //   "%precedence" -> Reduce(Symbol+ = Symbol => ActionFn(51);)
    //   "%right" -> Reduce(Symbol+ = Symbol => ActionFn(51);)
    //   "%start" -> Reduce(Symbol+ = Symbol => ActionFn(51);)
    //   "%token" -> Reduce(Symbol+ = Symbol => ActionFn(51);)
    //   r#"\'.\'"# -> Reduce(Symbol+ = Symbol => ActionFn(51);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(Symbol+ = Symbol => ActionFn(51);)
    //
    pub fn __state43<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Symbol<'input>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (7, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action51(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Symbol_2b(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 44
    //   BisonDeclaration = "%left" Symbol+ (*) ["%%"]
    //   BisonDeclaration = "%left" Symbol+ (*) ["%debug"]
    //   BisonDeclaration = "%left" Symbol+ (*) ["%expect"]
    //   BisonDeclaration = "%left" Symbol+ (*) ["%left"]
    //   BisonDeclaration = "%left" Symbol+ (*) ["%nonassoc"]
    //   BisonDeclaration = "%left" Symbol+ (*) ["%precedence"]
    //   BisonDeclaration = "%left" Symbol+ (*) ["%right"]
    //   BisonDeclaration = "%left" Symbol+ (*) ["%start"]
    //   BisonDeclaration = "%left" Symbol+ (*) ["%token"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%%"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%debug"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%expect"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%left"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%nonassoc"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%precedence"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%right"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%start"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%token"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Symbol = (*) Ident ["%%"]
    //   Symbol = (*) Ident ["%debug"]
    //   Symbol = (*) Ident ["%expect"]
    //   Symbol = (*) Ident ["%left"]
    //   Symbol = (*) Ident ["%nonassoc"]
    //   Symbol = (*) Ident ["%precedence"]
    //   Symbol = (*) Ident ["%right"]
    //   Symbol = (*) Ident ["%start"]
    //   Symbol = (*) Ident ["%token"]
    //   Symbol = (*) Ident [r#"\'.\'"#]
    //   Symbol = (*) Ident [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Symbol = (*) r#"\'.\'"# ["%%"]
    //   Symbol = (*) r#"\'.\'"# ["%debug"]
    //   Symbol = (*) r#"\'.\'"# ["%expect"]
    //   Symbol = (*) r#"\'.\'"# ["%left"]
    //   Symbol = (*) r#"\'.\'"# ["%nonassoc"]
    //   Symbol = (*) r#"\'.\'"# ["%precedence"]
    //   Symbol = (*) r#"\'.\'"# ["%right"]
    //   Symbol = (*) r#"\'.\'"# ["%start"]
    //   Symbol = (*) r#"\'.\'"# ["%token"]
    //   Symbol = (*) r#"\'.\'"# [r#"\'.\'"#]
    //   Symbol = (*) r#"\'.\'"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Symbol+ = Symbol+ (*) Symbol ["%%"]
    //   Symbol+ = Symbol+ (*) Symbol ["%debug"]
    //   Symbol+ = Symbol+ (*) Symbol ["%expect"]
    //   Symbol+ = Symbol+ (*) Symbol ["%left"]
    //   Symbol+ = Symbol+ (*) Symbol ["%nonassoc"]
    //   Symbol+ = Symbol+ (*) Symbol ["%precedence"]
    //   Symbol+ = Symbol+ (*) Symbol ["%right"]
    //   Symbol+ = Symbol+ (*) Symbol ["%start"]
    //   Symbol+ = Symbol+ (*) Symbol ["%token"]
    //   Symbol+ = Symbol+ (*) Symbol [r#"\'.\'"#]
    //   Symbol+ = Symbol+ (*) Symbol [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "%%" -> Reduce(BisonDeclaration = "%left", Symbol+ => ActionFn(9);)
    //   "%debug" -> Reduce(BisonDeclaration = "%left", Symbol+ => ActionFn(9);)
    //   "%expect" -> Reduce(BisonDeclaration = "%left", Symbol+ => ActionFn(9);)
    //   "%left" -> Reduce(BisonDeclaration = "%left", Symbol+ => ActionFn(9);)
    //   "%nonassoc" -> Reduce(BisonDeclaration = "%left", Symbol+ => ActionFn(9);)
    //   "%precedence" -> Reduce(BisonDeclaration = "%left", Symbol+ => ActionFn(9);)
    //   "%right" -> Reduce(BisonDeclaration = "%left", Symbol+ => ActionFn(9);)
    //   "%start" -> Reduce(BisonDeclaration = "%left", Symbol+ => ActionFn(9);)
    //   "%token" -> Reduce(BisonDeclaration = "%left", Symbol+ => ActionFn(9);)
    //   r#"\'.\'"# -> Shift(S45)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S46)
    //
    //   Ident -> S42
    //   Symbol -> S59
    pub fn __state44<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<::std::vec::Vec<Symbol<'input>>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state45(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (31, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state46(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (7, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action9(input, __sym0, __sym1, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::BisonDeclaration(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ident(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Symbol(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state59(input, __lookbehind, __tokens, __lookahead, __sym1, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 45
    //   Symbol = r#"\'.\'"# (*) ["%%"]
    //   Symbol = r#"\'.\'"# (*) ["%debug"]
    //   Symbol = r#"\'.\'"# (*) ["%expect"]
    //   Symbol = r#"\'.\'"# (*) ["%left"]
    //   Symbol = r#"\'.\'"# (*) ["%nonassoc"]
    //   Symbol = r#"\'.\'"# (*) ["%precedence"]
    //   Symbol = r#"\'.\'"# (*) ["%right"]
    //   Symbol = r#"\'.\'"# (*) ["%start"]
    //   Symbol = r#"\'.\'"# (*) ["%token"]
    //   Symbol = r#"\'.\'"# (*) [r#"\'.\'"#]
    //   Symbol = r#"\'.\'"# (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "%%" -> Reduce(Symbol = r#"\'.\'"# => ActionFn(13);)
    //   "%debug" -> Reduce(Symbol = r#"\'.\'"# => ActionFn(13);)
    //   "%expect" -> Reduce(Symbol = r#"\'.\'"# => ActionFn(13);)
    //   "%left" -> Reduce(Symbol = r#"\'.\'"# => ActionFn(13);)
    //   "%nonassoc" -> Reduce(Symbol = r#"\'.\'"# => ActionFn(13);)
    //   "%precedence" -> Reduce(Symbol = r#"\'.\'"# => ActionFn(13);)
    //   "%right" -> Reduce(Symbol = r#"\'.\'"# => ActionFn(13);)
    //   "%start" -> Reduce(Symbol = r#"\'.\'"# => ActionFn(13);)
    //   "%token" -> Reduce(Symbol = r#"\'.\'"# => ActionFn(13);)
    //   r#"\'.\'"# -> Reduce(Symbol = r#"\'.\'"# => ActionFn(13);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(Symbol = r#"\'.\'"# => ActionFn(13);)
    //
    pub fn __state45<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (7, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action13(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Symbol(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 46
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["%%"]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["%debug"]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["%expect"]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["%left"]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["%nonassoc"]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["%precedence"]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["%right"]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["%start"]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["%token"]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) [r#"\'.\'"#]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "%%" -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   "%debug" -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   "%expect" -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   "%left" -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   "%nonassoc" -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   "%precedence" -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   "%right" -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   "%start" -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   "%token" -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   r#"\'.\'"# -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //
    pub fn __state46<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (7, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action14(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ident(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 47
    //   BisonDeclaration = "%nonassoc" Symbol+ (*) ["%%"]
    //   BisonDeclaration = "%nonassoc" Symbol+ (*) ["%debug"]
    //   BisonDeclaration = "%nonassoc" Symbol+ (*) ["%expect"]
    //   BisonDeclaration = "%nonassoc" Symbol+ (*) ["%left"]
    //   BisonDeclaration = "%nonassoc" Symbol+ (*) ["%nonassoc"]
    //   BisonDeclaration = "%nonassoc" Symbol+ (*) ["%precedence"]
    //   BisonDeclaration = "%nonassoc" Symbol+ (*) ["%right"]
    //   BisonDeclaration = "%nonassoc" Symbol+ (*) ["%start"]
    //   BisonDeclaration = "%nonassoc" Symbol+ (*) ["%token"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%%"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%debug"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%expect"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%left"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%nonassoc"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%precedence"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%right"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%start"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%token"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Symbol = (*) Ident ["%%"]
    //   Symbol = (*) Ident ["%debug"]
    //   Symbol = (*) Ident ["%expect"]
    //   Symbol = (*) Ident ["%left"]
    //   Symbol = (*) Ident ["%nonassoc"]
    //   Symbol = (*) Ident ["%precedence"]
    //   Symbol = (*) Ident ["%right"]
    //   Symbol = (*) Ident ["%start"]
    //   Symbol = (*) Ident ["%token"]
    //   Symbol = (*) Ident [r#"\'.\'"#]
    //   Symbol = (*) Ident [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Symbol = (*) r#"\'.\'"# ["%%"]
    //   Symbol = (*) r#"\'.\'"# ["%debug"]
    //   Symbol = (*) r#"\'.\'"# ["%expect"]
    //   Symbol = (*) r#"\'.\'"# ["%left"]
    //   Symbol = (*) r#"\'.\'"# ["%nonassoc"]
    //   Symbol = (*) r#"\'.\'"# ["%precedence"]
    //   Symbol = (*) r#"\'.\'"# ["%right"]
    //   Symbol = (*) r#"\'.\'"# ["%start"]
    //   Symbol = (*) r#"\'.\'"# ["%token"]
    //   Symbol = (*) r#"\'.\'"# [r#"\'.\'"#]
    //   Symbol = (*) r#"\'.\'"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Symbol+ = Symbol+ (*) Symbol ["%%"]
    //   Symbol+ = Symbol+ (*) Symbol ["%debug"]
    //   Symbol+ = Symbol+ (*) Symbol ["%expect"]
    //   Symbol+ = Symbol+ (*) Symbol ["%left"]
    //   Symbol+ = Symbol+ (*) Symbol ["%nonassoc"]
    //   Symbol+ = Symbol+ (*) Symbol ["%precedence"]
    //   Symbol+ = Symbol+ (*) Symbol ["%right"]
    //   Symbol+ = Symbol+ (*) Symbol ["%start"]
    //   Symbol+ = Symbol+ (*) Symbol ["%token"]
    //   Symbol+ = Symbol+ (*) Symbol [r#"\'.\'"#]
    //   Symbol+ = Symbol+ (*) Symbol [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "%%" -> Reduce(BisonDeclaration = "%nonassoc", Symbol+ => ActionFn(10);)
    //   "%debug" -> Reduce(BisonDeclaration = "%nonassoc", Symbol+ => ActionFn(10);)
    //   "%expect" -> Reduce(BisonDeclaration = "%nonassoc", Symbol+ => ActionFn(10);)
    //   "%left" -> Reduce(BisonDeclaration = "%nonassoc", Symbol+ => ActionFn(10);)
    //   "%nonassoc" -> Reduce(BisonDeclaration = "%nonassoc", Symbol+ => ActionFn(10);)
    //   "%precedence" -> Reduce(BisonDeclaration = "%nonassoc", Symbol+ => ActionFn(10);)
    //   "%right" -> Reduce(BisonDeclaration = "%nonassoc", Symbol+ => ActionFn(10);)
    //   "%start" -> Reduce(BisonDeclaration = "%nonassoc", Symbol+ => ActionFn(10);)
    //   "%token" -> Reduce(BisonDeclaration = "%nonassoc", Symbol+ => ActionFn(10);)
    //   r#"\'.\'"# -> Shift(S45)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S46)
    //
    //   Ident -> S42
    //   Symbol -> S59
    pub fn __state47<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<::std::vec::Vec<Symbol<'input>>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state45(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (31, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state46(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (7, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action10(input, __sym0, __sym1, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::BisonDeclaration(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ident(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Symbol(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state59(input, __lookbehind, __tokens, __lookahead, __sym1, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 48
    //   BisonDeclaration = "%precedence" Symbol+ (*) ["%%"]
    //   BisonDeclaration = "%precedence" Symbol+ (*) ["%debug"]
    //   BisonDeclaration = "%precedence" Symbol+ (*) ["%expect"]
    //   BisonDeclaration = "%precedence" Symbol+ (*) ["%left"]
    //   BisonDeclaration = "%precedence" Symbol+ (*) ["%nonassoc"]
    //   BisonDeclaration = "%precedence" Symbol+ (*) ["%precedence"]
    //   BisonDeclaration = "%precedence" Symbol+ (*) ["%right"]
    //   BisonDeclaration = "%precedence" Symbol+ (*) ["%start"]
    //   BisonDeclaration = "%precedence" Symbol+ (*) ["%token"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%%"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%debug"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%expect"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%left"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%nonassoc"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%precedence"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%right"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%start"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%token"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Symbol = (*) Ident ["%%"]
    //   Symbol = (*) Ident ["%debug"]
    //   Symbol = (*) Ident ["%expect"]
    //   Symbol = (*) Ident ["%left"]
    //   Symbol = (*) Ident ["%nonassoc"]
    //   Symbol = (*) Ident ["%precedence"]
    //   Symbol = (*) Ident ["%right"]
    //   Symbol = (*) Ident ["%start"]
    //   Symbol = (*) Ident ["%token"]
    //   Symbol = (*) Ident [r#"\'.\'"#]
    //   Symbol = (*) Ident [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Symbol = (*) r#"\'.\'"# ["%%"]
    //   Symbol = (*) r#"\'.\'"# ["%debug"]
    //   Symbol = (*) r#"\'.\'"# ["%expect"]
    //   Symbol = (*) r#"\'.\'"# ["%left"]
    //   Symbol = (*) r#"\'.\'"# ["%nonassoc"]
    //   Symbol = (*) r#"\'.\'"# ["%precedence"]
    //   Symbol = (*) r#"\'.\'"# ["%right"]
    //   Symbol = (*) r#"\'.\'"# ["%start"]
    //   Symbol = (*) r#"\'.\'"# ["%token"]
    //   Symbol = (*) r#"\'.\'"# [r#"\'.\'"#]
    //   Symbol = (*) r#"\'.\'"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Symbol+ = Symbol+ (*) Symbol ["%%"]
    //   Symbol+ = Symbol+ (*) Symbol ["%debug"]
    //   Symbol+ = Symbol+ (*) Symbol ["%expect"]
    //   Symbol+ = Symbol+ (*) Symbol ["%left"]
    //   Symbol+ = Symbol+ (*) Symbol ["%nonassoc"]
    //   Symbol+ = Symbol+ (*) Symbol ["%precedence"]
    //   Symbol+ = Symbol+ (*) Symbol ["%right"]
    //   Symbol+ = Symbol+ (*) Symbol ["%start"]
    //   Symbol+ = Symbol+ (*) Symbol ["%token"]
    //   Symbol+ = Symbol+ (*) Symbol [r#"\'.\'"#]
    //   Symbol+ = Symbol+ (*) Symbol [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "%%" -> Reduce(BisonDeclaration = "%precedence", Symbol+ => ActionFn(7);)
    //   "%debug" -> Reduce(BisonDeclaration = "%precedence", Symbol+ => ActionFn(7);)
    //   "%expect" -> Reduce(BisonDeclaration = "%precedence", Symbol+ => ActionFn(7);)
    //   "%left" -> Reduce(BisonDeclaration = "%precedence", Symbol+ => ActionFn(7);)
    //   "%nonassoc" -> Reduce(BisonDeclaration = "%precedence", Symbol+ => ActionFn(7);)
    //   "%precedence" -> Reduce(BisonDeclaration = "%precedence", Symbol+ => ActionFn(7);)
    //   "%right" -> Reduce(BisonDeclaration = "%precedence", Symbol+ => ActionFn(7);)
    //   "%start" -> Reduce(BisonDeclaration = "%precedence", Symbol+ => ActionFn(7);)
    //   "%token" -> Reduce(BisonDeclaration = "%precedence", Symbol+ => ActionFn(7);)
    //   r#"\'.\'"# -> Shift(S45)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S46)
    //
    //   Ident -> S42
    //   Symbol -> S59
    pub fn __state48<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<::std::vec::Vec<Symbol<'input>>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state45(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (31, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state46(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (7, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action7(input, __sym0, __sym1, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::BisonDeclaration(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ident(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Symbol(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state59(input, __lookbehind, __tokens, __lookahead, __sym1, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 49
    //   BisonDeclaration = "%right" Symbol+ (*) ["%%"]
    //   BisonDeclaration = "%right" Symbol+ (*) ["%debug"]
    //   BisonDeclaration = "%right" Symbol+ (*) ["%expect"]
    //   BisonDeclaration = "%right" Symbol+ (*) ["%left"]
    //   BisonDeclaration = "%right" Symbol+ (*) ["%nonassoc"]
    //   BisonDeclaration = "%right" Symbol+ (*) ["%precedence"]
    //   BisonDeclaration = "%right" Symbol+ (*) ["%right"]
    //   BisonDeclaration = "%right" Symbol+ (*) ["%start"]
    //   BisonDeclaration = "%right" Symbol+ (*) ["%token"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%%"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%debug"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%expect"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%left"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%nonassoc"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%precedence"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%right"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%start"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%token"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Symbol = (*) Ident ["%%"]
    //   Symbol = (*) Ident ["%debug"]
    //   Symbol = (*) Ident ["%expect"]
    //   Symbol = (*) Ident ["%left"]
    //   Symbol = (*) Ident ["%nonassoc"]
    //   Symbol = (*) Ident ["%precedence"]
    //   Symbol = (*) Ident ["%right"]
    //   Symbol = (*) Ident ["%start"]
    //   Symbol = (*) Ident ["%token"]
    //   Symbol = (*) Ident [r#"\'.\'"#]
    //   Symbol = (*) Ident [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Symbol = (*) r#"\'.\'"# ["%%"]
    //   Symbol = (*) r#"\'.\'"# ["%debug"]
    //   Symbol = (*) r#"\'.\'"# ["%expect"]
    //   Symbol = (*) r#"\'.\'"# ["%left"]
    //   Symbol = (*) r#"\'.\'"# ["%nonassoc"]
    //   Symbol = (*) r#"\'.\'"# ["%precedence"]
    //   Symbol = (*) r#"\'.\'"# ["%right"]
    //   Symbol = (*) r#"\'.\'"# ["%start"]
    //   Symbol = (*) r#"\'.\'"# ["%token"]
    //   Symbol = (*) r#"\'.\'"# [r#"\'.\'"#]
    //   Symbol = (*) r#"\'.\'"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Symbol+ = Symbol+ (*) Symbol ["%%"]
    //   Symbol+ = Symbol+ (*) Symbol ["%debug"]
    //   Symbol+ = Symbol+ (*) Symbol ["%expect"]
    //   Symbol+ = Symbol+ (*) Symbol ["%left"]
    //   Symbol+ = Symbol+ (*) Symbol ["%nonassoc"]
    //   Symbol+ = Symbol+ (*) Symbol ["%precedence"]
    //   Symbol+ = Symbol+ (*) Symbol ["%right"]
    //   Symbol+ = Symbol+ (*) Symbol ["%start"]
    //   Symbol+ = Symbol+ (*) Symbol ["%token"]
    //   Symbol+ = Symbol+ (*) Symbol [r#"\'.\'"#]
    //   Symbol+ = Symbol+ (*) Symbol [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "%%" -> Reduce(BisonDeclaration = "%right", Symbol+ => ActionFn(8);)
    //   "%debug" -> Reduce(BisonDeclaration = "%right", Symbol+ => ActionFn(8);)
    //   "%expect" -> Reduce(BisonDeclaration = "%right", Symbol+ => ActionFn(8);)
    //   "%left" -> Reduce(BisonDeclaration = "%right", Symbol+ => ActionFn(8);)
    //   "%nonassoc" -> Reduce(BisonDeclaration = "%right", Symbol+ => ActionFn(8);)
    //   "%precedence" -> Reduce(BisonDeclaration = "%right", Symbol+ => ActionFn(8);)
    //   "%right" -> Reduce(BisonDeclaration = "%right", Symbol+ => ActionFn(8);)
    //   "%start" -> Reduce(BisonDeclaration = "%right", Symbol+ => ActionFn(8);)
    //   "%token" -> Reduce(BisonDeclaration = "%right", Symbol+ => ActionFn(8);)
    //   r#"\'.\'"# -> Shift(S45)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S46)
    //
    //   Ident -> S42
    //   Symbol -> S59
    pub fn __state49<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<::std::vec::Vec<Symbol<'input>>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state45(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (31, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state46(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (7, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action8(input, __sym0, __sym1, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::BisonDeclaration(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ident(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Symbol(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state59(input, __lookbehind, __tokens, __lookahead, __sym1, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 50
    //   BisonDeclaration = "%start" Ident (*) ["%%"]
    //   BisonDeclaration = "%start" Ident (*) ["%debug"]
    //   BisonDeclaration = "%start" Ident (*) ["%expect"]
    //   BisonDeclaration = "%start" Ident (*) ["%left"]
    //   BisonDeclaration = "%start" Ident (*) ["%nonassoc"]
    //   BisonDeclaration = "%start" Ident (*) ["%precedence"]
    //   BisonDeclaration = "%start" Ident (*) ["%right"]
    //   BisonDeclaration = "%start" Ident (*) ["%start"]
    //   BisonDeclaration = "%start" Ident (*) ["%token"]
    //
    //   "%%" -> Reduce(BisonDeclaration = "%start", Ident => ActionFn(11);)
    //   "%debug" -> Reduce(BisonDeclaration = "%start", Ident => ActionFn(11);)
    //   "%expect" -> Reduce(BisonDeclaration = "%start", Ident => ActionFn(11);)
    //   "%left" -> Reduce(BisonDeclaration = "%start", Ident => ActionFn(11);)
    //   "%nonassoc" -> Reduce(BisonDeclaration = "%start", Ident => ActionFn(11);)
    //   "%precedence" -> Reduce(BisonDeclaration = "%start", Ident => ActionFn(11);)
    //   "%right" -> Reduce(BisonDeclaration = "%start", Ident => ActionFn(11);)
    //   "%start" -> Reduce(BisonDeclaration = "%start", Ident => ActionFn(11);)
    //   "%token" -> Reduce(BisonDeclaration = "%start", Ident => ActionFn(11);)
    //
    pub fn __state50<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Ident<'input>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (7, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action11(input, __sym0, __sym1, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::BisonDeclaration(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 51
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["%%"]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["%debug"]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["%expect"]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["%left"]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["%nonassoc"]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["%precedence"]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["%right"]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["%start"]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["%token"]
    //
    //   "%%" -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   "%debug" -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   "%expect" -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   "%left" -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   "%nonassoc" -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   "%precedence" -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   "%right" -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   "%start" -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   "%token" -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //
    pub fn __state51<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (7, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action14(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ident(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 52
    //   BisonDeclaration = "%token" Ident (*) ["%%"]
    //   BisonDeclaration = "%token" Ident (*) ["%debug"]
    //   BisonDeclaration = "%token" Ident (*) ["%expect"]
    //   BisonDeclaration = "%token" Ident (*) ["%left"]
    //   BisonDeclaration = "%token" Ident (*) ["%nonassoc"]
    //   BisonDeclaration = "%token" Ident (*) ["%precedence"]
    //   BisonDeclaration = "%token" Ident (*) ["%right"]
    //   BisonDeclaration = "%token" Ident (*) ["%start"]
    //   BisonDeclaration = "%token" Ident (*) ["%token"]
    //
    //   "%%" -> Reduce(BisonDeclaration = "%token", Ident => ActionFn(5);)
    //   "%debug" -> Reduce(BisonDeclaration = "%token", Ident => ActionFn(5);)
    //   "%expect" -> Reduce(BisonDeclaration = "%token", Ident => ActionFn(5);)
    //   "%left" -> Reduce(BisonDeclaration = "%token", Ident => ActionFn(5);)
    //   "%nonassoc" -> Reduce(BisonDeclaration = "%token", Ident => ActionFn(5);)
    //   "%precedence" -> Reduce(BisonDeclaration = "%token", Ident => ActionFn(5);)
    //   "%right" -> Reduce(BisonDeclaration = "%token", Ident => ActionFn(5);)
    //   "%start" -> Reduce(BisonDeclaration = "%token", Ident => ActionFn(5);)
    //   "%token" -> Reduce(BisonDeclaration = "%token", Ident => ActionFn(5);)
    //
    pub fn __state52<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Ident<'input>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (7, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action5(input, __sym0, __sym1, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::BisonDeclaration(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 53
    //   AnyToken+ = AnyToken+ AnyToken (*) ["%}"]
    //   AnyToken+ = AnyToken+ AnyToken (*) ["("]
    //   AnyToken+ = AnyToken+ AnyToken (*) [")"]
    //   AnyToken+ = AnyToken+ AnyToken (*) ["*"]
    //   AnyToken+ = AnyToken+ AnyToken (*) [","]
    //   AnyToken+ = AnyToken+ AnyToken (*) ["."]
    //   AnyToken+ = AnyToken+ AnyToken (*) [";"]
    //   AnyToken+ = AnyToken+ AnyToken (*) ["="]
    //   AnyToken+ = AnyToken+ AnyToken (*) ["["]
    //   AnyToken+ = AnyToken+ AnyToken (*) ["]"]
    //   AnyToken+ = AnyToken+ AnyToken (*) ["{"]
    //   AnyToken+ = AnyToken+ AnyToken (*) ["}"]
    //   AnyToken+ = AnyToken+ AnyToken (*) [r#"\"[^\"]*\""#]
    //   AnyToken+ = AnyToken+ AnyToken (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   AnyToken+ = AnyToken+ AnyToken (*) [r#"$[$0-9]+"#]
    //   AnyToken+ = AnyToken+ AnyToken (*) [r#"\'.\'"#]
    //   AnyToken+ = AnyToken+ AnyToken (*) [r#"[0-9]+"#]
    //   AnyToken+ = AnyToken+ AnyToken (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "%}" -> Reduce(AnyToken+ = AnyToken+, AnyToken => ActionFn(62);)
    //   "(" -> Reduce(AnyToken+ = AnyToken+, AnyToken => ActionFn(62);)
    //   ")" -> Reduce(AnyToken+ = AnyToken+, AnyToken => ActionFn(62);)
    //   "*" -> Reduce(AnyToken+ = AnyToken+, AnyToken => ActionFn(62);)
    //   "," -> Reduce(AnyToken+ = AnyToken+, AnyToken => ActionFn(62);)
    //   "." -> Reduce(AnyToken+ = AnyToken+, AnyToken => ActionFn(62);)
    //   ";" -> Reduce(AnyToken+ = AnyToken+, AnyToken => ActionFn(62);)
    //   "=" -> Reduce(AnyToken+ = AnyToken+, AnyToken => ActionFn(62);)
    //   "[" -> Reduce(AnyToken+ = AnyToken+, AnyToken => ActionFn(62);)
    //   "]" -> Reduce(AnyToken+ = AnyToken+, AnyToken => ActionFn(62);)
    //   "{" -> Reduce(AnyToken+ = AnyToken+, AnyToken => ActionFn(62);)
    //   "}" -> Reduce(AnyToken+ = AnyToken+, AnyToken => ActionFn(62);)
    //   r#"\"[^\"]*\""# -> Reduce(AnyToken+ = AnyToken+, AnyToken => ActionFn(62);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(AnyToken+ = AnyToken+, AnyToken => ActionFn(62);)
    //   r#"$[$0-9]+"# -> Reduce(AnyToken+ = AnyToken+, AnyToken => ActionFn(62);)
    //   r#"\'.\'"# -> Reduce(AnyToken+ = AnyToken+, AnyToken => ActionFn(62);)
    //   r#"[0-9]+"# -> Reduce(AnyToken+ = AnyToken+, AnyToken => ActionFn(62);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(AnyToken+ = AnyToken+, AnyToken => ActionFn(62);)
    //
    pub fn __state53<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<::std::vec::Vec<()>>,
        __sym1: &mut Option<()>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (12, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (14, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action62(input, __sym0, __sym1, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::AnyToken_2b(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 54
    //   CDeclarations = "%{" AnyToken+ "%}" (*) ["%%"]
    //   CDeclarations = "%{" AnyToken+ "%}" (*) ["%debug"]
    //   CDeclarations = "%{" AnyToken+ "%}" (*) ["%expect"]
    //   CDeclarations = "%{" AnyToken+ "%}" (*) ["%left"]
    //   CDeclarations = "%{" AnyToken+ "%}" (*) ["%nonassoc"]
    //   CDeclarations = "%{" AnyToken+ "%}" (*) ["%precedence"]
    //   CDeclarations = "%{" AnyToken+ "%}" (*) ["%right"]
    //   CDeclarations = "%{" AnyToken+ "%}" (*) ["%start"]
    //   CDeclarations = "%{" AnyToken+ "%}" (*) ["%token"]
    //
    //   "%%" -> Reduce(CDeclarations = "%{", AnyToken+, "%}" => ActionFn(68);)
    //   "%debug" -> Reduce(CDeclarations = "%{", AnyToken+, "%}" => ActionFn(68);)
    //   "%expect" -> Reduce(CDeclarations = "%{", AnyToken+, "%}" => ActionFn(68);)
    //   "%left" -> Reduce(CDeclarations = "%{", AnyToken+, "%}" => ActionFn(68);)
    //   "%nonassoc" -> Reduce(CDeclarations = "%{", AnyToken+, "%}" => ActionFn(68);)
    //   "%precedence" -> Reduce(CDeclarations = "%{", AnyToken+, "%}" => ActionFn(68);)
    //   "%right" -> Reduce(CDeclarations = "%{", AnyToken+, "%}" => ActionFn(68);)
    //   "%start" -> Reduce(CDeclarations = "%{", AnyToken+, "%}" => ActionFn(68);)
    //   "%token" -> Reduce(CDeclarations = "%{", AnyToken+, "%}" => ActionFn(68);)
    //
    pub fn __state54<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<::std::vec::Vec<()>>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (7, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action68(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::CDeclarations(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 55
    //   GrammarRule+ = GrammarRule (*) [EOF]
    //   GrammarRule+ = GrammarRule (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   EOF -> Reduce(GrammarRule+ = GrammarRule => ActionFn(59);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(GrammarRule+ = GrammarRule => ActionFn(59);)
    //
    pub fn __state55<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<GrammarRule<'input>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            None |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action59(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::GrammarRule_2b(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 56
    //   GrammarRule = (*) Ident ":" Alternatives ";" [EOF]
    //   GrammarRule = (*) Ident ":" Alternatives ";" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   GrammarRule+ = GrammarRule+ (*) GrammarRule [EOF]
    //   GrammarRule+ = GrammarRule+ (*) GrammarRule [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [":"]
    //   Yacc = CDeclarations BisonDeclarations "%%" GrammarRule+ (*) [EOF]
    //
    //   EOF -> Reduce(Yacc = CDeclarations, BisonDeclarations, "%%", GrammarRule+ => ActionFn(72);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S58)
    //
    //   GrammarRule -> S60
    //   Ident -> S57
    pub fn __state56<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<()>,
        __sym1: &mut Option<Vec<BisonDecl<'input>>>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<::std::vec::Vec<GrammarRule<'input>>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (31, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state58(input, __lookbehind, __tokens, __sym4));
            }
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __nt = super::__action72(input, __sym0, __sym1, __sym2, __sym3, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Yacc(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym3.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::GrammarRule(__nt) => {
                    let __sym4 = &mut Some(__nt);
                    __result = try!(__state60(input, __lookbehind, __tokens, __lookahead, __sym3, __sym4));
                }
                __Nonterminal::Ident(__nt) => {
                    let __sym4 = &mut Some(__nt);
                    __result = try!(__state57(input, __lookbehind, __tokens, __lookahead, __sym4));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 57
    //   GrammarRule = Ident (*) ":" Alternatives ";" [EOF]
    //   GrammarRule = Ident (*) ":" Alternatives ";" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   ":" -> Shift(S61)
    //
    pub fn __state57<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Ident<'input>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state61(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 58
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) [":"]
    //
    //   ":" -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //
    pub fn __state58<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (18, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action14(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ident(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 59
    //   Symbol+ = Symbol+ Symbol (*) ["%%"]
    //   Symbol+ = Symbol+ Symbol (*) ["%debug"]
    //   Symbol+ = Symbol+ Symbol (*) ["%expect"]
    //   Symbol+ = Symbol+ Symbol (*) ["%left"]
    //   Symbol+ = Symbol+ Symbol (*) ["%nonassoc"]
    //   Symbol+ = Symbol+ Symbol (*) ["%precedence"]
    //   Symbol+ = Symbol+ Symbol (*) ["%right"]
    //   Symbol+ = Symbol+ Symbol (*) ["%start"]
    //   Symbol+ = Symbol+ Symbol (*) ["%token"]
    //   Symbol+ = Symbol+ Symbol (*) [r#"\'.\'"#]
    //   Symbol+ = Symbol+ Symbol (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "%%" -> Reduce(Symbol+ = Symbol+, Symbol => ActionFn(52);)
    //   "%debug" -> Reduce(Symbol+ = Symbol+, Symbol => ActionFn(52);)
    //   "%expect" -> Reduce(Symbol+ = Symbol+, Symbol => ActionFn(52);)
    //   "%left" -> Reduce(Symbol+ = Symbol+, Symbol => ActionFn(52);)
    //   "%nonassoc" -> Reduce(Symbol+ = Symbol+, Symbol => ActionFn(52);)
    //   "%precedence" -> Reduce(Symbol+ = Symbol+, Symbol => ActionFn(52);)
    //   "%right" -> Reduce(Symbol+ = Symbol+, Symbol => ActionFn(52);)
    //   "%start" -> Reduce(Symbol+ = Symbol+, Symbol => ActionFn(52);)
    //   "%token" -> Reduce(Symbol+ = Symbol+, Symbol => ActionFn(52);)
    //   r#"\'.\'"# -> Reduce(Symbol+ = Symbol+, Symbol => ActionFn(52);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(Symbol+ = Symbol+, Symbol => ActionFn(52);)
    //
    pub fn __state59<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<::std::vec::Vec<Symbol<'input>>>,
        __sym1: &mut Option<Symbol<'input>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (7, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action52(input, __sym0, __sym1, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Symbol_2b(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 60
    //   GrammarRule+ = GrammarRule+ GrammarRule (*) [EOF]
    //   GrammarRule+ = GrammarRule+ GrammarRule (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   EOF -> Reduce(GrammarRule+ = GrammarRule+, GrammarRule => ActionFn(60);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(GrammarRule+ = GrammarRule+, GrammarRule => ActionFn(60);)
    //
    pub fn __state60<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<::std::vec::Vec<GrammarRule<'input>>>,
        __sym1: &mut Option<GrammarRule<'input>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            None |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action60(input, __sym0, __sym1, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::GrammarRule_2b(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 61
    //   ActionCode = (*) "{" TokenTree+ "}" ["%empty"]
    //   ActionCode = (*) "{" TokenTree+ "}" ["%prec"]
    //   ActionCode = (*) "{" TokenTree+ "}" [";"]
    //   ActionCode = (*) "{" TokenTree+ "}" ["{"]
    //   ActionCode = (*) "{" TokenTree+ "}" ["|"]
    //   ActionCode = (*) "{" TokenTree+ "}" [r#"\'.\'"#]
    //   ActionCode = (*) "{" TokenTree+ "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   ActionCode = (*) "{" "}" ["%empty"]
    //   ActionCode = (*) "{" "}" ["%prec"]
    //   ActionCode = (*) "{" "}" [";"]
    //   ActionCode = (*) "{" "}" ["{"]
    //   ActionCode = (*) "{" "}" ["|"]
    //   ActionCode = (*) "{" "}" [r#"\'.\'"#]
    //   ActionCode = (*) "{" "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Alternative = (*) GrammarRhs+ [";"]
    //   Alternative = (*) GrammarRhs+ ["|"]
    //   Alternatives = (*) Alternative [";"]
    //   Alternatives = (*) Alternative ["|"]
    //   Alternatives = (*) Alternatives "|" Alternative [";"]
    //   Alternatives = (*) Alternatives "|" Alternative ["|"]
    //   GrammarRhs = (*) ActionCode ["%empty"]
    //   GrammarRhs = (*) ActionCode ["%prec"]
    //   GrammarRhs = (*) ActionCode [";"]
    //   GrammarRhs = (*) ActionCode ["{"]
    //   GrammarRhs = (*) ActionCode ["|"]
    //   GrammarRhs = (*) ActionCode [r#"\'.\'"#]
    //   GrammarRhs = (*) ActionCode [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   GrammarRhs = (*) Symbol ["%empty"]
    //   GrammarRhs = (*) Symbol ["%prec"]
    //   GrammarRhs = (*) Symbol [";"]
    //   GrammarRhs = (*) Symbol ["{"]
    //   GrammarRhs = (*) Symbol ["|"]
    //   GrammarRhs = (*) Symbol [r#"\'.\'"#]
    //   GrammarRhs = (*) Symbol [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   GrammarRhs = (*) "%empty" ["%empty"]
    //   GrammarRhs = (*) "%empty" ["%prec"]
    //   GrammarRhs = (*) "%empty" [";"]
    //   GrammarRhs = (*) "%empty" ["{"]
    //   GrammarRhs = (*) "%empty" ["|"]
    //   GrammarRhs = (*) "%empty" [r#"\'.\'"#]
    //   GrammarRhs = (*) "%empty" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   GrammarRhs = (*) "%prec" Symbol ["%empty"]
    //   GrammarRhs = (*) "%prec" Symbol ["%prec"]
    //   GrammarRhs = (*) "%prec" Symbol [";"]
    //   GrammarRhs = (*) "%prec" Symbol ["{"]
    //   GrammarRhs = (*) "%prec" Symbol ["|"]
    //   GrammarRhs = (*) "%prec" Symbol [r#"\'.\'"#]
    //   GrammarRhs = (*) "%prec" Symbol [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   GrammarRhs+ = (*) GrammarRhs ["%empty"]
    //   GrammarRhs+ = (*) GrammarRhs ["%prec"]
    //   GrammarRhs+ = (*) GrammarRhs [";"]
    //   GrammarRhs+ = (*) GrammarRhs ["{"]
    //   GrammarRhs+ = (*) GrammarRhs ["|"]
    //   GrammarRhs+ = (*) GrammarRhs [r#"\'.\'"#]
    //   GrammarRhs+ = (*) GrammarRhs [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   GrammarRhs+ = (*) GrammarRhs+ GrammarRhs ["%empty"]
    //   GrammarRhs+ = (*) GrammarRhs+ GrammarRhs ["%prec"]
    //   GrammarRhs+ = (*) GrammarRhs+ GrammarRhs [";"]
    //   GrammarRhs+ = (*) GrammarRhs+ GrammarRhs ["{"]
    //   GrammarRhs+ = (*) GrammarRhs+ GrammarRhs ["|"]
    //   GrammarRhs+ = (*) GrammarRhs+ GrammarRhs [r#"\'.\'"#]
    //   GrammarRhs+ = (*) GrammarRhs+ GrammarRhs [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   GrammarRule = Ident ":" (*) Alternatives ";" [EOF]
    //   GrammarRule = Ident ":" (*) Alternatives ";" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%empty"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%prec"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [";"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["{"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["|"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Symbol = (*) Ident ["%empty"]
    //   Symbol = (*) Ident ["%prec"]
    //   Symbol = (*) Ident [";"]
    //   Symbol = (*) Ident ["{"]
    //   Symbol = (*) Ident ["|"]
    //   Symbol = (*) Ident [r#"\'.\'"#]
    //   Symbol = (*) Ident [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Symbol = (*) r#"\'.\'"# ["%empty"]
    //   Symbol = (*) r#"\'.\'"# ["%prec"]
    //   Symbol = (*) r#"\'.\'"# [";"]
    //   Symbol = (*) r#"\'.\'"# ["{"]
    //   Symbol = (*) r#"\'.\'"# ["|"]
    //   Symbol = (*) r#"\'.\'"# [r#"\'.\'"#]
    //   Symbol = (*) r#"\'.\'"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "%empty" -> Shift(S69)
    //   "%prec" -> Shift(S70)
    //   "{" -> Shift(S71)
    //   r#"\'.\'"# -> Shift(S72)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S73)
    //
    //   ActionCode -> S62
    //   Alternative -> S63
    //   Alternatives -> S64
    //   GrammarRhs -> S65
    //   GrammarRhs+ -> S66
    //   Ident -> S67
    //   Symbol -> S68
    pub fn __state61<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Ident<'input>>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (2, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state69(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (6, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state70(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state71(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state72(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (31, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state73(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::ActionCode(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state62(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Alternative(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state63(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Alternatives(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state64(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::GrammarRhs(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state65(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::GrammarRhs_2b(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state66(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Ident(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state67(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Symbol(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state68(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 62
    //   GrammarRhs = ActionCode (*) ["%empty"]
    //   GrammarRhs = ActionCode (*) ["%prec"]
    //   GrammarRhs = ActionCode (*) [";"]
    //   GrammarRhs = ActionCode (*) ["{"]
    //   GrammarRhs = ActionCode (*) ["|"]
    //   GrammarRhs = ActionCode (*) [r#"\'.\'"#]
    //   GrammarRhs = ActionCode (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "%empty" -> Reduce(GrammarRhs = ActionCode => ActionFn(21);)
    //   "%prec" -> Reduce(GrammarRhs = ActionCode => ActionFn(21);)
    //   ";" -> Reduce(GrammarRhs = ActionCode => ActionFn(21);)
    //   "{" -> Reduce(GrammarRhs = ActionCode => ActionFn(21);)
    //   "|" -> Reduce(GrammarRhs = ActionCode => ActionFn(21);)
    //   r#"\'.\'"# -> Reduce(GrammarRhs = ActionCode => ActionFn(21);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(GrammarRhs = ActionCode => ActionFn(21);)
    //
    pub fn __state62<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<()>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (6, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (24, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action21(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::GrammarRhs(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 63
    //   Alternatives = Alternative (*) [";"]
    //   Alternatives = Alternative (*) ["|"]
    //
    //   ";" -> Reduce(Alternatives = Alternative => ActionFn(17);)
    //   "|" -> Reduce(Alternatives = Alternative => ActionFn(17);)
    //
    pub fn __state63<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Alternative<'input>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (19, _), _)) |
            Some((_, (24, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action17(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Alternatives(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 64
    //   Alternatives = Alternatives (*) "|" Alternative [";"]
    //   Alternatives = Alternatives (*) "|" Alternative ["|"]
    //   GrammarRule = Ident ":" Alternatives (*) ";" [EOF]
    //   GrammarRule = Ident ":" Alternatives (*) ";" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   ";" -> Shift(S74)
    //   "|" -> Shift(S75)
    //
    pub fn __state64<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Ident<'input>>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Vec<Alternative<'input>>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state74(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3));
            }
            Some((_, (24, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state75(input, __lookbehind, __tokens, __sym2, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 65
    //   GrammarRhs+ = GrammarRhs (*) ["%empty"]
    //   GrammarRhs+ = GrammarRhs (*) ["%prec"]
    //   GrammarRhs+ = GrammarRhs (*) [";"]
    //   GrammarRhs+ = GrammarRhs (*) ["{"]
    //   GrammarRhs+ = GrammarRhs (*) ["|"]
    //   GrammarRhs+ = GrammarRhs (*) [r#"\'.\'"#]
    //   GrammarRhs+ = GrammarRhs (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "%empty" -> Reduce(GrammarRhs+ = GrammarRhs => ActionFn(49);)
    //   "%prec" -> Reduce(GrammarRhs+ = GrammarRhs => ActionFn(49);)
    //   ";" -> Reduce(GrammarRhs+ = GrammarRhs => ActionFn(49);)
    //   "{" -> Reduce(GrammarRhs+ = GrammarRhs => ActionFn(49);)
    //   "|" -> Reduce(GrammarRhs+ = GrammarRhs => ActionFn(49);)
    //   r#"\'.\'"# -> Reduce(GrammarRhs+ = GrammarRhs => ActionFn(49);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(GrammarRhs+ = GrammarRhs => ActionFn(49);)
    //
    pub fn __state65<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Option<Symbol<'input>>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (6, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (24, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action49(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::GrammarRhs_2b(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 66
    //   ActionCode = (*) "{" TokenTree+ "}" ["%empty"]
    //   ActionCode = (*) "{" TokenTree+ "}" ["%prec"]
    //   ActionCode = (*) "{" TokenTree+ "}" [";"]
    //   ActionCode = (*) "{" TokenTree+ "}" ["{"]
    //   ActionCode = (*) "{" TokenTree+ "}" ["|"]
    //   ActionCode = (*) "{" TokenTree+ "}" [r#"\'.\'"#]
    //   ActionCode = (*) "{" TokenTree+ "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   ActionCode = (*) "{" "}" ["%empty"]
    //   ActionCode = (*) "{" "}" ["%prec"]
    //   ActionCode = (*) "{" "}" [";"]
    //   ActionCode = (*) "{" "}" ["{"]
    //   ActionCode = (*) "{" "}" ["|"]
    //   ActionCode = (*) "{" "}" [r#"\'.\'"#]
    //   ActionCode = (*) "{" "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Alternative = GrammarRhs+ (*) [";"]
    //   Alternative = GrammarRhs+ (*) ["|"]
    //   GrammarRhs = (*) ActionCode ["%empty"]
    //   GrammarRhs = (*) ActionCode ["%prec"]
    //   GrammarRhs = (*) ActionCode [";"]
    //   GrammarRhs = (*) ActionCode ["{"]
    //   GrammarRhs = (*) ActionCode ["|"]
    //   GrammarRhs = (*) ActionCode [r#"\'.\'"#]
    //   GrammarRhs = (*) ActionCode [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   GrammarRhs = (*) Symbol ["%empty"]
    //   GrammarRhs = (*) Symbol ["%prec"]
    //   GrammarRhs = (*) Symbol [";"]
    //   GrammarRhs = (*) Symbol ["{"]
    //   GrammarRhs = (*) Symbol ["|"]
    //   GrammarRhs = (*) Symbol [r#"\'.\'"#]
    //   GrammarRhs = (*) Symbol [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   GrammarRhs = (*) "%empty" ["%empty"]
    //   GrammarRhs = (*) "%empty" ["%prec"]
    //   GrammarRhs = (*) "%empty" [";"]
    //   GrammarRhs = (*) "%empty" ["{"]
    //   GrammarRhs = (*) "%empty" ["|"]
    //   GrammarRhs = (*) "%empty" [r#"\'.\'"#]
    //   GrammarRhs = (*) "%empty" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   GrammarRhs = (*) "%prec" Symbol ["%empty"]
    //   GrammarRhs = (*) "%prec" Symbol ["%prec"]
    //   GrammarRhs = (*) "%prec" Symbol [";"]
    //   GrammarRhs = (*) "%prec" Symbol ["{"]
    //   GrammarRhs = (*) "%prec" Symbol ["|"]
    //   GrammarRhs = (*) "%prec" Symbol [r#"\'.\'"#]
    //   GrammarRhs = (*) "%prec" Symbol [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   GrammarRhs+ = GrammarRhs+ (*) GrammarRhs ["%empty"]
    //   GrammarRhs+ = GrammarRhs+ (*) GrammarRhs ["%prec"]
    //   GrammarRhs+ = GrammarRhs+ (*) GrammarRhs [";"]
    //   GrammarRhs+ = GrammarRhs+ (*) GrammarRhs ["{"]
    //   GrammarRhs+ = GrammarRhs+ (*) GrammarRhs ["|"]
    //   GrammarRhs+ = GrammarRhs+ (*) GrammarRhs [r#"\'.\'"#]
    //   GrammarRhs+ = GrammarRhs+ (*) GrammarRhs [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%empty"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%prec"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [";"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["{"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["|"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Symbol = (*) Ident ["%empty"]
    //   Symbol = (*) Ident ["%prec"]
    //   Symbol = (*) Ident [";"]
    //   Symbol = (*) Ident ["{"]
    //   Symbol = (*) Ident ["|"]
    //   Symbol = (*) Ident [r#"\'.\'"#]
    //   Symbol = (*) Ident [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Symbol = (*) r#"\'.\'"# ["%empty"]
    //   Symbol = (*) r#"\'.\'"# ["%prec"]
    //   Symbol = (*) r#"\'.\'"# [";"]
    //   Symbol = (*) r#"\'.\'"# ["{"]
    //   Symbol = (*) r#"\'.\'"# ["|"]
    //   Symbol = (*) r#"\'.\'"# [r#"\'.\'"#]
    //   Symbol = (*) r#"\'.\'"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "%empty" -> Shift(S69)
    //   "%prec" -> Shift(S70)
    //   ";" -> Reduce(Alternative = GrammarRhs+ => ActionFn(19);)
    //   "{" -> Shift(S71)
    //   "|" -> Reduce(Alternative = GrammarRhs+ => ActionFn(19);)
    //   r#"\'.\'"# -> Shift(S72)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S73)
    //
    //   ActionCode -> S62
    //   GrammarRhs -> S76
    //   Ident -> S67
    //   Symbol -> S68
    pub fn __state66<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<::std::vec::Vec<Option<Symbol<'input>>>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (2, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state69(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (6, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state70(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state71(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state72(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (31, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state73(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, _), _)) |
            Some((_, (24, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action19(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Alternative(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::ActionCode(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state62(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::GrammarRhs(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state76(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Ident(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state67(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Symbol(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state68(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 67
    //   Symbol = Ident (*) ["%empty"]
    //   Symbol = Ident (*) ["%prec"]
    //   Symbol = Ident (*) [";"]
    //   Symbol = Ident (*) ["{"]
    //   Symbol = Ident (*) ["|"]
    //   Symbol = Ident (*) [r#"\'.\'"#]
    //   Symbol = Ident (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "%empty" -> Reduce(Symbol = Ident => ActionFn(12);)
    //   "%prec" -> Reduce(Symbol = Ident => ActionFn(12);)
    //   ";" -> Reduce(Symbol = Ident => ActionFn(12);)
    //   "{" -> Reduce(Symbol = Ident => ActionFn(12);)
    //   "|" -> Reduce(Symbol = Ident => ActionFn(12);)
    //   r#"\'.\'"# -> Reduce(Symbol = Ident => ActionFn(12);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(Symbol = Ident => ActionFn(12);)
    //
    pub fn __state67<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Ident<'input>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (6, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (24, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action12(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Symbol(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 68
    //   GrammarRhs = Symbol (*) ["%empty"]
    //   GrammarRhs = Symbol (*) ["%prec"]
    //   GrammarRhs = Symbol (*) [";"]
    //   GrammarRhs = Symbol (*) ["{"]
    //   GrammarRhs = Symbol (*) ["|"]
    //   GrammarRhs = Symbol (*) [r#"\'.\'"#]
    //   GrammarRhs = Symbol (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "%empty" -> Reduce(GrammarRhs = Symbol => ActionFn(20);)
    //   "%prec" -> Reduce(GrammarRhs = Symbol => ActionFn(20);)
    //   ";" -> Reduce(GrammarRhs = Symbol => ActionFn(20);)
    //   "{" -> Reduce(GrammarRhs = Symbol => ActionFn(20);)
    //   "|" -> Reduce(GrammarRhs = Symbol => ActionFn(20);)
    //   r#"\'.\'"# -> Reduce(GrammarRhs = Symbol => ActionFn(20);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(GrammarRhs = Symbol => ActionFn(20);)
    //
    pub fn __state68<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Symbol<'input>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (6, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (24, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action20(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::GrammarRhs(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 69
    //   GrammarRhs = "%empty" (*) ["%empty"]
    //   GrammarRhs = "%empty" (*) ["%prec"]
    //   GrammarRhs = "%empty" (*) [";"]
    //   GrammarRhs = "%empty" (*) ["{"]
    //   GrammarRhs = "%empty" (*) ["|"]
    //   GrammarRhs = "%empty" (*) [r#"\'.\'"#]
    //   GrammarRhs = "%empty" (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "%empty" -> Reduce(GrammarRhs = "%empty" => ActionFn(23);)
    //   "%prec" -> Reduce(GrammarRhs = "%empty" => ActionFn(23);)
    //   ";" -> Reduce(GrammarRhs = "%empty" => ActionFn(23);)
    //   "{" -> Reduce(GrammarRhs = "%empty" => ActionFn(23);)
    //   "|" -> Reduce(GrammarRhs = "%empty" => ActionFn(23);)
    //   r#"\'.\'"# -> Reduce(GrammarRhs = "%empty" => ActionFn(23);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(GrammarRhs = "%empty" => ActionFn(23);)
    //
    pub fn __state69<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (6, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (24, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action23(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::GrammarRhs(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 70
    //   GrammarRhs = "%prec" (*) Symbol ["%empty"]
    //   GrammarRhs = "%prec" (*) Symbol ["%prec"]
    //   GrammarRhs = "%prec" (*) Symbol [";"]
    //   GrammarRhs = "%prec" (*) Symbol ["{"]
    //   GrammarRhs = "%prec" (*) Symbol ["|"]
    //   GrammarRhs = "%prec" (*) Symbol [r#"\'.\'"#]
    //   GrammarRhs = "%prec" (*) Symbol [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%empty"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%prec"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [";"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["{"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["|"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Symbol = (*) Ident ["%empty"]
    //   Symbol = (*) Ident ["%prec"]
    //   Symbol = (*) Ident [";"]
    //   Symbol = (*) Ident ["{"]
    //   Symbol = (*) Ident ["|"]
    //   Symbol = (*) Ident [r#"\'.\'"#]
    //   Symbol = (*) Ident [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Symbol = (*) r#"\'.\'"# ["%empty"]
    //   Symbol = (*) r#"\'.\'"# ["%prec"]
    //   Symbol = (*) r#"\'.\'"# [";"]
    //   Symbol = (*) r#"\'.\'"# ["{"]
    //   Symbol = (*) r#"\'.\'"# ["|"]
    //   Symbol = (*) r#"\'.\'"# [r#"\'.\'"#]
    //   Symbol = (*) r#"\'.\'"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   r#"\'.\'"# -> Shift(S72)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S73)
    //
    //   Ident -> S67
    //   Symbol -> S77
    pub fn __state70<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state72(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (31, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state73(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ident(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state67(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Symbol(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state77(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 71
    //   ActionCode = "{" (*) TokenTree+ "}" ["%empty"]
    //   ActionCode = "{" (*) TokenTree+ "}" ["%prec"]
    //   ActionCode = "{" (*) TokenTree+ "}" [";"]
    //   ActionCode = "{" (*) TokenTree+ "}" ["{"]
    //   ActionCode = "{" (*) TokenTree+ "}" ["|"]
    //   ActionCode = "{" (*) TokenTree+ "}" [r#"\'.\'"#]
    //   ActionCode = "{" (*) TokenTree+ "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   ActionCode = "{" (*) "}" ["%empty"]
    //   ActionCode = "{" (*) "}" ["%prec"]
    //   ActionCode = "{" (*) "}" [";"]
    //   ActionCode = "{" (*) "}" ["{"]
    //   ActionCode = "{" (*) "}" ["|"]
    //   ActionCode = "{" (*) "}" [r#"\'.\'"#]
    //   ActionCode = "{" (*) "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["("]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["*"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [","]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["."]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [";"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["="]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["["]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["{"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["}"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\"[^\"]*\""#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"$[$0-9]+"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[0-9]+"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Integer = (*) r#"[0-9]+"# ["("]
    //   Integer = (*) r#"[0-9]+"# ["*"]
    //   Integer = (*) r#"[0-9]+"# [","]
    //   Integer = (*) r#"[0-9]+"# ["."]
    //   Integer = (*) r#"[0-9]+"# [";"]
    //   Integer = (*) r#"[0-9]+"# ["="]
    //   Integer = (*) r#"[0-9]+"# ["["]
    //   Integer = (*) r#"[0-9]+"# ["{"]
    //   Integer = (*) r#"[0-9]+"# ["}"]
    //   Integer = (*) r#"[0-9]+"# [r#"\"[^\"]*\""#]
    //   Integer = (*) r#"[0-9]+"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Integer = (*) r#"[0-9]+"# [r#"$[$0-9]+"#]
    //   Integer = (*) r#"[0-9]+"# [r#"\'.\'"#]
    //   Integer = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Integer = (*) r#"[0-9]+"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) UnpairedToken ["("]
    //   TokenTree = (*) UnpairedToken ["*"]
    //   TokenTree = (*) UnpairedToken [","]
    //   TokenTree = (*) UnpairedToken ["."]
    //   TokenTree = (*) UnpairedToken [";"]
    //   TokenTree = (*) UnpairedToken ["="]
    //   TokenTree = (*) UnpairedToken ["["]
    //   TokenTree = (*) UnpairedToken ["{"]
    //   TokenTree = (*) UnpairedToken ["}"]
    //   TokenTree = (*) UnpairedToken [r#"\"[^\"]*\""#]
    //   TokenTree = (*) UnpairedToken [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) UnpairedToken [r#"$[$0-9]+"#]
    //   TokenTree = (*) UnpairedToken [r#"\'.\'"#]
    //   TokenTree = (*) UnpairedToken [r#"[0-9]+"#]
    //   TokenTree = (*) UnpairedToken [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" TokenTree+ ")" ["("]
    //   TokenTree = (*) "(" TokenTree+ ")" ["*"]
    //   TokenTree = (*) "(" TokenTree+ ")" [","]
    //   TokenTree = (*) "(" TokenTree+ ")" ["."]
    //   TokenTree = (*) "(" TokenTree+ ")" [";"]
    //   TokenTree = (*) "(" TokenTree+ ")" ["="]
    //   TokenTree = (*) "(" TokenTree+ ")" ["["]
    //   TokenTree = (*) "(" TokenTree+ ")" ["{"]
    //   TokenTree = (*) "(" TokenTree+ ")" ["}"]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"\'.\'"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"[0-9]+"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" ")" ["("]
    //   TokenTree = (*) "(" ")" ["*"]
    //   TokenTree = (*) "(" ")" [","]
    //   TokenTree = (*) "(" ")" ["."]
    //   TokenTree = (*) "(" ")" [";"]
    //   TokenTree = (*) "(" ")" ["="]
    //   TokenTree = (*) "(" ")" ["["]
    //   TokenTree = (*) "(" ")" ["{"]
    //   TokenTree = (*) "(" ")" ["}"]
    //   TokenTree = (*) "(" ")" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "(" ")" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" ")" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "(" ")" [r#"\'.\'"#]
    //   TokenTree = (*) "(" ")" [r#"[0-9]+"#]
    //   TokenTree = (*) "(" ")" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" TokenTree+ "]" ["("]
    //   TokenTree = (*) "[" TokenTree+ "]" ["*"]
    //   TokenTree = (*) "[" TokenTree+ "]" [","]
    //   TokenTree = (*) "[" TokenTree+ "]" ["."]
    //   TokenTree = (*) "[" TokenTree+ "]" [";"]
    //   TokenTree = (*) "[" TokenTree+ "]" ["="]
    //   TokenTree = (*) "[" TokenTree+ "]" ["["]
    //   TokenTree = (*) "[" TokenTree+ "]" ["{"]
    //   TokenTree = (*) "[" TokenTree+ "]" ["}"]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"\'.\'"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"[0-9]+"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" "]" ["("]
    //   TokenTree = (*) "[" "]" ["*"]
    //   TokenTree = (*) "[" "]" [","]
    //   TokenTree = (*) "[" "]" ["."]
    //   TokenTree = (*) "[" "]" [";"]
    //   TokenTree = (*) "[" "]" ["="]
    //   TokenTree = (*) "[" "]" ["["]
    //   TokenTree = (*) "[" "]" ["{"]
    //   TokenTree = (*) "[" "]" ["}"]
    //   TokenTree = (*) "[" "]" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "[" "]" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" "]" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "[" "]" [r#"\'.\'"#]
    //   TokenTree = (*) "[" "]" [r#"[0-9]+"#]
    //   TokenTree = (*) "[" "]" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" TokenTree+ "}" ["("]
    //   TokenTree = (*) "{" TokenTree+ "}" ["*"]
    //   TokenTree = (*) "{" TokenTree+ "}" [","]
    //   TokenTree = (*) "{" TokenTree+ "}" ["."]
    //   TokenTree = (*) "{" TokenTree+ "}" [";"]
    //   TokenTree = (*) "{" TokenTree+ "}" ["="]
    //   TokenTree = (*) "{" TokenTree+ "}" ["["]
    //   TokenTree = (*) "{" TokenTree+ "}" ["{"]
    //   TokenTree = (*) "{" TokenTree+ "}" ["}"]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"\'.\'"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"[0-9]+"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" "}" ["("]
    //   TokenTree = (*) "{" "}" ["*"]
    //   TokenTree = (*) "{" "}" [","]
    //   TokenTree = (*) "{" "}" ["."]
    //   TokenTree = (*) "{" "}" [";"]
    //   TokenTree = (*) "{" "}" ["="]
    //   TokenTree = (*) "{" "}" ["["]
    //   TokenTree = (*) "{" "}" ["{"]
    //   TokenTree = (*) "{" "}" ["}"]
    //   TokenTree = (*) "{" "}" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "{" "}" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" "}" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "{" "}" [r#"\'.\'"#]
    //   TokenTree = (*) "{" "}" [r#"[0-9]+"#]
    //   TokenTree = (*) "{" "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = (*) TokenTree ["("]
    //   TokenTree+ = (*) TokenTree ["*"]
    //   TokenTree+ = (*) TokenTree [","]
    //   TokenTree+ = (*) TokenTree ["."]
    //   TokenTree+ = (*) TokenTree [";"]
    //   TokenTree+ = (*) TokenTree ["="]
    //   TokenTree+ = (*) TokenTree ["["]
    //   TokenTree+ = (*) TokenTree ["{"]
    //   TokenTree+ = (*) TokenTree ["}"]
    //   TokenTree+ = (*) TokenTree [r#"\"[^\"]*\""#]
    //   TokenTree+ = (*) TokenTree [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = (*) TokenTree [r#"$[$0-9]+"#]
    //   TokenTree+ = (*) TokenTree [r#"\'.\'"#]
    //   TokenTree+ = (*) TokenTree [r#"[0-9]+"#]
    //   TokenTree+ = (*) TokenTree [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["("]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["*"]
    //   TokenTree+ = (*) TokenTree+ TokenTree [","]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["."]
    //   TokenTree+ = (*) TokenTree+ TokenTree [";"]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["="]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["["]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["{"]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["}"]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"\"[^\"]*\""#]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"$[$0-9]+"#]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"\'.\'"#]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"[0-9]+"#]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Ident ["("]
    //   UnpairedToken = (*) Ident ["*"]
    //   UnpairedToken = (*) Ident [","]
    //   UnpairedToken = (*) Ident ["."]
    //   UnpairedToken = (*) Ident [";"]
    //   UnpairedToken = (*) Ident ["="]
    //   UnpairedToken = (*) Ident ["["]
    //   UnpairedToken = (*) Ident ["{"]
    //   UnpairedToken = (*) Ident ["}"]
    //   UnpairedToken = (*) Ident [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) Ident [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Ident [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) Ident [r#"\'.\'"#]
    //   UnpairedToken = (*) Ident [r#"[0-9]+"#]
    //   UnpairedToken = (*) Ident [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Integer ["("]
    //   UnpairedToken = (*) Integer ["*"]
    //   UnpairedToken = (*) Integer [","]
    //   UnpairedToken = (*) Integer ["."]
    //   UnpairedToken = (*) Integer [";"]
    //   UnpairedToken = (*) Integer ["="]
    //   UnpairedToken = (*) Integer ["["]
    //   UnpairedToken = (*) Integer ["{"]
    //   UnpairedToken = (*) Integer ["}"]
    //   UnpairedToken = (*) Integer [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) Integer [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Integer [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) Integer [r#"\'.\'"#]
    //   UnpairedToken = (*) Integer [r#"[0-9]+"#]
    //   UnpairedToken = (*) Integer [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "*" ["("]
    //   UnpairedToken = (*) "*" ["*"]
    //   UnpairedToken = (*) "*" [","]
    //   UnpairedToken = (*) "*" ["."]
    //   UnpairedToken = (*) "*" [";"]
    //   UnpairedToken = (*) "*" ["="]
    //   UnpairedToken = (*) "*" ["["]
    //   UnpairedToken = (*) "*" ["{"]
    //   UnpairedToken = (*) "*" ["}"]
    //   UnpairedToken = (*) "*" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "*" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "*" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "*" [r#"\'.\'"#]
    //   UnpairedToken = (*) "*" [r#"[0-9]+"#]
    //   UnpairedToken = (*) "*" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "," ["("]
    //   UnpairedToken = (*) "," ["*"]
    //   UnpairedToken = (*) "," [","]
    //   UnpairedToken = (*) "," ["."]
    //   UnpairedToken = (*) "," [";"]
    //   UnpairedToken = (*) "," ["="]
    //   UnpairedToken = (*) "," ["["]
    //   UnpairedToken = (*) "," ["{"]
    //   UnpairedToken = (*) "," ["}"]
    //   UnpairedToken = (*) "," [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "," [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "," [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "," [r#"\'.\'"#]
    //   UnpairedToken = (*) "," [r#"[0-9]+"#]
    //   UnpairedToken = (*) "," [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "." ["("]
    //   UnpairedToken = (*) "." ["*"]
    //   UnpairedToken = (*) "." [","]
    //   UnpairedToken = (*) "." ["."]
    //   UnpairedToken = (*) "." [";"]
    //   UnpairedToken = (*) "." ["="]
    //   UnpairedToken = (*) "." ["["]
    //   UnpairedToken = (*) "." ["{"]
    //   UnpairedToken = (*) "." ["}"]
    //   UnpairedToken = (*) "." [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "." [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "." [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "." [r#"\'.\'"#]
    //   UnpairedToken = (*) "." [r#"[0-9]+"#]
    //   UnpairedToken = (*) "." [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) ";" ["("]
    //   UnpairedToken = (*) ";" ["*"]
    //   UnpairedToken = (*) ";" [","]
    //   UnpairedToken = (*) ";" ["."]
    //   UnpairedToken = (*) ";" [";"]
    //   UnpairedToken = (*) ";" ["="]
    //   UnpairedToken = (*) ";" ["["]
    //   UnpairedToken = (*) ";" ["{"]
    //   UnpairedToken = (*) ";" ["}"]
    //   UnpairedToken = (*) ";" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) ";" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) ";" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) ";" [r#"\'.\'"#]
    //   UnpairedToken = (*) ";" [r#"[0-9]+"#]
    //   UnpairedToken = (*) ";" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "=" ["("]
    //   UnpairedToken = (*) "=" ["*"]
    //   UnpairedToken = (*) "=" [","]
    //   UnpairedToken = (*) "=" ["."]
    //   UnpairedToken = (*) "=" [";"]
    //   UnpairedToken = (*) "=" ["="]
    //   UnpairedToken = (*) "=" ["["]
    //   UnpairedToken = (*) "=" ["{"]
    //   UnpairedToken = (*) "=" ["}"]
    //   UnpairedToken = (*) "=" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "=" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "=" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "=" [r#"\'.\'"#]
    //   UnpairedToken = (*) "=" [r#"[0-9]+"#]
    //   UnpairedToken = (*) "=" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["("]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["*"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [","]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["."]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [";"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["="]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["["]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["{"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["}"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["("]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["*"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [","]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["."]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [";"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["="]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["["]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["{"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["}"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["("]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["*"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [","]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["."]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [";"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["="]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["["]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["{"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["}"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\'.\'"# ["("]
    //   UnpairedToken = (*) r#"\'.\'"# ["*"]
    //   UnpairedToken = (*) r#"\'.\'"# [","]
    //   UnpairedToken = (*) r#"\'.\'"# ["."]
    //   UnpairedToken = (*) r#"\'.\'"# [";"]
    //   UnpairedToken = (*) r#"\'.\'"# ["="]
    //   UnpairedToken = (*) r#"\'.\'"# ["["]
    //   UnpairedToken = (*) r#"\'.\'"# ["{"]
    //   UnpairedToken = (*) r#"\'.\'"# ["}"]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Shift(S83)
    //   "*" -> Shift(S84)
    //   "," -> Shift(S85)
    //   "." -> Shift(S86)
    //   ";" -> Shift(S87)
    //   "=" -> Shift(S88)
    //   "[" -> Shift(S89)
    //   "{" -> Shift(S90)
    //   "}" -> Shift(S91)
    //   r#"\"[^\"]*\""# -> Shift(S92)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S93)
    //   r#"$[$0-9]+"# -> Shift(S94)
    //   r#"\'.\'"# -> Shift(S95)
    //   r#"[0-9]+"# -> Shift(S96)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S97)
    //
    //   Ident -> S78
    //   Integer -> S79
    //   TokenTree -> S80
    //   TokenTree+ -> S81
    //   UnpairedToken -> S82
    pub fn __state71<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state83(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state84(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state85(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (17, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state86(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state87(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state88(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state89(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state90(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state91(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state92(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state93(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state94(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state95(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state96(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (31, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state97(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ident(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state78(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Integer(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state79(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::TokenTree(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state80(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::TokenTree_2b(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state81(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::UnpairedToken(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state82(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 72
    //   Symbol = r#"\'.\'"# (*) ["%empty"]
    //   Symbol = r#"\'.\'"# (*) ["%prec"]
    //   Symbol = r#"\'.\'"# (*) [";"]
    //   Symbol = r#"\'.\'"# (*) ["{"]
    //   Symbol = r#"\'.\'"# (*) ["|"]
    //   Symbol = r#"\'.\'"# (*) [r#"\'.\'"#]
    //   Symbol = r#"\'.\'"# (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "%empty" -> Reduce(Symbol = r#"\'.\'"# => ActionFn(13);)
    //   "%prec" -> Reduce(Symbol = r#"\'.\'"# => ActionFn(13);)
    //   ";" -> Reduce(Symbol = r#"\'.\'"# => ActionFn(13);)
    //   "{" -> Reduce(Symbol = r#"\'.\'"# => ActionFn(13);)
    //   "|" -> Reduce(Symbol = r#"\'.\'"# => ActionFn(13);)
    //   r#"\'.\'"# -> Reduce(Symbol = r#"\'.\'"# => ActionFn(13);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(Symbol = r#"\'.\'"# => ActionFn(13);)
    //
    pub fn __state72<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (6, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (24, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action13(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Symbol(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 73
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["%empty"]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["%prec"]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) [";"]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["{"]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["|"]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) [r#"\'.\'"#]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "%empty" -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   "%prec" -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   ";" -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   "{" -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   "|" -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   r#"\'.\'"# -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //
    pub fn __state73<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (6, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (24, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action14(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ident(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 74
    //   GrammarRule = Ident ":" Alternatives ";" (*) [EOF]
    //   GrammarRule = Ident ":" Alternatives ";" (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   EOF -> Reduce(GrammarRule = Ident, ":", Alternatives, ";" => ActionFn(16);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(GrammarRule = Ident, ":", Alternatives, ";" => ActionFn(16);)
    //
    pub fn __state74<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Ident<'input>>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Vec<Alternative<'input>>>,
        __sym3: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __nt = super::__action16(input, __sym0, __sym1, __sym2, __sym3, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::GrammarRule(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 75
    //   ActionCode = (*) "{" TokenTree+ "}" ["%empty"]
    //   ActionCode = (*) "{" TokenTree+ "}" ["%prec"]
    //   ActionCode = (*) "{" TokenTree+ "}" [";"]
    //   ActionCode = (*) "{" TokenTree+ "}" ["{"]
    //   ActionCode = (*) "{" TokenTree+ "}" ["|"]
    //   ActionCode = (*) "{" TokenTree+ "}" [r#"\'.\'"#]
    //   ActionCode = (*) "{" TokenTree+ "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   ActionCode = (*) "{" "}" ["%empty"]
    //   ActionCode = (*) "{" "}" ["%prec"]
    //   ActionCode = (*) "{" "}" [";"]
    //   ActionCode = (*) "{" "}" ["{"]
    //   ActionCode = (*) "{" "}" ["|"]
    //   ActionCode = (*) "{" "}" [r#"\'.\'"#]
    //   ActionCode = (*) "{" "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Alternative = (*) GrammarRhs+ [";"]
    //   Alternative = (*) GrammarRhs+ ["|"]
    //   Alternatives = Alternatives "|" (*) Alternative [";"]
    //   Alternatives = Alternatives "|" (*) Alternative ["|"]
    //   GrammarRhs = (*) ActionCode ["%empty"]
    //   GrammarRhs = (*) ActionCode ["%prec"]
    //   GrammarRhs = (*) ActionCode [";"]
    //   GrammarRhs = (*) ActionCode ["{"]
    //   GrammarRhs = (*) ActionCode ["|"]
    //   GrammarRhs = (*) ActionCode [r#"\'.\'"#]
    //   GrammarRhs = (*) ActionCode [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   GrammarRhs = (*) Symbol ["%empty"]
    //   GrammarRhs = (*) Symbol ["%prec"]
    //   GrammarRhs = (*) Symbol [";"]
    //   GrammarRhs = (*) Symbol ["{"]
    //   GrammarRhs = (*) Symbol ["|"]
    //   GrammarRhs = (*) Symbol [r#"\'.\'"#]
    //   GrammarRhs = (*) Symbol [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   GrammarRhs = (*) "%empty" ["%empty"]
    //   GrammarRhs = (*) "%empty" ["%prec"]
    //   GrammarRhs = (*) "%empty" [";"]
    //   GrammarRhs = (*) "%empty" ["{"]
    //   GrammarRhs = (*) "%empty" ["|"]
    //   GrammarRhs = (*) "%empty" [r#"\'.\'"#]
    //   GrammarRhs = (*) "%empty" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   GrammarRhs = (*) "%prec" Symbol ["%empty"]
    //   GrammarRhs = (*) "%prec" Symbol ["%prec"]
    //   GrammarRhs = (*) "%prec" Symbol [";"]
    //   GrammarRhs = (*) "%prec" Symbol ["{"]
    //   GrammarRhs = (*) "%prec" Symbol ["|"]
    //   GrammarRhs = (*) "%prec" Symbol [r#"\'.\'"#]
    //   GrammarRhs = (*) "%prec" Symbol [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   GrammarRhs+ = (*) GrammarRhs ["%empty"]
    //   GrammarRhs+ = (*) GrammarRhs ["%prec"]
    //   GrammarRhs+ = (*) GrammarRhs [";"]
    //   GrammarRhs+ = (*) GrammarRhs ["{"]
    //   GrammarRhs+ = (*) GrammarRhs ["|"]
    //   GrammarRhs+ = (*) GrammarRhs [r#"\'.\'"#]
    //   GrammarRhs+ = (*) GrammarRhs [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   GrammarRhs+ = (*) GrammarRhs+ GrammarRhs ["%empty"]
    //   GrammarRhs+ = (*) GrammarRhs+ GrammarRhs ["%prec"]
    //   GrammarRhs+ = (*) GrammarRhs+ GrammarRhs [";"]
    //   GrammarRhs+ = (*) GrammarRhs+ GrammarRhs ["{"]
    //   GrammarRhs+ = (*) GrammarRhs+ GrammarRhs ["|"]
    //   GrammarRhs+ = (*) GrammarRhs+ GrammarRhs [r#"\'.\'"#]
    //   GrammarRhs+ = (*) GrammarRhs+ GrammarRhs [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%empty"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["%prec"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [";"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["{"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["|"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Symbol = (*) Ident ["%empty"]
    //   Symbol = (*) Ident ["%prec"]
    //   Symbol = (*) Ident [";"]
    //   Symbol = (*) Ident ["{"]
    //   Symbol = (*) Ident ["|"]
    //   Symbol = (*) Ident [r#"\'.\'"#]
    //   Symbol = (*) Ident [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Symbol = (*) r#"\'.\'"# ["%empty"]
    //   Symbol = (*) r#"\'.\'"# ["%prec"]
    //   Symbol = (*) r#"\'.\'"# [";"]
    //   Symbol = (*) r#"\'.\'"# ["{"]
    //   Symbol = (*) r#"\'.\'"# ["|"]
    //   Symbol = (*) r#"\'.\'"# [r#"\'.\'"#]
    //   Symbol = (*) r#"\'.\'"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "%empty" -> Shift(S69)
    //   "%prec" -> Shift(S70)
    //   "{" -> Shift(S71)
    //   r#"\'.\'"# -> Shift(S72)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S73)
    //
    //   ActionCode -> S62
    //   Alternative -> S98
    //   GrammarRhs -> S65
    //   GrammarRhs+ -> S66
    //   Ident -> S67
    //   Symbol -> S68
    pub fn __state75<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Vec<Alternative<'input>>>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (2, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state69(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (6, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state70(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state71(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state72(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (31, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state73(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::ActionCode(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state62(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Alternative(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state98(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::GrammarRhs(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state65(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::GrammarRhs_2b(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state66(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Ident(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state67(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Symbol(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state68(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 76
    //   GrammarRhs+ = GrammarRhs+ GrammarRhs (*) ["%empty"]
    //   GrammarRhs+ = GrammarRhs+ GrammarRhs (*) ["%prec"]
    //   GrammarRhs+ = GrammarRhs+ GrammarRhs (*) [";"]
    //   GrammarRhs+ = GrammarRhs+ GrammarRhs (*) ["{"]
    //   GrammarRhs+ = GrammarRhs+ GrammarRhs (*) ["|"]
    //   GrammarRhs+ = GrammarRhs+ GrammarRhs (*) [r#"\'.\'"#]
    //   GrammarRhs+ = GrammarRhs+ GrammarRhs (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "%empty" -> Reduce(GrammarRhs+ = GrammarRhs+, GrammarRhs => ActionFn(50);)
    //   "%prec" -> Reduce(GrammarRhs+ = GrammarRhs+, GrammarRhs => ActionFn(50);)
    //   ";" -> Reduce(GrammarRhs+ = GrammarRhs+, GrammarRhs => ActionFn(50);)
    //   "{" -> Reduce(GrammarRhs+ = GrammarRhs+, GrammarRhs => ActionFn(50);)
    //   "|" -> Reduce(GrammarRhs+ = GrammarRhs+, GrammarRhs => ActionFn(50);)
    //   r#"\'.\'"# -> Reduce(GrammarRhs+ = GrammarRhs+, GrammarRhs => ActionFn(50);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(GrammarRhs+ = GrammarRhs+, GrammarRhs => ActionFn(50);)
    //
    pub fn __state76<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<::std::vec::Vec<Option<Symbol<'input>>>>,
        __sym1: &mut Option<Option<Symbol<'input>>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (6, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (24, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action50(input, __sym0, __sym1, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::GrammarRhs_2b(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 77
    //   GrammarRhs = "%prec" Symbol (*) ["%empty"]
    //   GrammarRhs = "%prec" Symbol (*) ["%prec"]
    //   GrammarRhs = "%prec" Symbol (*) [";"]
    //   GrammarRhs = "%prec" Symbol (*) ["{"]
    //   GrammarRhs = "%prec" Symbol (*) ["|"]
    //   GrammarRhs = "%prec" Symbol (*) [r#"\'.\'"#]
    //   GrammarRhs = "%prec" Symbol (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "%empty" -> Reduce(GrammarRhs = "%prec", Symbol => ActionFn(22);)
    //   "%prec" -> Reduce(GrammarRhs = "%prec", Symbol => ActionFn(22);)
    //   ";" -> Reduce(GrammarRhs = "%prec", Symbol => ActionFn(22);)
    //   "{" -> Reduce(GrammarRhs = "%prec", Symbol => ActionFn(22);)
    //   "|" -> Reduce(GrammarRhs = "%prec", Symbol => ActionFn(22);)
    //   r#"\'.\'"# -> Reduce(GrammarRhs = "%prec", Symbol => ActionFn(22);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(GrammarRhs = "%prec", Symbol => ActionFn(22);)
    //
    pub fn __state77<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Symbol<'input>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (6, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (24, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action22(input, __sym0, __sym1, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::GrammarRhs(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 78
    //   UnpairedToken = Ident (*) ["("]
    //   UnpairedToken = Ident (*) ["*"]
    //   UnpairedToken = Ident (*) [","]
    //   UnpairedToken = Ident (*) ["."]
    //   UnpairedToken = Ident (*) [";"]
    //   UnpairedToken = Ident (*) ["="]
    //   UnpairedToken = Ident (*) ["["]
    //   UnpairedToken = Ident (*) ["{"]
    //   UnpairedToken = Ident (*) ["}"]
    //   UnpairedToken = Ident (*) [r#"\"[^\"]*\""#]
    //   UnpairedToken = Ident (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = Ident (*) [r#"$[$0-9]+"#]
    //   UnpairedToken = Ident (*) [r#"\'.\'"#]
    //   UnpairedToken = Ident (*) [r#"[0-9]+"#]
    //   UnpairedToken = Ident (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   "*" -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   "," -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   "." -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   ";" -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   "=" -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   "[" -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   "{" -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   "}" -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   r#"\"[^\"]*\""# -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   r#"$[$0-9]+"# -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   r#"\'.\'"# -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   r#"[0-9]+"# -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //
    pub fn __state78<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Ident<'input>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action36(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::UnpairedToken(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 79
    //   UnpairedToken = Integer (*) ["("]
    //   UnpairedToken = Integer (*) ["*"]
    //   UnpairedToken = Integer (*) [","]
    //   UnpairedToken = Integer (*) ["."]
    //   UnpairedToken = Integer (*) [";"]
    //   UnpairedToken = Integer (*) ["="]
    //   UnpairedToken = Integer (*) ["["]
    //   UnpairedToken = Integer (*) ["{"]
    //   UnpairedToken = Integer (*) ["}"]
    //   UnpairedToken = Integer (*) [r#"\"[^\"]*\""#]
    //   UnpairedToken = Integer (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = Integer (*) [r#"$[$0-9]+"#]
    //   UnpairedToken = Integer (*) [r#"\'.\'"#]
    //   UnpairedToken = Integer (*) [r#"[0-9]+"#]
    //   UnpairedToken = Integer (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   "*" -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   "," -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   "." -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   ";" -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   "=" -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   "[" -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   "{" -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   "}" -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   r#"\"[^\"]*\""# -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   r#"$[$0-9]+"# -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   r#"\'.\'"# -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   r#"[0-9]+"# -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //
    pub fn __state79<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action37(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::UnpairedToken(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 80
    //   TokenTree+ = TokenTree (*) ["("]
    //   TokenTree+ = TokenTree (*) ["*"]
    //   TokenTree+ = TokenTree (*) [","]
    //   TokenTree+ = TokenTree (*) ["."]
    //   TokenTree+ = TokenTree (*) [";"]
    //   TokenTree+ = TokenTree (*) ["="]
    //   TokenTree+ = TokenTree (*) ["["]
    //   TokenTree+ = TokenTree (*) ["{"]
    //   TokenTree+ = TokenTree (*) ["}"]
    //   TokenTree+ = TokenTree (*) [r#"\"[^\"]*\""#]
    //   TokenTree+ = TokenTree (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = TokenTree (*) [r#"$[$0-9]+"#]
    //   TokenTree+ = TokenTree (*) [r#"\'.\'"#]
    //   TokenTree+ = TokenTree (*) [r#"[0-9]+"#]
    //   TokenTree+ = TokenTree (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(TokenTree+ = TokenTree => ActionFn(65);)
    //   "*" -> Reduce(TokenTree+ = TokenTree => ActionFn(65);)
    //   "," -> Reduce(TokenTree+ = TokenTree => ActionFn(65);)
    //   "." -> Reduce(TokenTree+ = TokenTree => ActionFn(65);)
    //   ";" -> Reduce(TokenTree+ = TokenTree => ActionFn(65);)
    //   "=" -> Reduce(TokenTree+ = TokenTree => ActionFn(65);)
    //   "[" -> Reduce(TokenTree+ = TokenTree => ActionFn(65);)
    //   "{" -> Reduce(TokenTree+ = TokenTree => ActionFn(65);)
    //   "}" -> Reduce(TokenTree+ = TokenTree => ActionFn(65);)
    //   r#"\"[^\"]*\""# -> Reduce(TokenTree+ = TokenTree => ActionFn(65);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(TokenTree+ = TokenTree => ActionFn(65);)
    //   r#"$[$0-9]+"# -> Reduce(TokenTree+ = TokenTree => ActionFn(65);)
    //   r#"\'.\'"# -> Reduce(TokenTree+ = TokenTree => ActionFn(65);)
    //   r#"[0-9]+"# -> Reduce(TokenTree+ = TokenTree => ActionFn(65);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(TokenTree+ = TokenTree => ActionFn(65);)
    //
    pub fn __state80<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<()>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action65(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::TokenTree_2b(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 81
    //   ActionCode = "{" TokenTree+ (*) "}" ["%empty"]
    //   ActionCode = "{" TokenTree+ (*) "}" ["%prec"]
    //   ActionCode = "{" TokenTree+ (*) "}" [";"]
    //   ActionCode = "{" TokenTree+ (*) "}" ["{"]
    //   ActionCode = "{" TokenTree+ (*) "}" ["|"]
    //   ActionCode = "{" TokenTree+ (*) "}" [r#"\'.\'"#]
    //   ActionCode = "{" TokenTree+ (*) "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["("]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["*"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [","]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["."]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [";"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["="]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["["]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["{"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["}"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\"[^\"]*\""#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"$[$0-9]+"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[0-9]+"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Integer = (*) r#"[0-9]+"# ["("]
    //   Integer = (*) r#"[0-9]+"# ["*"]
    //   Integer = (*) r#"[0-9]+"# [","]
    //   Integer = (*) r#"[0-9]+"# ["."]
    //   Integer = (*) r#"[0-9]+"# [";"]
    //   Integer = (*) r#"[0-9]+"# ["="]
    //   Integer = (*) r#"[0-9]+"# ["["]
    //   Integer = (*) r#"[0-9]+"# ["{"]
    //   Integer = (*) r#"[0-9]+"# ["}"]
    //   Integer = (*) r#"[0-9]+"# [r#"\"[^\"]*\""#]
    //   Integer = (*) r#"[0-9]+"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Integer = (*) r#"[0-9]+"# [r#"$[$0-9]+"#]
    //   Integer = (*) r#"[0-9]+"# [r#"\'.\'"#]
    //   Integer = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Integer = (*) r#"[0-9]+"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) UnpairedToken ["("]
    //   TokenTree = (*) UnpairedToken ["*"]
    //   TokenTree = (*) UnpairedToken [","]
    //   TokenTree = (*) UnpairedToken ["."]
    //   TokenTree = (*) UnpairedToken [";"]
    //   TokenTree = (*) UnpairedToken ["="]
    //   TokenTree = (*) UnpairedToken ["["]
    //   TokenTree = (*) UnpairedToken ["{"]
    //   TokenTree = (*) UnpairedToken ["}"]
    //   TokenTree = (*) UnpairedToken [r#"\"[^\"]*\""#]
    //   TokenTree = (*) UnpairedToken [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) UnpairedToken [r#"$[$0-9]+"#]
    //   TokenTree = (*) UnpairedToken [r#"\'.\'"#]
    //   TokenTree = (*) UnpairedToken [r#"[0-9]+"#]
    //   TokenTree = (*) UnpairedToken [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" TokenTree+ ")" ["("]
    //   TokenTree = (*) "(" TokenTree+ ")" ["*"]
    //   TokenTree = (*) "(" TokenTree+ ")" [","]
    //   TokenTree = (*) "(" TokenTree+ ")" ["."]
    //   TokenTree = (*) "(" TokenTree+ ")" [";"]
    //   TokenTree = (*) "(" TokenTree+ ")" ["="]
    //   TokenTree = (*) "(" TokenTree+ ")" ["["]
    //   TokenTree = (*) "(" TokenTree+ ")" ["{"]
    //   TokenTree = (*) "(" TokenTree+ ")" ["}"]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"\'.\'"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"[0-9]+"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" ")" ["("]
    //   TokenTree = (*) "(" ")" ["*"]
    //   TokenTree = (*) "(" ")" [","]
    //   TokenTree = (*) "(" ")" ["."]
    //   TokenTree = (*) "(" ")" [";"]
    //   TokenTree = (*) "(" ")" ["="]
    //   TokenTree = (*) "(" ")" ["["]
    //   TokenTree = (*) "(" ")" ["{"]
    //   TokenTree = (*) "(" ")" ["}"]
    //   TokenTree = (*) "(" ")" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "(" ")" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" ")" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "(" ")" [r#"\'.\'"#]
    //   TokenTree = (*) "(" ")" [r#"[0-9]+"#]
    //   TokenTree = (*) "(" ")" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" TokenTree+ "]" ["("]
    //   TokenTree = (*) "[" TokenTree+ "]" ["*"]
    //   TokenTree = (*) "[" TokenTree+ "]" [","]
    //   TokenTree = (*) "[" TokenTree+ "]" ["."]
    //   TokenTree = (*) "[" TokenTree+ "]" [";"]
    //   TokenTree = (*) "[" TokenTree+ "]" ["="]
    //   TokenTree = (*) "[" TokenTree+ "]" ["["]
    //   TokenTree = (*) "[" TokenTree+ "]" ["{"]
    //   TokenTree = (*) "[" TokenTree+ "]" ["}"]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"\'.\'"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"[0-9]+"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" "]" ["("]
    //   TokenTree = (*) "[" "]" ["*"]
    //   TokenTree = (*) "[" "]" [","]
    //   TokenTree = (*) "[" "]" ["."]
    //   TokenTree = (*) "[" "]" [";"]
    //   TokenTree = (*) "[" "]" ["="]
    //   TokenTree = (*) "[" "]" ["["]
    //   TokenTree = (*) "[" "]" ["{"]
    //   TokenTree = (*) "[" "]" ["}"]
    //   TokenTree = (*) "[" "]" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "[" "]" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" "]" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "[" "]" [r#"\'.\'"#]
    //   TokenTree = (*) "[" "]" [r#"[0-9]+"#]
    //   TokenTree = (*) "[" "]" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" TokenTree+ "}" ["("]
    //   TokenTree = (*) "{" TokenTree+ "}" ["*"]
    //   TokenTree = (*) "{" TokenTree+ "}" [","]
    //   TokenTree = (*) "{" TokenTree+ "}" ["."]
    //   TokenTree = (*) "{" TokenTree+ "}" [";"]
    //   TokenTree = (*) "{" TokenTree+ "}" ["="]
    //   TokenTree = (*) "{" TokenTree+ "}" ["["]
    //   TokenTree = (*) "{" TokenTree+ "}" ["{"]
    //   TokenTree = (*) "{" TokenTree+ "}" ["}"]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"\'.\'"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"[0-9]+"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" "}" ["("]
    //   TokenTree = (*) "{" "}" ["*"]
    //   TokenTree = (*) "{" "}" [","]
    //   TokenTree = (*) "{" "}" ["."]
    //   TokenTree = (*) "{" "}" [";"]
    //   TokenTree = (*) "{" "}" ["="]
    //   TokenTree = (*) "{" "}" ["["]
    //   TokenTree = (*) "{" "}" ["{"]
    //   TokenTree = (*) "{" "}" ["}"]
    //   TokenTree = (*) "{" "}" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "{" "}" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" "}" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "{" "}" [r#"\'.\'"#]
    //   TokenTree = (*) "{" "}" [r#"[0-9]+"#]
    //   TokenTree = (*) "{" "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["("]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["*"]
    //   TokenTree+ = TokenTree+ (*) TokenTree [","]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["."]
    //   TokenTree+ = TokenTree+ (*) TokenTree [";"]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["="]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["["]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["{"]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["}"]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"\"[^\"]*\""#]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"$[$0-9]+"#]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"\'.\'"#]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"[0-9]+"#]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Ident ["("]
    //   UnpairedToken = (*) Ident ["*"]
    //   UnpairedToken = (*) Ident [","]
    //   UnpairedToken = (*) Ident ["."]
    //   UnpairedToken = (*) Ident [";"]
    //   UnpairedToken = (*) Ident ["="]
    //   UnpairedToken = (*) Ident ["["]
    //   UnpairedToken = (*) Ident ["{"]
    //   UnpairedToken = (*) Ident ["}"]
    //   UnpairedToken = (*) Ident [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) Ident [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Ident [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) Ident [r#"\'.\'"#]
    //   UnpairedToken = (*) Ident [r#"[0-9]+"#]
    //   UnpairedToken = (*) Ident [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Integer ["("]
    //   UnpairedToken = (*) Integer ["*"]
    //   UnpairedToken = (*) Integer [","]
    //   UnpairedToken = (*) Integer ["."]
    //   UnpairedToken = (*) Integer [";"]
    //   UnpairedToken = (*) Integer ["="]
    //   UnpairedToken = (*) Integer ["["]
    //   UnpairedToken = (*) Integer ["{"]
    //   UnpairedToken = (*) Integer ["}"]
    //   UnpairedToken = (*) Integer [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) Integer [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Integer [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) Integer [r#"\'.\'"#]
    //   UnpairedToken = (*) Integer [r#"[0-9]+"#]
    //   UnpairedToken = (*) Integer [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "*" ["("]
    //   UnpairedToken = (*) "*" ["*"]
    //   UnpairedToken = (*) "*" [","]
    //   UnpairedToken = (*) "*" ["."]
    //   UnpairedToken = (*) "*" [";"]
    //   UnpairedToken = (*) "*" ["="]
    //   UnpairedToken = (*) "*" ["["]
    //   UnpairedToken = (*) "*" ["{"]
    //   UnpairedToken = (*) "*" ["}"]
    //   UnpairedToken = (*) "*" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "*" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "*" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "*" [r#"\'.\'"#]
    //   UnpairedToken = (*) "*" [r#"[0-9]+"#]
    //   UnpairedToken = (*) "*" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "," ["("]
    //   UnpairedToken = (*) "," ["*"]
    //   UnpairedToken = (*) "," [","]
    //   UnpairedToken = (*) "," ["."]
    //   UnpairedToken = (*) "," [";"]
    //   UnpairedToken = (*) "," ["="]
    //   UnpairedToken = (*) "," ["["]
    //   UnpairedToken = (*) "," ["{"]
    //   UnpairedToken = (*) "," ["}"]
    //   UnpairedToken = (*) "," [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "," [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "," [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "," [r#"\'.\'"#]
    //   UnpairedToken = (*) "," [r#"[0-9]+"#]
    //   UnpairedToken = (*) "," [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "." ["("]
    //   UnpairedToken = (*) "." ["*"]
    //   UnpairedToken = (*) "." [","]
    //   UnpairedToken = (*) "." ["."]
    //   UnpairedToken = (*) "." [";"]
    //   UnpairedToken = (*) "." ["="]
    //   UnpairedToken = (*) "." ["["]
    //   UnpairedToken = (*) "." ["{"]
    //   UnpairedToken = (*) "." ["}"]
    //   UnpairedToken = (*) "." [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "." [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "." [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "." [r#"\'.\'"#]
    //   UnpairedToken = (*) "." [r#"[0-9]+"#]
    //   UnpairedToken = (*) "." [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) ";" ["("]
    //   UnpairedToken = (*) ";" ["*"]
    //   UnpairedToken = (*) ";" [","]
    //   UnpairedToken = (*) ";" ["."]
    //   UnpairedToken = (*) ";" [";"]
    //   UnpairedToken = (*) ";" ["="]
    //   UnpairedToken = (*) ";" ["["]
    //   UnpairedToken = (*) ";" ["{"]
    //   UnpairedToken = (*) ";" ["}"]
    //   UnpairedToken = (*) ";" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) ";" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) ";" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) ";" [r#"\'.\'"#]
    //   UnpairedToken = (*) ";" [r#"[0-9]+"#]
    //   UnpairedToken = (*) ";" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "=" ["("]
    //   UnpairedToken = (*) "=" ["*"]
    //   UnpairedToken = (*) "=" [","]
    //   UnpairedToken = (*) "=" ["."]
    //   UnpairedToken = (*) "=" [";"]
    //   UnpairedToken = (*) "=" ["="]
    //   UnpairedToken = (*) "=" ["["]
    //   UnpairedToken = (*) "=" ["{"]
    //   UnpairedToken = (*) "=" ["}"]
    //   UnpairedToken = (*) "=" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "=" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "=" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "=" [r#"\'.\'"#]
    //   UnpairedToken = (*) "=" [r#"[0-9]+"#]
    //   UnpairedToken = (*) "=" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["("]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["*"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [","]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["."]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [";"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["="]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["["]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["{"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["}"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["("]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["*"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [","]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["."]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [";"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["="]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["["]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["{"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["}"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["("]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["*"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [","]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["."]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [";"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["="]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["["]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["{"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["}"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\'.\'"# ["("]
    //   UnpairedToken = (*) r#"\'.\'"# ["*"]
    //   UnpairedToken = (*) r#"\'.\'"# [","]
    //   UnpairedToken = (*) r#"\'.\'"# ["."]
    //   UnpairedToken = (*) r#"\'.\'"# [";"]
    //   UnpairedToken = (*) r#"\'.\'"# ["="]
    //   UnpairedToken = (*) r#"\'.\'"# ["["]
    //   UnpairedToken = (*) r#"\'.\'"# ["{"]
    //   UnpairedToken = (*) r#"\'.\'"# ["}"]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Shift(S83)
    //   "*" -> Shift(S84)
    //   "," -> Shift(S85)
    //   "." -> Shift(S86)
    //   ";" -> Shift(S87)
    //   "=" -> Shift(S88)
    //   "[" -> Shift(S89)
    //   "{" -> Shift(S90)
    //   "}" -> Shift(S100)
    //   r#"\"[^\"]*\""# -> Shift(S92)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S93)
    //   r#"$[$0-9]+"# -> Shift(S94)
    //   r#"\'.\'"# -> Shift(S95)
    //   r#"[0-9]+"# -> Shift(S96)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S97)
    //
    //   Ident -> S78
    //   Integer -> S79
    //   TokenTree -> S99
    //   UnpairedToken -> S82
    pub fn __state81<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<::std::vec::Vec<()>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state83(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state84(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state85(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (17, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state86(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state87(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state88(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state89(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state90(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state100(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state92(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state93(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state94(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state95(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state96(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (31, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state97(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ident(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state78(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state79(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::TokenTree(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state99(input, __lookbehind, __tokens, __lookahead, __sym1, __sym2));
                }
                __Nonterminal::UnpairedToken(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state82(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 82
    //   TokenTree = UnpairedToken (*) ["("]
    //   TokenTree = UnpairedToken (*) ["*"]
    //   TokenTree = UnpairedToken (*) [","]
    //   TokenTree = UnpairedToken (*) ["."]
    //   TokenTree = UnpairedToken (*) [";"]
    //   TokenTree = UnpairedToken (*) ["="]
    //   TokenTree = UnpairedToken (*) ["["]
    //   TokenTree = UnpairedToken (*) ["{"]
    //   TokenTree = UnpairedToken (*) ["}"]
    //   TokenTree = UnpairedToken (*) [r#"\"[^\"]*\""#]
    //   TokenTree = UnpairedToken (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = UnpairedToken (*) [r#"$[$0-9]+"#]
    //   TokenTree = UnpairedToken (*) [r#"\'.\'"#]
    //   TokenTree = UnpairedToken (*) [r#"[0-9]+"#]
    //   TokenTree = UnpairedToken (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(TokenTree = UnpairedToken => ActionFn(28);)
    //   "*" -> Reduce(TokenTree = UnpairedToken => ActionFn(28);)
    //   "," -> Reduce(TokenTree = UnpairedToken => ActionFn(28);)
    //   "." -> Reduce(TokenTree = UnpairedToken => ActionFn(28);)
    //   ";" -> Reduce(TokenTree = UnpairedToken => ActionFn(28);)
    //   "=" -> Reduce(TokenTree = UnpairedToken => ActionFn(28);)
    //   "[" -> Reduce(TokenTree = UnpairedToken => ActionFn(28);)
    //   "{" -> Reduce(TokenTree = UnpairedToken => ActionFn(28);)
    //   "}" -> Reduce(TokenTree = UnpairedToken => ActionFn(28);)
    //   r#"\"[^\"]*\""# -> Reduce(TokenTree = UnpairedToken => ActionFn(28);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(TokenTree = UnpairedToken => ActionFn(28);)
    //   r#"$[$0-9]+"# -> Reduce(TokenTree = UnpairedToken => ActionFn(28);)
    //   r#"\'.\'"# -> Reduce(TokenTree = UnpairedToken => ActionFn(28);)
    //   r#"[0-9]+"# -> Reduce(TokenTree = UnpairedToken => ActionFn(28);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(TokenTree = UnpairedToken => ActionFn(28);)
    //
    pub fn __state82<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<()>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action28(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::TokenTree(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 83
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["("]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [")"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["*"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [","]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["."]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [";"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["="]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["["]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["{"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\"[^\"]*\""#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"$[$0-9]+"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[0-9]+"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Integer = (*) r#"[0-9]+"# ["("]
    //   Integer = (*) r#"[0-9]+"# [")"]
    //   Integer = (*) r#"[0-9]+"# ["*"]
    //   Integer = (*) r#"[0-9]+"# [","]
    //   Integer = (*) r#"[0-9]+"# ["."]
    //   Integer = (*) r#"[0-9]+"# [";"]
    //   Integer = (*) r#"[0-9]+"# ["="]
    //   Integer = (*) r#"[0-9]+"# ["["]
    //   Integer = (*) r#"[0-9]+"# ["{"]
    //   Integer = (*) r#"[0-9]+"# [r#"\"[^\"]*\""#]
    //   Integer = (*) r#"[0-9]+"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Integer = (*) r#"[0-9]+"# [r#"$[$0-9]+"#]
    //   Integer = (*) r#"[0-9]+"# [r#"\'.\'"#]
    //   Integer = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Integer = (*) r#"[0-9]+"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) UnpairedToken ["("]
    //   TokenTree = (*) UnpairedToken [")"]
    //   TokenTree = (*) UnpairedToken ["*"]
    //   TokenTree = (*) UnpairedToken [","]
    //   TokenTree = (*) UnpairedToken ["."]
    //   TokenTree = (*) UnpairedToken [";"]
    //   TokenTree = (*) UnpairedToken ["="]
    //   TokenTree = (*) UnpairedToken ["["]
    //   TokenTree = (*) UnpairedToken ["{"]
    //   TokenTree = (*) UnpairedToken [r#"\"[^\"]*\""#]
    //   TokenTree = (*) UnpairedToken [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) UnpairedToken [r#"$[$0-9]+"#]
    //   TokenTree = (*) UnpairedToken [r#"\'.\'"#]
    //   TokenTree = (*) UnpairedToken [r#"[0-9]+"#]
    //   TokenTree = (*) UnpairedToken [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" TokenTree+ ")" ["("]
    //   TokenTree = (*) "(" TokenTree+ ")" [")"]
    //   TokenTree = (*) "(" TokenTree+ ")" ["*"]
    //   TokenTree = (*) "(" TokenTree+ ")" [","]
    //   TokenTree = (*) "(" TokenTree+ ")" ["."]
    //   TokenTree = (*) "(" TokenTree+ ")" [";"]
    //   TokenTree = (*) "(" TokenTree+ ")" ["="]
    //   TokenTree = (*) "(" TokenTree+ ")" ["["]
    //   TokenTree = (*) "(" TokenTree+ ")" ["{"]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"\'.\'"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"[0-9]+"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "(" (*) TokenTree+ ")" ["("]
    //   TokenTree = "(" (*) TokenTree+ ")" ["*"]
    //   TokenTree = "(" (*) TokenTree+ ")" [","]
    //   TokenTree = "(" (*) TokenTree+ ")" ["."]
    //   TokenTree = "(" (*) TokenTree+ ")" [";"]
    //   TokenTree = "(" (*) TokenTree+ ")" ["="]
    //   TokenTree = "(" (*) TokenTree+ ")" ["["]
    //   TokenTree = "(" (*) TokenTree+ ")" ["{"]
    //   TokenTree = "(" (*) TokenTree+ ")" ["}"]
    //   TokenTree = "(" (*) TokenTree+ ")" [r#"\"[^\"]*\""#]
    //   TokenTree = "(" (*) TokenTree+ ")" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "(" (*) TokenTree+ ")" [r#"$[$0-9]+"#]
    //   TokenTree = "(" (*) TokenTree+ ")" [r#"\'.\'"#]
    //   TokenTree = "(" (*) TokenTree+ ")" [r#"[0-9]+"#]
    //   TokenTree = "(" (*) TokenTree+ ")" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" ")" ["("]
    //   TokenTree = (*) "(" ")" [")"]
    //   TokenTree = (*) "(" ")" ["*"]
    //   TokenTree = (*) "(" ")" [","]
    //   TokenTree = (*) "(" ")" ["."]
    //   TokenTree = (*) "(" ")" [";"]
    //   TokenTree = (*) "(" ")" ["="]
    //   TokenTree = (*) "(" ")" ["["]
    //   TokenTree = (*) "(" ")" ["{"]
    //   TokenTree = (*) "(" ")" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "(" ")" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" ")" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "(" ")" [r#"\'.\'"#]
    //   TokenTree = (*) "(" ")" [r#"[0-9]+"#]
    //   TokenTree = (*) "(" ")" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "(" (*) ")" ["("]
    //   TokenTree = "(" (*) ")" ["*"]
    //   TokenTree = "(" (*) ")" [","]
    //   TokenTree = "(" (*) ")" ["."]
    //   TokenTree = "(" (*) ")" [";"]
    //   TokenTree = "(" (*) ")" ["="]
    //   TokenTree = "(" (*) ")" ["["]
    //   TokenTree = "(" (*) ")" ["{"]
    //   TokenTree = "(" (*) ")" ["}"]
    //   TokenTree = "(" (*) ")" [r#"\"[^\"]*\""#]
    //   TokenTree = "(" (*) ")" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "(" (*) ")" [r#"$[$0-9]+"#]
    //   TokenTree = "(" (*) ")" [r#"\'.\'"#]
    //   TokenTree = "(" (*) ")" [r#"[0-9]+"#]
    //   TokenTree = "(" (*) ")" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" TokenTree+ "]" ["("]
    //   TokenTree = (*) "[" TokenTree+ "]" [")"]
    //   TokenTree = (*) "[" TokenTree+ "]" ["*"]
    //   TokenTree = (*) "[" TokenTree+ "]" [","]
    //   TokenTree = (*) "[" TokenTree+ "]" ["."]
    //   TokenTree = (*) "[" TokenTree+ "]" [";"]
    //   TokenTree = (*) "[" TokenTree+ "]" ["="]
    //   TokenTree = (*) "[" TokenTree+ "]" ["["]
    //   TokenTree = (*) "[" TokenTree+ "]" ["{"]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"\'.\'"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"[0-9]+"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" "]" ["("]
    //   TokenTree = (*) "[" "]" [")"]
    //   TokenTree = (*) "[" "]" ["*"]
    //   TokenTree = (*) "[" "]" [","]
    //   TokenTree = (*) "[" "]" ["."]
    //   TokenTree = (*) "[" "]" [";"]
    //   TokenTree = (*) "[" "]" ["="]
    //   TokenTree = (*) "[" "]" ["["]
    //   TokenTree = (*) "[" "]" ["{"]
    //   TokenTree = (*) "[" "]" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "[" "]" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" "]" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "[" "]" [r#"\'.\'"#]
    //   TokenTree = (*) "[" "]" [r#"[0-9]+"#]
    //   TokenTree = (*) "[" "]" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" TokenTree+ "}" ["("]
    //   TokenTree = (*) "{" TokenTree+ "}" [")"]
    //   TokenTree = (*) "{" TokenTree+ "}" ["*"]
    //   TokenTree = (*) "{" TokenTree+ "}" [","]
    //   TokenTree = (*) "{" TokenTree+ "}" ["."]
    //   TokenTree = (*) "{" TokenTree+ "}" [";"]
    //   TokenTree = (*) "{" TokenTree+ "}" ["="]
    //   TokenTree = (*) "{" TokenTree+ "}" ["["]
    //   TokenTree = (*) "{" TokenTree+ "}" ["{"]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"\'.\'"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"[0-9]+"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" "}" ["("]
    //   TokenTree = (*) "{" "}" [")"]
    //   TokenTree = (*) "{" "}" ["*"]
    //   TokenTree = (*) "{" "}" [","]
    //   TokenTree = (*) "{" "}" ["."]
    //   TokenTree = (*) "{" "}" [";"]
    //   TokenTree = (*) "{" "}" ["="]
    //   TokenTree = (*) "{" "}" ["["]
    //   TokenTree = (*) "{" "}" ["{"]
    //   TokenTree = (*) "{" "}" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "{" "}" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" "}" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "{" "}" [r#"\'.\'"#]
    //   TokenTree = (*) "{" "}" [r#"[0-9]+"#]
    //   TokenTree = (*) "{" "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = (*) TokenTree ["("]
    //   TokenTree+ = (*) TokenTree [")"]
    //   TokenTree+ = (*) TokenTree ["*"]
    //   TokenTree+ = (*) TokenTree [","]
    //   TokenTree+ = (*) TokenTree ["."]
    //   TokenTree+ = (*) TokenTree [";"]
    //   TokenTree+ = (*) TokenTree ["="]
    //   TokenTree+ = (*) TokenTree ["["]
    //   TokenTree+ = (*) TokenTree ["{"]
    //   TokenTree+ = (*) TokenTree [r#"\"[^\"]*\""#]
    //   TokenTree+ = (*) TokenTree [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = (*) TokenTree [r#"$[$0-9]+"#]
    //   TokenTree+ = (*) TokenTree [r#"\'.\'"#]
    //   TokenTree+ = (*) TokenTree [r#"[0-9]+"#]
    //   TokenTree+ = (*) TokenTree [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["("]
    //   TokenTree+ = (*) TokenTree+ TokenTree [")"]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["*"]
    //   TokenTree+ = (*) TokenTree+ TokenTree [","]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["."]
    //   TokenTree+ = (*) TokenTree+ TokenTree [";"]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["="]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["["]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["{"]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"\"[^\"]*\""#]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"$[$0-9]+"#]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"\'.\'"#]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"[0-9]+"#]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Ident ["("]
    //   UnpairedToken = (*) Ident [")"]
    //   UnpairedToken = (*) Ident ["*"]
    //   UnpairedToken = (*) Ident [","]
    //   UnpairedToken = (*) Ident ["."]
    //   UnpairedToken = (*) Ident [";"]
    //   UnpairedToken = (*) Ident ["="]
    //   UnpairedToken = (*) Ident ["["]
    //   UnpairedToken = (*) Ident ["{"]
    //   UnpairedToken = (*) Ident [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) Ident [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Ident [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) Ident [r#"\'.\'"#]
    //   UnpairedToken = (*) Ident [r#"[0-9]+"#]
    //   UnpairedToken = (*) Ident [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Integer ["("]
    //   UnpairedToken = (*) Integer [")"]
    //   UnpairedToken = (*) Integer ["*"]
    //   UnpairedToken = (*) Integer [","]
    //   UnpairedToken = (*) Integer ["."]
    //   UnpairedToken = (*) Integer [";"]
    //   UnpairedToken = (*) Integer ["="]
    //   UnpairedToken = (*) Integer ["["]
    //   UnpairedToken = (*) Integer ["{"]
    //   UnpairedToken = (*) Integer [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) Integer [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Integer [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) Integer [r#"\'.\'"#]
    //   UnpairedToken = (*) Integer [r#"[0-9]+"#]
    //   UnpairedToken = (*) Integer [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "*" ["("]
    //   UnpairedToken = (*) "*" [")"]
    //   UnpairedToken = (*) "*" ["*"]
    //   UnpairedToken = (*) "*" [","]
    //   UnpairedToken = (*) "*" ["."]
    //   UnpairedToken = (*) "*" [";"]
    //   UnpairedToken = (*) "*" ["="]
    //   UnpairedToken = (*) "*" ["["]
    //   UnpairedToken = (*) "*" ["{"]
    //   UnpairedToken = (*) "*" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "*" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "*" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "*" [r#"\'.\'"#]
    //   UnpairedToken = (*) "*" [r#"[0-9]+"#]
    //   UnpairedToken = (*) "*" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "," ["("]
    //   UnpairedToken = (*) "," [")"]
    //   UnpairedToken = (*) "," ["*"]
    //   UnpairedToken = (*) "," [","]
    //   UnpairedToken = (*) "," ["."]
    //   UnpairedToken = (*) "," [";"]
    //   UnpairedToken = (*) "," ["="]
    //   UnpairedToken = (*) "," ["["]
    //   UnpairedToken = (*) "," ["{"]
    //   UnpairedToken = (*) "," [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "," [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "," [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "," [r#"\'.\'"#]
    //   UnpairedToken = (*) "," [r#"[0-9]+"#]
    //   UnpairedToken = (*) "," [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "." ["("]
    //   UnpairedToken = (*) "." [")"]
    //   UnpairedToken = (*) "." ["*"]
    //   UnpairedToken = (*) "." [","]
    //   UnpairedToken = (*) "." ["."]
    //   UnpairedToken = (*) "." [";"]
    //   UnpairedToken = (*) "." ["="]
    //   UnpairedToken = (*) "." ["["]
    //   UnpairedToken = (*) "." ["{"]
    //   UnpairedToken = (*) "." [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "." [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "." [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "." [r#"\'.\'"#]
    //   UnpairedToken = (*) "." [r#"[0-9]+"#]
    //   UnpairedToken = (*) "." [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) ";" ["("]
    //   UnpairedToken = (*) ";" [")"]
    //   UnpairedToken = (*) ";" ["*"]
    //   UnpairedToken = (*) ";" [","]
    //   UnpairedToken = (*) ";" ["."]
    //   UnpairedToken = (*) ";" [";"]
    //   UnpairedToken = (*) ";" ["="]
    //   UnpairedToken = (*) ";" ["["]
    //   UnpairedToken = (*) ";" ["{"]
    //   UnpairedToken = (*) ";" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) ";" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) ";" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) ";" [r#"\'.\'"#]
    //   UnpairedToken = (*) ";" [r#"[0-9]+"#]
    //   UnpairedToken = (*) ";" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "=" ["("]
    //   UnpairedToken = (*) "=" [")"]
    //   UnpairedToken = (*) "=" ["*"]
    //   UnpairedToken = (*) "=" [","]
    //   UnpairedToken = (*) "=" ["."]
    //   UnpairedToken = (*) "=" [";"]
    //   UnpairedToken = (*) "=" ["="]
    //   UnpairedToken = (*) "=" ["["]
    //   UnpairedToken = (*) "=" ["{"]
    //   UnpairedToken = (*) "=" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "=" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "=" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "=" [r#"\'.\'"#]
    //   UnpairedToken = (*) "=" [r#"[0-9]+"#]
    //   UnpairedToken = (*) "=" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["("]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [")"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["*"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [","]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["."]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [";"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["="]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["["]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["{"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["("]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [")"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["*"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [","]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["."]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [";"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["="]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["["]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["{"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["("]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [")"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["*"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [","]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["."]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [";"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["="]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["["]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["{"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\'.\'"# ["("]
    //   UnpairedToken = (*) r#"\'.\'"# [")"]
    //   UnpairedToken = (*) r#"\'.\'"# ["*"]
    //   UnpairedToken = (*) r#"\'.\'"# [","]
    //   UnpairedToken = (*) r#"\'.\'"# ["."]
    //   UnpairedToken = (*) r#"\'.\'"# [";"]
    //   UnpairedToken = (*) r#"\'.\'"# ["="]
    //   UnpairedToken = (*) r#"\'.\'"# ["["]
    //   UnpairedToken = (*) r#"\'.\'"# ["{"]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Shift(S106)
    //   ")" -> Shift(S107)
    //   "*" -> Shift(S108)
    //   "," -> Shift(S109)
    //   "." -> Shift(S110)
    //   ";" -> Shift(S111)
    //   "=" -> Shift(S112)
    //   "[" -> Shift(S113)
    //   "{" -> Shift(S114)
    //   r#"\"[^\"]*\""# -> Shift(S115)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S116)
    //   r#"$[$0-9]+"# -> Shift(S117)
    //   r#"\'.\'"# -> Shift(S118)
    //   r#"[0-9]+"# -> Shift(S119)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S120)
    //
    //   Ident -> S101
    //   Integer -> S102
    //   TokenTree -> S103
    //   TokenTree+ -> S104
    //   UnpairedToken -> S105
    pub fn __state83<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state106(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state107(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state108(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state109(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (17, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state110(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state111(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state112(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state113(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state114(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state115(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state116(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state117(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state118(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state119(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (31, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state120(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ident(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state101(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Integer(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state102(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::TokenTree(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state103(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::TokenTree_2b(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state104(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::UnpairedToken(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state105(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 84
    //   UnpairedToken = "*" (*) ["("]
    //   UnpairedToken = "*" (*) ["*"]
    //   UnpairedToken = "*" (*) [","]
    //   UnpairedToken = "*" (*) ["."]
    //   UnpairedToken = "*" (*) [";"]
    //   UnpairedToken = "*" (*) ["="]
    //   UnpairedToken = "*" (*) ["["]
    //   UnpairedToken = "*" (*) ["{"]
    //   UnpairedToken = "*" (*) ["}"]
    //   UnpairedToken = "*" (*) [r#"\"[^\"]*\""#]
    //   UnpairedToken = "*" (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = "*" (*) [r#"$[$0-9]+"#]
    //   UnpairedToken = "*" (*) [r#"\'.\'"#]
    //   UnpairedToken = "*" (*) [r#"[0-9]+"#]
    //   UnpairedToken = "*" (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   "*" -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   "," -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   "." -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   ";" -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   "=" -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   "[" -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   "{" -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   "}" -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   r#"\"[^\"]*\""# -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   r#"$[$0-9]+"# -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   r#"\'.\'"# -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   r#"[0-9]+"# -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //
    pub fn __state84<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action45(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::UnpairedToken(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 85
    //   UnpairedToken = "," (*) ["("]
    //   UnpairedToken = "," (*) ["*"]
    //   UnpairedToken = "," (*) [","]
    //   UnpairedToken = "," (*) ["."]
    //   UnpairedToken = "," (*) [";"]
    //   UnpairedToken = "," (*) ["="]
    //   UnpairedToken = "," (*) ["["]
    //   UnpairedToken = "," (*) ["{"]
    //   UnpairedToken = "," (*) ["}"]
    //   UnpairedToken = "," (*) [r#"\"[^\"]*\""#]
    //   UnpairedToken = "," (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = "," (*) [r#"$[$0-9]+"#]
    //   UnpairedToken = "," (*) [r#"\'.\'"#]
    //   UnpairedToken = "," (*) [r#"[0-9]+"#]
    //   UnpairedToken = "," (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   "*" -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   "," -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   "." -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   ";" -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   "=" -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   "[" -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   "{" -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   "}" -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   r#"\"[^\"]*\""# -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   r#"$[$0-9]+"# -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   r#"\'.\'"# -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   r#"[0-9]+"# -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //
    pub fn __state85<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action40(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::UnpairedToken(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 86
    //   UnpairedToken = "." (*) ["("]
    //   UnpairedToken = "." (*) ["*"]
    //   UnpairedToken = "." (*) [","]
    //   UnpairedToken = "." (*) ["."]
    //   UnpairedToken = "." (*) [";"]
    //   UnpairedToken = "." (*) ["="]
    //   UnpairedToken = "." (*) ["["]
    //   UnpairedToken = "." (*) ["{"]
    //   UnpairedToken = "." (*) ["}"]
    //   UnpairedToken = "." (*) [r#"\"[^\"]*\""#]
    //   UnpairedToken = "." (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = "." (*) [r#"$[$0-9]+"#]
    //   UnpairedToken = "." (*) [r#"\'.\'"#]
    //   UnpairedToken = "." (*) [r#"[0-9]+"#]
    //   UnpairedToken = "." (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   "*" -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   "," -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   "." -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   ";" -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   "=" -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   "[" -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   "{" -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   "}" -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   r#"\"[^\"]*\""# -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   r#"$[$0-9]+"# -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   r#"\'.\'"# -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   r#"[0-9]+"# -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //
    pub fn __state86<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action39(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::UnpairedToken(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 87
    //   UnpairedToken = ";" (*) ["("]
    //   UnpairedToken = ";" (*) ["*"]
    //   UnpairedToken = ";" (*) [","]
    //   UnpairedToken = ";" (*) ["."]
    //   UnpairedToken = ";" (*) [";"]
    //   UnpairedToken = ";" (*) ["="]
    //   UnpairedToken = ";" (*) ["["]
    //   UnpairedToken = ";" (*) ["{"]
    //   UnpairedToken = ";" (*) ["}"]
    //   UnpairedToken = ";" (*) [r#"\"[^\"]*\""#]
    //   UnpairedToken = ";" (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = ";" (*) [r#"$[$0-9]+"#]
    //   UnpairedToken = ";" (*) [r#"\'.\'"#]
    //   UnpairedToken = ";" (*) [r#"[0-9]+"#]
    //   UnpairedToken = ";" (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   "*" -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   "," -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   "." -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   ";" -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   "=" -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   "[" -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   "{" -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   "}" -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   r#"\"[^\"]*\""# -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   r#"$[$0-9]+"# -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   r#"\'.\'"# -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   r#"[0-9]+"# -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //
    pub fn __state87<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action42(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::UnpairedToken(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 88
    //   UnpairedToken = "=" (*) ["("]
    //   UnpairedToken = "=" (*) ["*"]
    //   UnpairedToken = "=" (*) [","]
    //   UnpairedToken = "=" (*) ["."]
    //   UnpairedToken = "=" (*) [";"]
    //   UnpairedToken = "=" (*) ["="]
    //   UnpairedToken = "=" (*) ["["]
    //   UnpairedToken = "=" (*) ["{"]
    //   UnpairedToken = "=" (*) ["}"]
    //   UnpairedToken = "=" (*) [r#"\"[^\"]*\""#]
    //   UnpairedToken = "=" (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = "=" (*) [r#"$[$0-9]+"#]
    //   UnpairedToken = "=" (*) [r#"\'.\'"#]
    //   UnpairedToken = "=" (*) [r#"[0-9]+"#]
    //   UnpairedToken = "=" (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   "*" -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   "," -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   "." -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   ";" -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   "=" -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   "[" -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   "{" -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   "}" -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   r#"\"[^\"]*\""# -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   r#"$[$0-9]+"# -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   r#"\'.\'"# -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   r#"[0-9]+"# -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //
    pub fn __state88<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action41(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::UnpairedToken(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 89
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["("]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["*"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [","]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["."]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [";"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["="]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["["]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["]"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["{"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\"[^\"]*\""#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"$[$0-9]+"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[0-9]+"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Integer = (*) r#"[0-9]+"# ["("]
    //   Integer = (*) r#"[0-9]+"# ["*"]
    //   Integer = (*) r#"[0-9]+"# [","]
    //   Integer = (*) r#"[0-9]+"# ["."]
    //   Integer = (*) r#"[0-9]+"# [";"]
    //   Integer = (*) r#"[0-9]+"# ["="]
    //   Integer = (*) r#"[0-9]+"# ["["]
    //   Integer = (*) r#"[0-9]+"# ["]"]
    //   Integer = (*) r#"[0-9]+"# ["{"]
    //   Integer = (*) r#"[0-9]+"# [r#"\"[^\"]*\""#]
    //   Integer = (*) r#"[0-9]+"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Integer = (*) r#"[0-9]+"# [r#"$[$0-9]+"#]
    //   Integer = (*) r#"[0-9]+"# [r#"\'.\'"#]
    //   Integer = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Integer = (*) r#"[0-9]+"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) UnpairedToken ["("]
    //   TokenTree = (*) UnpairedToken ["*"]
    //   TokenTree = (*) UnpairedToken [","]
    //   TokenTree = (*) UnpairedToken ["."]
    //   TokenTree = (*) UnpairedToken [";"]
    //   TokenTree = (*) UnpairedToken ["="]
    //   TokenTree = (*) UnpairedToken ["["]
    //   TokenTree = (*) UnpairedToken ["]"]
    //   TokenTree = (*) UnpairedToken ["{"]
    //   TokenTree = (*) UnpairedToken [r#"\"[^\"]*\""#]
    //   TokenTree = (*) UnpairedToken [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) UnpairedToken [r#"$[$0-9]+"#]
    //   TokenTree = (*) UnpairedToken [r#"\'.\'"#]
    //   TokenTree = (*) UnpairedToken [r#"[0-9]+"#]
    //   TokenTree = (*) UnpairedToken [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" TokenTree+ ")" ["("]
    //   TokenTree = (*) "(" TokenTree+ ")" ["*"]
    //   TokenTree = (*) "(" TokenTree+ ")" [","]
    //   TokenTree = (*) "(" TokenTree+ ")" ["."]
    //   TokenTree = (*) "(" TokenTree+ ")" [";"]
    //   TokenTree = (*) "(" TokenTree+ ")" ["="]
    //   TokenTree = (*) "(" TokenTree+ ")" ["["]
    //   TokenTree = (*) "(" TokenTree+ ")" ["]"]
    //   TokenTree = (*) "(" TokenTree+ ")" ["{"]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"\'.\'"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"[0-9]+"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" ")" ["("]
    //   TokenTree = (*) "(" ")" ["*"]
    //   TokenTree = (*) "(" ")" [","]
    //   TokenTree = (*) "(" ")" ["."]
    //   TokenTree = (*) "(" ")" [";"]
    //   TokenTree = (*) "(" ")" ["="]
    //   TokenTree = (*) "(" ")" ["["]
    //   TokenTree = (*) "(" ")" ["]"]
    //   TokenTree = (*) "(" ")" ["{"]
    //   TokenTree = (*) "(" ")" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "(" ")" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" ")" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "(" ")" [r#"\'.\'"#]
    //   TokenTree = (*) "(" ")" [r#"[0-9]+"#]
    //   TokenTree = (*) "(" ")" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" TokenTree+ "]" ["("]
    //   TokenTree = (*) "[" TokenTree+ "]" ["*"]
    //   TokenTree = (*) "[" TokenTree+ "]" [","]
    //   TokenTree = (*) "[" TokenTree+ "]" ["."]
    //   TokenTree = (*) "[" TokenTree+ "]" [";"]
    //   TokenTree = (*) "[" TokenTree+ "]" ["="]
    //   TokenTree = (*) "[" TokenTree+ "]" ["["]
    //   TokenTree = (*) "[" TokenTree+ "]" ["]"]
    //   TokenTree = (*) "[" TokenTree+ "]" ["{"]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"\'.\'"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"[0-9]+"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "[" (*) TokenTree+ "]" ["("]
    //   TokenTree = "[" (*) TokenTree+ "]" ["*"]
    //   TokenTree = "[" (*) TokenTree+ "]" [","]
    //   TokenTree = "[" (*) TokenTree+ "]" ["."]
    //   TokenTree = "[" (*) TokenTree+ "]" [";"]
    //   TokenTree = "[" (*) TokenTree+ "]" ["="]
    //   TokenTree = "[" (*) TokenTree+ "]" ["["]
    //   TokenTree = "[" (*) TokenTree+ "]" ["{"]
    //   TokenTree = "[" (*) TokenTree+ "]" ["}"]
    //   TokenTree = "[" (*) TokenTree+ "]" [r#"\"[^\"]*\""#]
    //   TokenTree = "[" (*) TokenTree+ "]" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "[" (*) TokenTree+ "]" [r#"$[$0-9]+"#]
    //   TokenTree = "[" (*) TokenTree+ "]" [r#"\'.\'"#]
    //   TokenTree = "[" (*) TokenTree+ "]" [r#"[0-9]+"#]
    //   TokenTree = "[" (*) TokenTree+ "]" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" "]" ["("]
    //   TokenTree = (*) "[" "]" ["*"]
    //   TokenTree = (*) "[" "]" [","]
    //   TokenTree = (*) "[" "]" ["."]
    //   TokenTree = (*) "[" "]" [";"]
    //   TokenTree = (*) "[" "]" ["="]
    //   TokenTree = (*) "[" "]" ["["]
    //   TokenTree = (*) "[" "]" ["]"]
    //   TokenTree = (*) "[" "]" ["{"]
    //   TokenTree = (*) "[" "]" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "[" "]" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" "]" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "[" "]" [r#"\'.\'"#]
    //   TokenTree = (*) "[" "]" [r#"[0-9]+"#]
    //   TokenTree = (*) "[" "]" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "[" (*) "]" ["("]
    //   TokenTree = "[" (*) "]" ["*"]
    //   TokenTree = "[" (*) "]" [","]
    //   TokenTree = "[" (*) "]" ["."]
    //   TokenTree = "[" (*) "]" [";"]
    //   TokenTree = "[" (*) "]" ["="]
    //   TokenTree = "[" (*) "]" ["["]
    //   TokenTree = "[" (*) "]" ["{"]
    //   TokenTree = "[" (*) "]" ["}"]
    //   TokenTree = "[" (*) "]" [r#"\"[^\"]*\""#]
    //   TokenTree = "[" (*) "]" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "[" (*) "]" [r#"$[$0-9]+"#]
    //   TokenTree = "[" (*) "]" [r#"\'.\'"#]
    //   TokenTree = "[" (*) "]" [r#"[0-9]+"#]
    //   TokenTree = "[" (*) "]" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" TokenTree+ "}" ["("]
    //   TokenTree = (*) "{" TokenTree+ "}" ["*"]
    //   TokenTree = (*) "{" TokenTree+ "}" [","]
    //   TokenTree = (*) "{" TokenTree+ "}" ["."]
    //   TokenTree = (*) "{" TokenTree+ "}" [";"]
    //   TokenTree = (*) "{" TokenTree+ "}" ["="]
    //   TokenTree = (*) "{" TokenTree+ "}" ["["]
    //   TokenTree = (*) "{" TokenTree+ "}" ["]"]
    //   TokenTree = (*) "{" TokenTree+ "}" ["{"]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"\'.\'"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"[0-9]+"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" "}" ["("]
    //   TokenTree = (*) "{" "}" ["*"]
    //   TokenTree = (*) "{" "}" [","]
    //   TokenTree = (*) "{" "}" ["."]
    //   TokenTree = (*) "{" "}" [";"]
    //   TokenTree = (*) "{" "}" ["="]
    //   TokenTree = (*) "{" "}" ["["]
    //   TokenTree = (*) "{" "}" ["]"]
    //   TokenTree = (*) "{" "}" ["{"]
    //   TokenTree = (*) "{" "}" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "{" "}" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" "}" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "{" "}" [r#"\'.\'"#]
    //   TokenTree = (*) "{" "}" [r#"[0-9]+"#]
    //   TokenTree = (*) "{" "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = (*) TokenTree ["("]
    //   TokenTree+ = (*) TokenTree ["*"]
    //   TokenTree+ = (*) TokenTree [","]
    //   TokenTree+ = (*) TokenTree ["."]
    //   TokenTree+ = (*) TokenTree [";"]
    //   TokenTree+ = (*) TokenTree ["="]
    //   TokenTree+ = (*) TokenTree ["["]
    //   TokenTree+ = (*) TokenTree ["]"]
    //   TokenTree+ = (*) TokenTree ["{"]
    //   TokenTree+ = (*) TokenTree [r#"\"[^\"]*\""#]
    //   TokenTree+ = (*) TokenTree [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = (*) TokenTree [r#"$[$0-9]+"#]
    //   TokenTree+ = (*) TokenTree [r#"\'.\'"#]
    //   TokenTree+ = (*) TokenTree [r#"[0-9]+"#]
    //   TokenTree+ = (*) TokenTree [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["("]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["*"]
    //   TokenTree+ = (*) TokenTree+ TokenTree [","]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["."]
    //   TokenTree+ = (*) TokenTree+ TokenTree [";"]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["="]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["["]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["]"]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["{"]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"\"[^\"]*\""#]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"$[$0-9]+"#]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"\'.\'"#]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"[0-9]+"#]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Ident ["("]
    //   UnpairedToken = (*) Ident ["*"]
    //   UnpairedToken = (*) Ident [","]
    //   UnpairedToken = (*) Ident ["."]
    //   UnpairedToken = (*) Ident [";"]
    //   UnpairedToken = (*) Ident ["="]
    //   UnpairedToken = (*) Ident ["["]
    //   UnpairedToken = (*) Ident ["]"]
    //   UnpairedToken = (*) Ident ["{"]
    //   UnpairedToken = (*) Ident [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) Ident [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Ident [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) Ident [r#"\'.\'"#]
    //   UnpairedToken = (*) Ident [r#"[0-9]+"#]
    //   UnpairedToken = (*) Ident [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Integer ["("]
    //   UnpairedToken = (*) Integer ["*"]
    //   UnpairedToken = (*) Integer [","]
    //   UnpairedToken = (*) Integer ["."]
    //   UnpairedToken = (*) Integer [";"]
    //   UnpairedToken = (*) Integer ["="]
    //   UnpairedToken = (*) Integer ["["]
    //   UnpairedToken = (*) Integer ["]"]
    //   UnpairedToken = (*) Integer ["{"]
    //   UnpairedToken = (*) Integer [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) Integer [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Integer [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) Integer [r#"\'.\'"#]
    //   UnpairedToken = (*) Integer [r#"[0-9]+"#]
    //   UnpairedToken = (*) Integer [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "*" ["("]
    //   UnpairedToken = (*) "*" ["*"]
    //   UnpairedToken = (*) "*" [","]
    //   UnpairedToken = (*) "*" ["."]
    //   UnpairedToken = (*) "*" [";"]
    //   UnpairedToken = (*) "*" ["="]
    //   UnpairedToken = (*) "*" ["["]
    //   UnpairedToken = (*) "*" ["]"]
    //   UnpairedToken = (*) "*" ["{"]
    //   UnpairedToken = (*) "*" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "*" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "*" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "*" [r#"\'.\'"#]
    //   UnpairedToken = (*) "*" [r#"[0-9]+"#]
    //   UnpairedToken = (*) "*" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "," ["("]
    //   UnpairedToken = (*) "," ["*"]
    //   UnpairedToken = (*) "," [","]
    //   UnpairedToken = (*) "," ["."]
    //   UnpairedToken = (*) "," [";"]
    //   UnpairedToken = (*) "," ["="]
    //   UnpairedToken = (*) "," ["["]
    //   UnpairedToken = (*) "," ["]"]
    //   UnpairedToken = (*) "," ["{"]
    //   UnpairedToken = (*) "," [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "," [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "," [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "," [r#"\'.\'"#]
    //   UnpairedToken = (*) "," [r#"[0-9]+"#]
    //   UnpairedToken = (*) "," [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "." ["("]
    //   UnpairedToken = (*) "." ["*"]
    //   UnpairedToken = (*) "." [","]
    //   UnpairedToken = (*) "." ["."]
    //   UnpairedToken = (*) "." [";"]
    //   UnpairedToken = (*) "." ["="]
    //   UnpairedToken = (*) "." ["["]
    //   UnpairedToken = (*) "." ["]"]
    //   UnpairedToken = (*) "." ["{"]
    //   UnpairedToken = (*) "." [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "." [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "." [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "." [r#"\'.\'"#]
    //   UnpairedToken = (*) "." [r#"[0-9]+"#]
    //   UnpairedToken = (*) "." [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) ";" ["("]
    //   UnpairedToken = (*) ";" ["*"]
    //   UnpairedToken = (*) ";" [","]
    //   UnpairedToken = (*) ";" ["."]
    //   UnpairedToken = (*) ";" [";"]
    //   UnpairedToken = (*) ";" ["="]
    //   UnpairedToken = (*) ";" ["["]
    //   UnpairedToken = (*) ";" ["]"]
    //   UnpairedToken = (*) ";" ["{"]
    //   UnpairedToken = (*) ";" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) ";" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) ";" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) ";" [r#"\'.\'"#]
    //   UnpairedToken = (*) ";" [r#"[0-9]+"#]
    //   UnpairedToken = (*) ";" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "=" ["("]
    //   UnpairedToken = (*) "=" ["*"]
    //   UnpairedToken = (*) "=" [","]
    //   UnpairedToken = (*) "=" ["."]
    //   UnpairedToken = (*) "=" [";"]
    //   UnpairedToken = (*) "=" ["="]
    //   UnpairedToken = (*) "=" ["["]
    //   UnpairedToken = (*) "=" ["]"]
    //   UnpairedToken = (*) "=" ["{"]
    //   UnpairedToken = (*) "=" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "=" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "=" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "=" [r#"\'.\'"#]
    //   UnpairedToken = (*) "=" [r#"[0-9]+"#]
    //   UnpairedToken = (*) "=" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["("]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["*"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [","]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["."]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [";"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["="]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["["]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["]"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["{"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["("]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["*"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [","]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["."]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [";"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["="]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["["]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["]"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["{"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["("]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["*"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [","]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["."]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [";"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["="]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["["]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["]"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["{"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\'.\'"# ["("]
    //   UnpairedToken = (*) r#"\'.\'"# ["*"]
    //   UnpairedToken = (*) r#"\'.\'"# [","]
    //   UnpairedToken = (*) r#"\'.\'"# ["."]
    //   UnpairedToken = (*) r#"\'.\'"# [";"]
    //   UnpairedToken = (*) r#"\'.\'"# ["="]
    //   UnpairedToken = (*) r#"\'.\'"# ["["]
    //   UnpairedToken = (*) r#"\'.\'"# ["]"]
    //   UnpairedToken = (*) r#"\'.\'"# ["{"]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Shift(S126)
    //   "*" -> Shift(S127)
    //   "," -> Shift(S128)
    //   "." -> Shift(S129)
    //   ";" -> Shift(S130)
    //   "=" -> Shift(S131)
    //   "[" -> Shift(S132)
    //   "]" -> Shift(S133)
    //   "{" -> Shift(S134)
    //   r#"\"[^\"]*\""# -> Shift(S135)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S136)
    //   r#"$[$0-9]+"# -> Shift(S137)
    //   r#"\'.\'"# -> Shift(S138)
    //   r#"[0-9]+"# -> Shift(S139)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S140)
    //
    //   Ident -> S121
    //   Integer -> S122
    //   TokenTree -> S123
    //   TokenTree+ -> S124
    //   UnpairedToken -> S125
    pub fn __state89<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state126(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state127(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state128(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (17, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state129(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state130(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state131(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state132(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (22, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state133(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state134(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state135(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state136(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state137(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state138(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state139(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (31, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state140(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ident(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state121(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Integer(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state122(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::TokenTree(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state123(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::TokenTree_2b(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state124(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::UnpairedToken(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state125(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 90
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["("]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["*"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [","]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["."]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [";"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["="]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["["]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["{"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["}"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\"[^\"]*\""#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"$[$0-9]+"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[0-9]+"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Integer = (*) r#"[0-9]+"# ["("]
    //   Integer = (*) r#"[0-9]+"# ["*"]
    //   Integer = (*) r#"[0-9]+"# [","]
    //   Integer = (*) r#"[0-9]+"# ["."]
    //   Integer = (*) r#"[0-9]+"# [";"]
    //   Integer = (*) r#"[0-9]+"# ["="]
    //   Integer = (*) r#"[0-9]+"# ["["]
    //   Integer = (*) r#"[0-9]+"# ["{"]
    //   Integer = (*) r#"[0-9]+"# ["}"]
    //   Integer = (*) r#"[0-9]+"# [r#"\"[^\"]*\""#]
    //   Integer = (*) r#"[0-9]+"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Integer = (*) r#"[0-9]+"# [r#"$[$0-9]+"#]
    //   Integer = (*) r#"[0-9]+"# [r#"\'.\'"#]
    //   Integer = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Integer = (*) r#"[0-9]+"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) UnpairedToken ["("]
    //   TokenTree = (*) UnpairedToken ["*"]
    //   TokenTree = (*) UnpairedToken [","]
    //   TokenTree = (*) UnpairedToken ["."]
    //   TokenTree = (*) UnpairedToken [";"]
    //   TokenTree = (*) UnpairedToken ["="]
    //   TokenTree = (*) UnpairedToken ["["]
    //   TokenTree = (*) UnpairedToken ["{"]
    //   TokenTree = (*) UnpairedToken ["}"]
    //   TokenTree = (*) UnpairedToken [r#"\"[^\"]*\""#]
    //   TokenTree = (*) UnpairedToken [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) UnpairedToken [r#"$[$0-9]+"#]
    //   TokenTree = (*) UnpairedToken [r#"\'.\'"#]
    //   TokenTree = (*) UnpairedToken [r#"[0-9]+"#]
    //   TokenTree = (*) UnpairedToken [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" TokenTree+ ")" ["("]
    //   TokenTree = (*) "(" TokenTree+ ")" ["*"]
    //   TokenTree = (*) "(" TokenTree+ ")" [","]
    //   TokenTree = (*) "(" TokenTree+ ")" ["."]
    //   TokenTree = (*) "(" TokenTree+ ")" [";"]
    //   TokenTree = (*) "(" TokenTree+ ")" ["="]
    //   TokenTree = (*) "(" TokenTree+ ")" ["["]
    //   TokenTree = (*) "(" TokenTree+ ")" ["{"]
    //   TokenTree = (*) "(" TokenTree+ ")" ["}"]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"\'.\'"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"[0-9]+"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" ")" ["("]
    //   TokenTree = (*) "(" ")" ["*"]
    //   TokenTree = (*) "(" ")" [","]
    //   TokenTree = (*) "(" ")" ["."]
    //   TokenTree = (*) "(" ")" [";"]
    //   TokenTree = (*) "(" ")" ["="]
    //   TokenTree = (*) "(" ")" ["["]
    //   TokenTree = (*) "(" ")" ["{"]
    //   TokenTree = (*) "(" ")" ["}"]
    //   TokenTree = (*) "(" ")" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "(" ")" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" ")" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "(" ")" [r#"\'.\'"#]
    //   TokenTree = (*) "(" ")" [r#"[0-9]+"#]
    //   TokenTree = (*) "(" ")" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" TokenTree+ "]" ["("]
    //   TokenTree = (*) "[" TokenTree+ "]" ["*"]
    //   TokenTree = (*) "[" TokenTree+ "]" [","]
    //   TokenTree = (*) "[" TokenTree+ "]" ["."]
    //   TokenTree = (*) "[" TokenTree+ "]" [";"]
    //   TokenTree = (*) "[" TokenTree+ "]" ["="]
    //   TokenTree = (*) "[" TokenTree+ "]" ["["]
    //   TokenTree = (*) "[" TokenTree+ "]" ["{"]
    //   TokenTree = (*) "[" TokenTree+ "]" ["}"]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"\'.\'"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"[0-9]+"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" "]" ["("]
    //   TokenTree = (*) "[" "]" ["*"]
    //   TokenTree = (*) "[" "]" [","]
    //   TokenTree = (*) "[" "]" ["."]
    //   TokenTree = (*) "[" "]" [";"]
    //   TokenTree = (*) "[" "]" ["="]
    //   TokenTree = (*) "[" "]" ["["]
    //   TokenTree = (*) "[" "]" ["{"]
    //   TokenTree = (*) "[" "]" ["}"]
    //   TokenTree = (*) "[" "]" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "[" "]" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" "]" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "[" "]" [r#"\'.\'"#]
    //   TokenTree = (*) "[" "]" [r#"[0-9]+"#]
    //   TokenTree = (*) "[" "]" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" TokenTree+ "}" ["("]
    //   TokenTree = (*) "{" TokenTree+ "}" ["*"]
    //   TokenTree = (*) "{" TokenTree+ "}" [","]
    //   TokenTree = (*) "{" TokenTree+ "}" ["."]
    //   TokenTree = (*) "{" TokenTree+ "}" [";"]
    //   TokenTree = (*) "{" TokenTree+ "}" ["="]
    //   TokenTree = (*) "{" TokenTree+ "}" ["["]
    //   TokenTree = (*) "{" TokenTree+ "}" ["{"]
    //   TokenTree = (*) "{" TokenTree+ "}" ["}"]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"\'.\'"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"[0-9]+"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "{" (*) TokenTree+ "}" ["("]
    //   TokenTree = "{" (*) TokenTree+ "}" ["*"]
    //   TokenTree = "{" (*) TokenTree+ "}" [","]
    //   TokenTree = "{" (*) TokenTree+ "}" ["."]
    //   TokenTree = "{" (*) TokenTree+ "}" [";"]
    //   TokenTree = "{" (*) TokenTree+ "}" ["="]
    //   TokenTree = "{" (*) TokenTree+ "}" ["["]
    //   TokenTree = "{" (*) TokenTree+ "}" ["{"]
    //   TokenTree = "{" (*) TokenTree+ "}" ["}"]
    //   TokenTree = "{" (*) TokenTree+ "}" [r#"\"[^\"]*\""#]
    //   TokenTree = "{" (*) TokenTree+ "}" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "{" (*) TokenTree+ "}" [r#"$[$0-9]+"#]
    //   TokenTree = "{" (*) TokenTree+ "}" [r#"\'.\'"#]
    //   TokenTree = "{" (*) TokenTree+ "}" [r#"[0-9]+"#]
    //   TokenTree = "{" (*) TokenTree+ "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" "}" ["("]
    //   TokenTree = (*) "{" "}" ["*"]
    //   TokenTree = (*) "{" "}" [","]
    //   TokenTree = (*) "{" "}" ["."]
    //   TokenTree = (*) "{" "}" [";"]
    //   TokenTree = (*) "{" "}" ["="]
    //   TokenTree = (*) "{" "}" ["["]
    //   TokenTree = (*) "{" "}" ["{"]
    //   TokenTree = (*) "{" "}" ["}"]
    //   TokenTree = (*) "{" "}" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "{" "}" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" "}" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "{" "}" [r#"\'.\'"#]
    //   TokenTree = (*) "{" "}" [r#"[0-9]+"#]
    //   TokenTree = (*) "{" "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "{" (*) "}" ["("]
    //   TokenTree = "{" (*) "}" ["*"]
    //   TokenTree = "{" (*) "}" [","]
    //   TokenTree = "{" (*) "}" ["."]
    //   TokenTree = "{" (*) "}" [";"]
    //   TokenTree = "{" (*) "}" ["="]
    //   TokenTree = "{" (*) "}" ["["]
    //   TokenTree = "{" (*) "}" ["{"]
    //   TokenTree = "{" (*) "}" ["}"]
    //   TokenTree = "{" (*) "}" [r#"\"[^\"]*\""#]
    //   TokenTree = "{" (*) "}" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "{" (*) "}" [r#"$[$0-9]+"#]
    //   TokenTree = "{" (*) "}" [r#"\'.\'"#]
    //   TokenTree = "{" (*) "}" [r#"[0-9]+"#]
    //   TokenTree = "{" (*) "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = (*) TokenTree ["("]
    //   TokenTree+ = (*) TokenTree ["*"]
    //   TokenTree+ = (*) TokenTree [","]
    //   TokenTree+ = (*) TokenTree ["."]
    //   TokenTree+ = (*) TokenTree [";"]
    //   TokenTree+ = (*) TokenTree ["="]
    //   TokenTree+ = (*) TokenTree ["["]
    //   TokenTree+ = (*) TokenTree ["{"]
    //   TokenTree+ = (*) TokenTree ["}"]
    //   TokenTree+ = (*) TokenTree [r#"\"[^\"]*\""#]
    //   TokenTree+ = (*) TokenTree [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = (*) TokenTree [r#"$[$0-9]+"#]
    //   TokenTree+ = (*) TokenTree [r#"\'.\'"#]
    //   TokenTree+ = (*) TokenTree [r#"[0-9]+"#]
    //   TokenTree+ = (*) TokenTree [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["("]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["*"]
    //   TokenTree+ = (*) TokenTree+ TokenTree [","]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["."]
    //   TokenTree+ = (*) TokenTree+ TokenTree [";"]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["="]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["["]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["{"]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["}"]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"\"[^\"]*\""#]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"$[$0-9]+"#]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"\'.\'"#]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"[0-9]+"#]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Ident ["("]
    //   UnpairedToken = (*) Ident ["*"]
    //   UnpairedToken = (*) Ident [","]
    //   UnpairedToken = (*) Ident ["."]
    //   UnpairedToken = (*) Ident [";"]
    //   UnpairedToken = (*) Ident ["="]
    //   UnpairedToken = (*) Ident ["["]
    //   UnpairedToken = (*) Ident ["{"]
    //   UnpairedToken = (*) Ident ["}"]
    //   UnpairedToken = (*) Ident [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) Ident [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Ident [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) Ident [r#"\'.\'"#]
    //   UnpairedToken = (*) Ident [r#"[0-9]+"#]
    //   UnpairedToken = (*) Ident [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Integer ["("]
    //   UnpairedToken = (*) Integer ["*"]
    //   UnpairedToken = (*) Integer [","]
    //   UnpairedToken = (*) Integer ["."]
    //   UnpairedToken = (*) Integer [";"]
    //   UnpairedToken = (*) Integer ["="]
    //   UnpairedToken = (*) Integer ["["]
    //   UnpairedToken = (*) Integer ["{"]
    //   UnpairedToken = (*) Integer ["}"]
    //   UnpairedToken = (*) Integer [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) Integer [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Integer [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) Integer [r#"\'.\'"#]
    //   UnpairedToken = (*) Integer [r#"[0-9]+"#]
    //   UnpairedToken = (*) Integer [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "*" ["("]
    //   UnpairedToken = (*) "*" ["*"]
    //   UnpairedToken = (*) "*" [","]
    //   UnpairedToken = (*) "*" ["."]
    //   UnpairedToken = (*) "*" [";"]
    //   UnpairedToken = (*) "*" ["="]
    //   UnpairedToken = (*) "*" ["["]
    //   UnpairedToken = (*) "*" ["{"]
    //   UnpairedToken = (*) "*" ["}"]
    //   UnpairedToken = (*) "*" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "*" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "*" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "*" [r#"\'.\'"#]
    //   UnpairedToken = (*) "*" [r#"[0-9]+"#]
    //   UnpairedToken = (*) "*" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "," ["("]
    //   UnpairedToken = (*) "," ["*"]
    //   UnpairedToken = (*) "," [","]
    //   UnpairedToken = (*) "," ["."]
    //   UnpairedToken = (*) "," [";"]
    //   UnpairedToken = (*) "," ["="]
    //   UnpairedToken = (*) "," ["["]
    //   UnpairedToken = (*) "," ["{"]
    //   UnpairedToken = (*) "," ["}"]
    //   UnpairedToken = (*) "," [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "," [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "," [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "," [r#"\'.\'"#]
    //   UnpairedToken = (*) "," [r#"[0-9]+"#]
    //   UnpairedToken = (*) "," [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "." ["("]
    //   UnpairedToken = (*) "." ["*"]
    //   UnpairedToken = (*) "." [","]
    //   UnpairedToken = (*) "." ["."]
    //   UnpairedToken = (*) "." [";"]
    //   UnpairedToken = (*) "." ["="]
    //   UnpairedToken = (*) "." ["["]
    //   UnpairedToken = (*) "." ["{"]
    //   UnpairedToken = (*) "." ["}"]
    //   UnpairedToken = (*) "." [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "." [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "." [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "." [r#"\'.\'"#]
    //   UnpairedToken = (*) "." [r#"[0-9]+"#]
    //   UnpairedToken = (*) "." [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) ";" ["("]
    //   UnpairedToken = (*) ";" ["*"]
    //   UnpairedToken = (*) ";" [","]
    //   UnpairedToken = (*) ";" ["."]
    //   UnpairedToken = (*) ";" [";"]
    //   UnpairedToken = (*) ";" ["="]
    //   UnpairedToken = (*) ";" ["["]
    //   UnpairedToken = (*) ";" ["{"]
    //   UnpairedToken = (*) ";" ["}"]
    //   UnpairedToken = (*) ";" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) ";" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) ";" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) ";" [r#"\'.\'"#]
    //   UnpairedToken = (*) ";" [r#"[0-9]+"#]
    //   UnpairedToken = (*) ";" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "=" ["("]
    //   UnpairedToken = (*) "=" ["*"]
    //   UnpairedToken = (*) "=" [","]
    //   UnpairedToken = (*) "=" ["."]
    //   UnpairedToken = (*) "=" [";"]
    //   UnpairedToken = (*) "=" ["="]
    //   UnpairedToken = (*) "=" ["["]
    //   UnpairedToken = (*) "=" ["{"]
    //   UnpairedToken = (*) "=" ["}"]
    //   UnpairedToken = (*) "=" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "=" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "=" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "=" [r#"\'.\'"#]
    //   UnpairedToken = (*) "=" [r#"[0-9]+"#]
    //   UnpairedToken = (*) "=" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["("]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["*"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [","]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["."]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [";"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["="]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["["]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["{"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["}"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["("]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["*"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [","]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["."]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [";"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["="]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["["]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["{"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["}"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["("]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["*"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [","]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["."]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [";"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["="]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["["]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["{"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["}"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\'.\'"# ["("]
    //   UnpairedToken = (*) r#"\'.\'"# ["*"]
    //   UnpairedToken = (*) r#"\'.\'"# [","]
    //   UnpairedToken = (*) r#"\'.\'"# ["."]
    //   UnpairedToken = (*) r#"\'.\'"# [";"]
    //   UnpairedToken = (*) r#"\'.\'"# ["="]
    //   UnpairedToken = (*) r#"\'.\'"# ["["]
    //   UnpairedToken = (*) r#"\'.\'"# ["{"]
    //   UnpairedToken = (*) r#"\'.\'"# ["}"]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Shift(S83)
    //   "*" -> Shift(S84)
    //   "," -> Shift(S85)
    //   "." -> Shift(S86)
    //   ";" -> Shift(S87)
    //   "=" -> Shift(S88)
    //   "[" -> Shift(S89)
    //   "{" -> Shift(S90)
    //   "}" -> Shift(S142)
    //   r#"\"[^\"]*\""# -> Shift(S92)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S93)
    //   r#"$[$0-9]+"# -> Shift(S94)
    //   r#"\'.\'"# -> Shift(S95)
    //   r#"[0-9]+"# -> Shift(S96)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S97)
    //
    //   Ident -> S78
    //   Integer -> S79
    //   TokenTree -> S80
    //   TokenTree+ -> S141
    //   UnpairedToken -> S82
    pub fn __state90<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state83(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state84(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state85(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (17, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state86(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state87(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state88(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state89(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state90(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state142(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state92(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state93(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state94(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state95(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state96(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (31, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state97(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ident(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state78(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Integer(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state79(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::TokenTree(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state80(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::TokenTree_2b(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state141(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::UnpairedToken(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state82(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 91
    //   ActionCode = "{" "}" (*) ["%empty"]
    //   ActionCode = "{" "}" (*) ["%prec"]
    //   ActionCode = "{" "}" (*) [";"]
    //   ActionCode = "{" "}" (*) ["{"]
    //   ActionCode = "{" "}" (*) ["|"]
    //   ActionCode = "{" "}" (*) [r#"\'.\'"#]
    //   ActionCode = "{" "}" (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "%empty" -> Reduce(ActionCode = "{", "}" => ActionFn(73);)
    //   "%prec" -> Reduce(ActionCode = "{", "}" => ActionFn(73);)
    //   ";" -> Reduce(ActionCode = "{", "}" => ActionFn(73);)
    //   "{" -> Reduce(ActionCode = "{", "}" => ActionFn(73);)
    //   "|" -> Reduce(ActionCode = "{", "}" => ActionFn(73);)
    //   r#"\'.\'"# -> Reduce(ActionCode = "{", "}" => ActionFn(73);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(ActionCode = "{", "}" => ActionFn(73);)
    //
    pub fn __state91<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (6, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (24, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action73(input, __sym0, __sym1, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::ActionCode(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 92
    //   UnpairedToken = r#"\"[^\"]*\""# (*) ["("]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) ["*"]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) [","]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) ["."]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) [";"]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) ["="]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) ["["]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) ["{"]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) ["}"]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) [r#"\"[^\"]*\""#]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) [r#"$[$0-9]+"#]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) [r#"\'.\'"#]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) [r#"[0-9]+"#]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   "*" -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   "," -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   "." -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   ";" -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   "=" -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   "[" -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   "{" -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   "}" -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   r#"\"[^\"]*\""# -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   r#"$[$0-9]+"# -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   r#"\'.\'"# -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   r#"[0-9]+"# -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //
    pub fn __state92<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action38(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::UnpairedToken(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 93
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["("]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["*"]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) [","]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["."]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) [";"]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["="]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["["]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["{"]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["}"]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) [r#"\"[^\"]*\""#]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) [r#"$[$0-9]+"#]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) [r#"\'.\'"#]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) [r#"[0-9]+"#]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   "*" -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   "," -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   "." -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   ";" -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   "=" -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   "[" -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   "{" -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   "}" -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   r#"\"[^\"]*\""# -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   r#"$[$0-9]+"# -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   r#"\'.\'"# -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   r#"[0-9]+"# -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //
    pub fn __state93<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action44(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::UnpairedToken(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 94
    //   UnpairedToken = r#"$[$0-9]+"# (*) ["("]
    //   UnpairedToken = r#"$[$0-9]+"# (*) ["*"]
    //   UnpairedToken = r#"$[$0-9]+"# (*) [","]
    //   UnpairedToken = r#"$[$0-9]+"# (*) ["."]
    //   UnpairedToken = r#"$[$0-9]+"# (*) [";"]
    //   UnpairedToken = r#"$[$0-9]+"# (*) ["="]
    //   UnpairedToken = r#"$[$0-9]+"# (*) ["["]
    //   UnpairedToken = r#"$[$0-9]+"# (*) ["{"]
    //   UnpairedToken = r#"$[$0-9]+"# (*) ["}"]
    //   UnpairedToken = r#"$[$0-9]+"# (*) [r#"\"[^\"]*\""#]
    //   UnpairedToken = r#"$[$0-9]+"# (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = r#"$[$0-9]+"# (*) [r#"$[$0-9]+"#]
    //   UnpairedToken = r#"$[$0-9]+"# (*) [r#"\'.\'"#]
    //   UnpairedToken = r#"$[$0-9]+"# (*) [r#"[0-9]+"#]
    //   UnpairedToken = r#"$[$0-9]+"# (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   "*" -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   "," -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   "." -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   ";" -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   "=" -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   "[" -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   "{" -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   "}" -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   r#"\"[^\"]*\""# -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   r#"$[$0-9]+"# -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   r#"\'.\'"# -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   r#"[0-9]+"# -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //
    pub fn __state94<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action43(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::UnpairedToken(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 95
    //   UnpairedToken = r#"\'.\'"# (*) ["("]
    //   UnpairedToken = r#"\'.\'"# (*) ["*"]
    //   UnpairedToken = r#"\'.\'"# (*) [","]
    //   UnpairedToken = r#"\'.\'"# (*) ["."]
    //   UnpairedToken = r#"\'.\'"# (*) [";"]
    //   UnpairedToken = r#"\'.\'"# (*) ["="]
    //   UnpairedToken = r#"\'.\'"# (*) ["["]
    //   UnpairedToken = r#"\'.\'"# (*) ["{"]
    //   UnpairedToken = r#"\'.\'"# (*) ["}"]
    //   UnpairedToken = r#"\'.\'"# (*) [r#"\"[^\"]*\""#]
    //   UnpairedToken = r#"\'.\'"# (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = r#"\'.\'"# (*) [r#"$[$0-9]+"#]
    //   UnpairedToken = r#"\'.\'"# (*) [r#"\'.\'"#]
    //   UnpairedToken = r#"\'.\'"# (*) [r#"[0-9]+"#]
    //   UnpairedToken = r#"\'.\'"# (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   "*" -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   "," -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   "." -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   ";" -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   "=" -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   "[" -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   "{" -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   "}" -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   r#"\"[^\"]*\""# -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   r#"$[$0-9]+"# -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   r#"\'.\'"# -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   r#"[0-9]+"# -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //
    pub fn __state95<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action46(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::UnpairedToken(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 96
    //   Integer = r#"[0-9]+"# (*) ["("]
    //   Integer = r#"[0-9]+"# (*) ["*"]
    //   Integer = r#"[0-9]+"# (*) [","]
    //   Integer = r#"[0-9]+"# (*) ["."]
    //   Integer = r#"[0-9]+"# (*) [";"]
    //   Integer = r#"[0-9]+"# (*) ["="]
    //   Integer = r#"[0-9]+"# (*) ["["]
    //   Integer = r#"[0-9]+"# (*) ["{"]
    //   Integer = r#"[0-9]+"# (*) ["}"]
    //   Integer = r#"[0-9]+"# (*) [r#"\"[^\"]*\""#]
    //   Integer = r#"[0-9]+"# (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Integer = r#"[0-9]+"# (*) [r#"$[$0-9]+"#]
    //   Integer = r#"[0-9]+"# (*) [r#"\'.\'"#]
    //   Integer = r#"[0-9]+"# (*) [r#"[0-9]+"#]
    //   Integer = r#"[0-9]+"# (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   "*" -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   "," -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   "." -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   ";" -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   "=" -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   "[" -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   "{" -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   "}" -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   r#"\"[^\"]*\""# -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   r#"$[$0-9]+"# -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   r#"\'.\'"# -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   r#"[0-9]+"# -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //
    pub fn __state96<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action15(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Integer(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 97
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["("]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["*"]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) [","]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["."]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) [";"]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["="]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["["]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["{"]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["}"]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) [r#"\"[^\"]*\""#]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) [r#"$[$0-9]+"#]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) [r#"\'.\'"#]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) [r#"[0-9]+"#]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   "*" -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   "," -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   "." -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   ";" -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   "=" -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   "[" -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   "{" -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   "}" -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   r#"\"[^\"]*\""# -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   r#"$[$0-9]+"# -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   r#"\'.\'"# -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   r#"[0-9]+"# -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //
    pub fn __state97<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action14(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ident(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 98
    //   Alternatives = Alternatives "|" Alternative (*) [";"]
    //   Alternatives = Alternatives "|" Alternative (*) ["|"]
    //
    //   ";" -> Reduce(Alternatives = Alternatives, "|", Alternative => ActionFn(18);)
    //   "|" -> Reduce(Alternatives = Alternatives, "|", Alternative => ActionFn(18);)
    //
    pub fn __state98<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Vec<Alternative<'input>>>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Alternative<'input>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (19, _), _)) |
            Some((_, (24, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action18(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Alternatives(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 99
    //   TokenTree+ = TokenTree+ TokenTree (*) ["("]
    //   TokenTree+ = TokenTree+ TokenTree (*) ["*"]
    //   TokenTree+ = TokenTree+ TokenTree (*) [","]
    //   TokenTree+ = TokenTree+ TokenTree (*) ["."]
    //   TokenTree+ = TokenTree+ TokenTree (*) [";"]
    //   TokenTree+ = TokenTree+ TokenTree (*) ["="]
    //   TokenTree+ = TokenTree+ TokenTree (*) ["["]
    //   TokenTree+ = TokenTree+ TokenTree (*) ["{"]
    //   TokenTree+ = TokenTree+ TokenTree (*) ["}"]
    //   TokenTree+ = TokenTree+ TokenTree (*) [r#"\"[^\"]*\""#]
    //   TokenTree+ = TokenTree+ TokenTree (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = TokenTree+ TokenTree (*) [r#"$[$0-9]+"#]
    //   TokenTree+ = TokenTree+ TokenTree (*) [r#"\'.\'"#]
    //   TokenTree+ = TokenTree+ TokenTree (*) [r#"[0-9]+"#]
    //   TokenTree+ = TokenTree+ TokenTree (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(TokenTree+ = TokenTree+, TokenTree => ActionFn(66);)
    //   "*" -> Reduce(TokenTree+ = TokenTree+, TokenTree => ActionFn(66);)
    //   "," -> Reduce(TokenTree+ = TokenTree+, TokenTree => ActionFn(66);)
    //   "." -> Reduce(TokenTree+ = TokenTree+, TokenTree => ActionFn(66);)
    //   ";" -> Reduce(TokenTree+ = TokenTree+, TokenTree => ActionFn(66);)
    //   "=" -> Reduce(TokenTree+ = TokenTree+, TokenTree => ActionFn(66);)
    //   "[" -> Reduce(TokenTree+ = TokenTree+, TokenTree => ActionFn(66);)
    //   "{" -> Reduce(TokenTree+ = TokenTree+, TokenTree => ActionFn(66);)
    //   "}" -> Reduce(TokenTree+ = TokenTree+, TokenTree => ActionFn(66);)
    //   r#"\"[^\"]*\""# -> Reduce(TokenTree+ = TokenTree+, TokenTree => ActionFn(66);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(TokenTree+ = TokenTree+, TokenTree => ActionFn(66);)
    //   r#"$[$0-9]+"# -> Reduce(TokenTree+ = TokenTree+, TokenTree => ActionFn(66);)
    //   r#"\'.\'"# -> Reduce(TokenTree+ = TokenTree+, TokenTree => ActionFn(66);)
    //   r#"[0-9]+"# -> Reduce(TokenTree+ = TokenTree+, TokenTree => ActionFn(66);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(TokenTree+ = TokenTree+, TokenTree => ActionFn(66);)
    //
    pub fn __state99<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<::std::vec::Vec<()>>,
        __sym1: &mut Option<()>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action66(input, __sym0, __sym1, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::TokenTree_2b(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 100
    //   ActionCode = "{" TokenTree+ "}" (*) ["%empty"]
    //   ActionCode = "{" TokenTree+ "}" (*) ["%prec"]
    //   ActionCode = "{" TokenTree+ "}" (*) [";"]
    //   ActionCode = "{" TokenTree+ "}" (*) ["{"]
    //   ActionCode = "{" TokenTree+ "}" (*) ["|"]
    //   ActionCode = "{" TokenTree+ "}" (*) [r#"\'.\'"#]
    //   ActionCode = "{" TokenTree+ "}" (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "%empty" -> Reduce(ActionCode = "{", TokenTree+, "}" => ActionFn(74);)
    //   "%prec" -> Reduce(ActionCode = "{", TokenTree+, "}" => ActionFn(74);)
    //   ";" -> Reduce(ActionCode = "{", TokenTree+, "}" => ActionFn(74);)
    //   "{" -> Reduce(ActionCode = "{", TokenTree+, "}" => ActionFn(74);)
    //   "|" -> Reduce(ActionCode = "{", TokenTree+, "}" => ActionFn(74);)
    //   r#"\'.\'"# -> Reduce(ActionCode = "{", TokenTree+, "}" => ActionFn(74);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(ActionCode = "{", TokenTree+, "}" => ActionFn(74);)
    //
    pub fn __state100<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<::std::vec::Vec<()>>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (6, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (24, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action74(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::ActionCode(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 101
    //   UnpairedToken = Ident (*) ["("]
    //   UnpairedToken = Ident (*) [")"]
    //   UnpairedToken = Ident (*) ["*"]
    //   UnpairedToken = Ident (*) [","]
    //   UnpairedToken = Ident (*) ["."]
    //   UnpairedToken = Ident (*) [";"]
    //   UnpairedToken = Ident (*) ["="]
    //   UnpairedToken = Ident (*) ["["]
    //   UnpairedToken = Ident (*) ["{"]
    //   UnpairedToken = Ident (*) [r#"\"[^\"]*\""#]
    //   UnpairedToken = Ident (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = Ident (*) [r#"$[$0-9]+"#]
    //   UnpairedToken = Ident (*) [r#"\'.\'"#]
    //   UnpairedToken = Ident (*) [r#"[0-9]+"#]
    //   UnpairedToken = Ident (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   ")" -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   "*" -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   "," -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   "." -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   ";" -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   "=" -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   "[" -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   "{" -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   r#"\"[^\"]*\""# -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   r#"$[$0-9]+"# -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   r#"\'.\'"# -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   r#"[0-9]+"# -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //
    pub fn __state101<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Ident<'input>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (14, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action36(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::UnpairedToken(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 102
    //   UnpairedToken = Integer (*) ["("]
    //   UnpairedToken = Integer (*) [")"]
    //   UnpairedToken = Integer (*) ["*"]
    //   UnpairedToken = Integer (*) [","]
    //   UnpairedToken = Integer (*) ["."]
    //   UnpairedToken = Integer (*) [";"]
    //   UnpairedToken = Integer (*) ["="]
    //   UnpairedToken = Integer (*) ["["]
    //   UnpairedToken = Integer (*) ["{"]
    //   UnpairedToken = Integer (*) [r#"\"[^\"]*\""#]
    //   UnpairedToken = Integer (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = Integer (*) [r#"$[$0-9]+"#]
    //   UnpairedToken = Integer (*) [r#"\'.\'"#]
    //   UnpairedToken = Integer (*) [r#"[0-9]+"#]
    //   UnpairedToken = Integer (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   ")" -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   "*" -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   "," -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   "." -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   ";" -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   "=" -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   "[" -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   "{" -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   r#"\"[^\"]*\""# -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   r#"$[$0-9]+"# -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   r#"\'.\'"# -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   r#"[0-9]+"# -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //
    pub fn __state102<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (14, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action37(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::UnpairedToken(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 103
    //   TokenTree+ = TokenTree (*) ["("]
    //   TokenTree+ = TokenTree (*) [")"]
    //   TokenTree+ = TokenTree (*) ["*"]
    //   TokenTree+ = TokenTree (*) [","]
    //   TokenTree+ = TokenTree (*) ["."]
    //   TokenTree+ = TokenTree (*) [";"]
    //   TokenTree+ = TokenTree (*) ["="]
    //   TokenTree+ = TokenTree (*) ["["]
    //   TokenTree+ = TokenTree (*) ["{"]
    //   TokenTree+ = TokenTree (*) [r#"\"[^\"]*\""#]
    //   TokenTree+ = TokenTree (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = TokenTree (*) [r#"$[$0-9]+"#]
    //   TokenTree+ = TokenTree (*) [r#"\'.\'"#]
    //   TokenTree+ = TokenTree (*) [r#"[0-9]+"#]
    //   TokenTree+ = TokenTree (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(TokenTree+ = TokenTree => ActionFn(65);)
    //   ")" -> Reduce(TokenTree+ = TokenTree => ActionFn(65);)
    //   "*" -> Reduce(TokenTree+ = TokenTree => ActionFn(65);)
    //   "," -> Reduce(TokenTree+ = TokenTree => ActionFn(65);)
    //   "." -> Reduce(TokenTree+ = TokenTree => ActionFn(65);)
    //   ";" -> Reduce(TokenTree+ = TokenTree => ActionFn(65);)
    //   "=" -> Reduce(TokenTree+ = TokenTree => ActionFn(65);)
    //   "[" -> Reduce(TokenTree+ = TokenTree => ActionFn(65);)
    //   "{" -> Reduce(TokenTree+ = TokenTree => ActionFn(65);)
    //   r#"\"[^\"]*\""# -> Reduce(TokenTree+ = TokenTree => ActionFn(65);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(TokenTree+ = TokenTree => ActionFn(65);)
    //   r#"$[$0-9]+"# -> Reduce(TokenTree+ = TokenTree => ActionFn(65);)
    //   r#"\'.\'"# -> Reduce(TokenTree+ = TokenTree => ActionFn(65);)
    //   r#"[0-9]+"# -> Reduce(TokenTree+ = TokenTree => ActionFn(65);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(TokenTree+ = TokenTree => ActionFn(65);)
    //
    pub fn __state103<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<()>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (14, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action65(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::TokenTree_2b(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 104
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["("]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [")"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["*"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [","]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["."]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [";"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["="]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["["]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["{"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\"[^\"]*\""#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"$[$0-9]+"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[0-9]+"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Integer = (*) r#"[0-9]+"# ["("]
    //   Integer = (*) r#"[0-9]+"# [")"]
    //   Integer = (*) r#"[0-9]+"# ["*"]
    //   Integer = (*) r#"[0-9]+"# [","]
    //   Integer = (*) r#"[0-9]+"# ["."]
    //   Integer = (*) r#"[0-9]+"# [";"]
    //   Integer = (*) r#"[0-9]+"# ["="]
    //   Integer = (*) r#"[0-9]+"# ["["]
    //   Integer = (*) r#"[0-9]+"# ["{"]
    //   Integer = (*) r#"[0-9]+"# [r#"\"[^\"]*\""#]
    //   Integer = (*) r#"[0-9]+"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Integer = (*) r#"[0-9]+"# [r#"$[$0-9]+"#]
    //   Integer = (*) r#"[0-9]+"# [r#"\'.\'"#]
    //   Integer = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Integer = (*) r#"[0-9]+"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) UnpairedToken ["("]
    //   TokenTree = (*) UnpairedToken [")"]
    //   TokenTree = (*) UnpairedToken ["*"]
    //   TokenTree = (*) UnpairedToken [","]
    //   TokenTree = (*) UnpairedToken ["."]
    //   TokenTree = (*) UnpairedToken [";"]
    //   TokenTree = (*) UnpairedToken ["="]
    //   TokenTree = (*) UnpairedToken ["["]
    //   TokenTree = (*) UnpairedToken ["{"]
    //   TokenTree = (*) UnpairedToken [r#"\"[^\"]*\""#]
    //   TokenTree = (*) UnpairedToken [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) UnpairedToken [r#"$[$0-9]+"#]
    //   TokenTree = (*) UnpairedToken [r#"\'.\'"#]
    //   TokenTree = (*) UnpairedToken [r#"[0-9]+"#]
    //   TokenTree = (*) UnpairedToken [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" TokenTree+ ")" ["("]
    //   TokenTree = (*) "(" TokenTree+ ")" [")"]
    //   TokenTree = (*) "(" TokenTree+ ")" ["*"]
    //   TokenTree = (*) "(" TokenTree+ ")" [","]
    //   TokenTree = (*) "(" TokenTree+ ")" ["."]
    //   TokenTree = (*) "(" TokenTree+ ")" [";"]
    //   TokenTree = (*) "(" TokenTree+ ")" ["="]
    //   TokenTree = (*) "(" TokenTree+ ")" ["["]
    //   TokenTree = (*) "(" TokenTree+ ")" ["{"]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"\'.\'"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"[0-9]+"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "(" TokenTree+ (*) ")" ["("]
    //   TokenTree = "(" TokenTree+ (*) ")" ["*"]
    //   TokenTree = "(" TokenTree+ (*) ")" [","]
    //   TokenTree = "(" TokenTree+ (*) ")" ["."]
    //   TokenTree = "(" TokenTree+ (*) ")" [";"]
    //   TokenTree = "(" TokenTree+ (*) ")" ["="]
    //   TokenTree = "(" TokenTree+ (*) ")" ["["]
    //   TokenTree = "(" TokenTree+ (*) ")" ["{"]
    //   TokenTree = "(" TokenTree+ (*) ")" ["}"]
    //   TokenTree = "(" TokenTree+ (*) ")" [r#"\"[^\"]*\""#]
    //   TokenTree = "(" TokenTree+ (*) ")" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "(" TokenTree+ (*) ")" [r#"$[$0-9]+"#]
    //   TokenTree = "(" TokenTree+ (*) ")" [r#"\'.\'"#]
    //   TokenTree = "(" TokenTree+ (*) ")" [r#"[0-9]+"#]
    //   TokenTree = "(" TokenTree+ (*) ")" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" ")" ["("]
    //   TokenTree = (*) "(" ")" [")"]
    //   TokenTree = (*) "(" ")" ["*"]
    //   TokenTree = (*) "(" ")" [","]
    //   TokenTree = (*) "(" ")" ["."]
    //   TokenTree = (*) "(" ")" [";"]
    //   TokenTree = (*) "(" ")" ["="]
    //   TokenTree = (*) "(" ")" ["["]
    //   TokenTree = (*) "(" ")" ["{"]
    //   TokenTree = (*) "(" ")" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "(" ")" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" ")" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "(" ")" [r#"\'.\'"#]
    //   TokenTree = (*) "(" ")" [r#"[0-9]+"#]
    //   TokenTree = (*) "(" ")" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" TokenTree+ "]" ["("]
    //   TokenTree = (*) "[" TokenTree+ "]" [")"]
    //   TokenTree = (*) "[" TokenTree+ "]" ["*"]
    //   TokenTree = (*) "[" TokenTree+ "]" [","]
    //   TokenTree = (*) "[" TokenTree+ "]" ["."]
    //   TokenTree = (*) "[" TokenTree+ "]" [";"]
    //   TokenTree = (*) "[" TokenTree+ "]" ["="]
    //   TokenTree = (*) "[" TokenTree+ "]" ["["]
    //   TokenTree = (*) "[" TokenTree+ "]" ["{"]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"\'.\'"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"[0-9]+"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" "]" ["("]
    //   TokenTree = (*) "[" "]" [")"]
    //   TokenTree = (*) "[" "]" ["*"]
    //   TokenTree = (*) "[" "]" [","]
    //   TokenTree = (*) "[" "]" ["."]
    //   TokenTree = (*) "[" "]" [";"]
    //   TokenTree = (*) "[" "]" ["="]
    //   TokenTree = (*) "[" "]" ["["]
    //   TokenTree = (*) "[" "]" ["{"]
    //   TokenTree = (*) "[" "]" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "[" "]" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" "]" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "[" "]" [r#"\'.\'"#]
    //   TokenTree = (*) "[" "]" [r#"[0-9]+"#]
    //   TokenTree = (*) "[" "]" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" TokenTree+ "}" ["("]
    //   TokenTree = (*) "{" TokenTree+ "}" [")"]
    //   TokenTree = (*) "{" TokenTree+ "}" ["*"]
    //   TokenTree = (*) "{" TokenTree+ "}" [","]
    //   TokenTree = (*) "{" TokenTree+ "}" ["."]
    //   TokenTree = (*) "{" TokenTree+ "}" [";"]
    //   TokenTree = (*) "{" TokenTree+ "}" ["="]
    //   TokenTree = (*) "{" TokenTree+ "}" ["["]
    //   TokenTree = (*) "{" TokenTree+ "}" ["{"]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"\'.\'"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"[0-9]+"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" "}" ["("]
    //   TokenTree = (*) "{" "}" [")"]
    //   TokenTree = (*) "{" "}" ["*"]
    //   TokenTree = (*) "{" "}" [","]
    //   TokenTree = (*) "{" "}" ["."]
    //   TokenTree = (*) "{" "}" [";"]
    //   TokenTree = (*) "{" "}" ["="]
    //   TokenTree = (*) "{" "}" ["["]
    //   TokenTree = (*) "{" "}" ["{"]
    //   TokenTree = (*) "{" "}" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "{" "}" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" "}" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "{" "}" [r#"\'.\'"#]
    //   TokenTree = (*) "{" "}" [r#"[0-9]+"#]
    //   TokenTree = (*) "{" "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["("]
    //   TokenTree+ = TokenTree+ (*) TokenTree [")"]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["*"]
    //   TokenTree+ = TokenTree+ (*) TokenTree [","]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["."]
    //   TokenTree+ = TokenTree+ (*) TokenTree [";"]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["="]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["["]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["{"]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"\"[^\"]*\""#]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"$[$0-9]+"#]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"\'.\'"#]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"[0-9]+"#]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Ident ["("]
    //   UnpairedToken = (*) Ident [")"]
    //   UnpairedToken = (*) Ident ["*"]
    //   UnpairedToken = (*) Ident [","]
    //   UnpairedToken = (*) Ident ["."]
    //   UnpairedToken = (*) Ident [";"]
    //   UnpairedToken = (*) Ident ["="]
    //   UnpairedToken = (*) Ident ["["]
    //   UnpairedToken = (*) Ident ["{"]
    //   UnpairedToken = (*) Ident [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) Ident [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Ident [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) Ident [r#"\'.\'"#]
    //   UnpairedToken = (*) Ident [r#"[0-9]+"#]
    //   UnpairedToken = (*) Ident [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Integer ["("]
    //   UnpairedToken = (*) Integer [")"]
    //   UnpairedToken = (*) Integer ["*"]
    //   UnpairedToken = (*) Integer [","]
    //   UnpairedToken = (*) Integer ["."]
    //   UnpairedToken = (*) Integer [";"]
    //   UnpairedToken = (*) Integer ["="]
    //   UnpairedToken = (*) Integer ["["]
    //   UnpairedToken = (*) Integer ["{"]
    //   UnpairedToken = (*) Integer [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) Integer [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Integer [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) Integer [r#"\'.\'"#]
    //   UnpairedToken = (*) Integer [r#"[0-9]+"#]
    //   UnpairedToken = (*) Integer [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "*" ["("]
    //   UnpairedToken = (*) "*" [")"]
    //   UnpairedToken = (*) "*" ["*"]
    //   UnpairedToken = (*) "*" [","]
    //   UnpairedToken = (*) "*" ["."]
    //   UnpairedToken = (*) "*" [";"]
    //   UnpairedToken = (*) "*" ["="]
    //   UnpairedToken = (*) "*" ["["]
    //   UnpairedToken = (*) "*" ["{"]
    //   UnpairedToken = (*) "*" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "*" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "*" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "*" [r#"\'.\'"#]
    //   UnpairedToken = (*) "*" [r#"[0-9]+"#]
    //   UnpairedToken = (*) "*" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "," ["("]
    //   UnpairedToken = (*) "," [")"]
    //   UnpairedToken = (*) "," ["*"]
    //   UnpairedToken = (*) "," [","]
    //   UnpairedToken = (*) "," ["."]
    //   UnpairedToken = (*) "," [";"]
    //   UnpairedToken = (*) "," ["="]
    //   UnpairedToken = (*) "," ["["]
    //   UnpairedToken = (*) "," ["{"]
    //   UnpairedToken = (*) "," [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "," [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "," [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "," [r#"\'.\'"#]
    //   UnpairedToken = (*) "," [r#"[0-9]+"#]
    //   UnpairedToken = (*) "," [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "." ["("]
    //   UnpairedToken = (*) "." [")"]
    //   UnpairedToken = (*) "." ["*"]
    //   UnpairedToken = (*) "." [","]
    //   UnpairedToken = (*) "." ["."]
    //   UnpairedToken = (*) "." [";"]
    //   UnpairedToken = (*) "." ["="]
    //   UnpairedToken = (*) "." ["["]
    //   UnpairedToken = (*) "." ["{"]
    //   UnpairedToken = (*) "." [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "." [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "." [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "." [r#"\'.\'"#]
    //   UnpairedToken = (*) "." [r#"[0-9]+"#]
    //   UnpairedToken = (*) "." [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) ";" ["("]
    //   UnpairedToken = (*) ";" [")"]
    //   UnpairedToken = (*) ";" ["*"]
    //   UnpairedToken = (*) ";" [","]
    //   UnpairedToken = (*) ";" ["."]
    //   UnpairedToken = (*) ";" [";"]
    //   UnpairedToken = (*) ";" ["="]
    //   UnpairedToken = (*) ";" ["["]
    //   UnpairedToken = (*) ";" ["{"]
    //   UnpairedToken = (*) ";" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) ";" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) ";" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) ";" [r#"\'.\'"#]
    //   UnpairedToken = (*) ";" [r#"[0-9]+"#]
    //   UnpairedToken = (*) ";" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "=" ["("]
    //   UnpairedToken = (*) "=" [")"]
    //   UnpairedToken = (*) "=" ["*"]
    //   UnpairedToken = (*) "=" [","]
    //   UnpairedToken = (*) "=" ["."]
    //   UnpairedToken = (*) "=" [";"]
    //   UnpairedToken = (*) "=" ["="]
    //   UnpairedToken = (*) "=" ["["]
    //   UnpairedToken = (*) "=" ["{"]
    //   UnpairedToken = (*) "=" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "=" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "=" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "=" [r#"\'.\'"#]
    //   UnpairedToken = (*) "=" [r#"[0-9]+"#]
    //   UnpairedToken = (*) "=" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["("]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [")"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["*"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [","]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["."]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [";"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["="]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["["]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["{"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["("]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [")"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["*"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [","]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["."]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [";"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["="]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["["]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["{"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["("]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [")"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["*"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [","]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["."]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [";"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["="]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["["]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["{"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\'.\'"# ["("]
    //   UnpairedToken = (*) r#"\'.\'"# [")"]
    //   UnpairedToken = (*) r#"\'.\'"# ["*"]
    //   UnpairedToken = (*) r#"\'.\'"# [","]
    //   UnpairedToken = (*) r#"\'.\'"# ["."]
    //   UnpairedToken = (*) r#"\'.\'"# [";"]
    //   UnpairedToken = (*) r#"\'.\'"# ["="]
    //   UnpairedToken = (*) r#"\'.\'"# ["["]
    //   UnpairedToken = (*) r#"\'.\'"# ["{"]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Shift(S106)
    //   ")" -> Shift(S144)
    //   "*" -> Shift(S108)
    //   "," -> Shift(S109)
    //   "." -> Shift(S110)
    //   ";" -> Shift(S111)
    //   "=" -> Shift(S112)
    //   "[" -> Shift(S113)
    //   "{" -> Shift(S114)
    //   r#"\"[^\"]*\""# -> Shift(S115)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S116)
    //   r#"$[$0-9]+"# -> Shift(S117)
    //   r#"\'.\'"# -> Shift(S118)
    //   r#"[0-9]+"# -> Shift(S119)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S120)
    //
    //   Ident -> S101
    //   Integer -> S102
    //   TokenTree -> S143
    //   UnpairedToken -> S105
    pub fn __state104<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<::std::vec::Vec<()>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state106(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state144(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state108(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state109(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (17, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state110(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state111(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state112(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state113(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state114(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state115(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state116(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state117(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state118(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state119(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (31, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state120(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ident(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state101(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state102(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::TokenTree(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state143(input, __lookbehind, __tokens, __lookahead, __sym1, __sym2));
                }
                __Nonterminal::UnpairedToken(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state105(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 105
    //   TokenTree = UnpairedToken (*) ["("]
    //   TokenTree = UnpairedToken (*) [")"]
    //   TokenTree = UnpairedToken (*) ["*"]
    //   TokenTree = UnpairedToken (*) [","]
    //   TokenTree = UnpairedToken (*) ["."]
    //   TokenTree = UnpairedToken (*) [";"]
    //   TokenTree = UnpairedToken (*) ["="]
    //   TokenTree = UnpairedToken (*) ["["]
    //   TokenTree = UnpairedToken (*) ["{"]
    //   TokenTree = UnpairedToken (*) [r#"\"[^\"]*\""#]
    //   TokenTree = UnpairedToken (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = UnpairedToken (*) [r#"$[$0-9]+"#]
    //   TokenTree = UnpairedToken (*) [r#"\'.\'"#]
    //   TokenTree = UnpairedToken (*) [r#"[0-9]+"#]
    //   TokenTree = UnpairedToken (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(TokenTree = UnpairedToken => ActionFn(28);)
    //   ")" -> Reduce(TokenTree = UnpairedToken => ActionFn(28);)
    //   "*" -> Reduce(TokenTree = UnpairedToken => ActionFn(28);)
    //   "," -> Reduce(TokenTree = UnpairedToken => ActionFn(28);)
    //   "." -> Reduce(TokenTree = UnpairedToken => ActionFn(28);)
    //   ";" -> Reduce(TokenTree = UnpairedToken => ActionFn(28);)
    //   "=" -> Reduce(TokenTree = UnpairedToken => ActionFn(28);)
    //   "[" -> Reduce(TokenTree = UnpairedToken => ActionFn(28);)
    //   "{" -> Reduce(TokenTree = UnpairedToken => ActionFn(28);)
    //   r#"\"[^\"]*\""# -> Reduce(TokenTree = UnpairedToken => ActionFn(28);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(TokenTree = UnpairedToken => ActionFn(28);)
    //   r#"$[$0-9]+"# -> Reduce(TokenTree = UnpairedToken => ActionFn(28);)
    //   r#"\'.\'"# -> Reduce(TokenTree = UnpairedToken => ActionFn(28);)
    //   r#"[0-9]+"# -> Reduce(TokenTree = UnpairedToken => ActionFn(28);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(TokenTree = UnpairedToken => ActionFn(28);)
    //
    pub fn __state105<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<()>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (14, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action28(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::TokenTree(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 106
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["("]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [")"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["*"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [","]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["."]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [";"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["="]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["["]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["{"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\"[^\"]*\""#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"$[$0-9]+"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[0-9]+"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Integer = (*) r#"[0-9]+"# ["("]
    //   Integer = (*) r#"[0-9]+"# [")"]
    //   Integer = (*) r#"[0-9]+"# ["*"]
    //   Integer = (*) r#"[0-9]+"# [","]
    //   Integer = (*) r#"[0-9]+"# ["."]
    //   Integer = (*) r#"[0-9]+"# [";"]
    //   Integer = (*) r#"[0-9]+"# ["="]
    //   Integer = (*) r#"[0-9]+"# ["["]
    //   Integer = (*) r#"[0-9]+"# ["{"]
    //   Integer = (*) r#"[0-9]+"# [r#"\"[^\"]*\""#]
    //   Integer = (*) r#"[0-9]+"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Integer = (*) r#"[0-9]+"# [r#"$[$0-9]+"#]
    //   Integer = (*) r#"[0-9]+"# [r#"\'.\'"#]
    //   Integer = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Integer = (*) r#"[0-9]+"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) UnpairedToken ["("]
    //   TokenTree = (*) UnpairedToken [")"]
    //   TokenTree = (*) UnpairedToken ["*"]
    //   TokenTree = (*) UnpairedToken [","]
    //   TokenTree = (*) UnpairedToken ["."]
    //   TokenTree = (*) UnpairedToken [";"]
    //   TokenTree = (*) UnpairedToken ["="]
    //   TokenTree = (*) UnpairedToken ["["]
    //   TokenTree = (*) UnpairedToken ["{"]
    //   TokenTree = (*) UnpairedToken [r#"\"[^\"]*\""#]
    //   TokenTree = (*) UnpairedToken [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) UnpairedToken [r#"$[$0-9]+"#]
    //   TokenTree = (*) UnpairedToken [r#"\'.\'"#]
    //   TokenTree = (*) UnpairedToken [r#"[0-9]+"#]
    //   TokenTree = (*) UnpairedToken [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" TokenTree+ ")" ["("]
    //   TokenTree = (*) "(" TokenTree+ ")" [")"]
    //   TokenTree = (*) "(" TokenTree+ ")" ["*"]
    //   TokenTree = (*) "(" TokenTree+ ")" [","]
    //   TokenTree = (*) "(" TokenTree+ ")" ["."]
    //   TokenTree = (*) "(" TokenTree+ ")" [";"]
    //   TokenTree = (*) "(" TokenTree+ ")" ["="]
    //   TokenTree = (*) "(" TokenTree+ ")" ["["]
    //   TokenTree = (*) "(" TokenTree+ ")" ["{"]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"\'.\'"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"[0-9]+"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "(" (*) TokenTree+ ")" ["("]
    //   TokenTree = "(" (*) TokenTree+ ")" [")"]
    //   TokenTree = "(" (*) TokenTree+ ")" ["*"]
    //   TokenTree = "(" (*) TokenTree+ ")" [","]
    //   TokenTree = "(" (*) TokenTree+ ")" ["."]
    //   TokenTree = "(" (*) TokenTree+ ")" [";"]
    //   TokenTree = "(" (*) TokenTree+ ")" ["="]
    //   TokenTree = "(" (*) TokenTree+ ")" ["["]
    //   TokenTree = "(" (*) TokenTree+ ")" ["{"]
    //   TokenTree = "(" (*) TokenTree+ ")" [r#"\"[^\"]*\""#]
    //   TokenTree = "(" (*) TokenTree+ ")" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "(" (*) TokenTree+ ")" [r#"$[$0-9]+"#]
    //   TokenTree = "(" (*) TokenTree+ ")" [r#"\'.\'"#]
    //   TokenTree = "(" (*) TokenTree+ ")" [r#"[0-9]+"#]
    //   TokenTree = "(" (*) TokenTree+ ")" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" ")" ["("]
    //   TokenTree = (*) "(" ")" [")"]
    //   TokenTree = (*) "(" ")" ["*"]
    //   TokenTree = (*) "(" ")" [","]
    //   TokenTree = (*) "(" ")" ["."]
    //   TokenTree = (*) "(" ")" [";"]
    //   TokenTree = (*) "(" ")" ["="]
    //   TokenTree = (*) "(" ")" ["["]
    //   TokenTree = (*) "(" ")" ["{"]
    //   TokenTree = (*) "(" ")" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "(" ")" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" ")" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "(" ")" [r#"\'.\'"#]
    //   TokenTree = (*) "(" ")" [r#"[0-9]+"#]
    //   TokenTree = (*) "(" ")" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "(" (*) ")" ["("]
    //   TokenTree = "(" (*) ")" [")"]
    //   TokenTree = "(" (*) ")" ["*"]
    //   TokenTree = "(" (*) ")" [","]
    //   TokenTree = "(" (*) ")" ["."]
    //   TokenTree = "(" (*) ")" [";"]
    //   TokenTree = "(" (*) ")" ["="]
    //   TokenTree = "(" (*) ")" ["["]
    //   TokenTree = "(" (*) ")" ["{"]
    //   TokenTree = "(" (*) ")" [r#"\"[^\"]*\""#]
    //   TokenTree = "(" (*) ")" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "(" (*) ")" [r#"$[$0-9]+"#]
    //   TokenTree = "(" (*) ")" [r#"\'.\'"#]
    //   TokenTree = "(" (*) ")" [r#"[0-9]+"#]
    //   TokenTree = "(" (*) ")" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" TokenTree+ "]" ["("]
    //   TokenTree = (*) "[" TokenTree+ "]" [")"]
    //   TokenTree = (*) "[" TokenTree+ "]" ["*"]
    //   TokenTree = (*) "[" TokenTree+ "]" [","]
    //   TokenTree = (*) "[" TokenTree+ "]" ["."]
    //   TokenTree = (*) "[" TokenTree+ "]" [";"]
    //   TokenTree = (*) "[" TokenTree+ "]" ["="]
    //   TokenTree = (*) "[" TokenTree+ "]" ["["]
    //   TokenTree = (*) "[" TokenTree+ "]" ["{"]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"\'.\'"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"[0-9]+"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" "]" ["("]
    //   TokenTree = (*) "[" "]" [")"]
    //   TokenTree = (*) "[" "]" ["*"]
    //   TokenTree = (*) "[" "]" [","]
    //   TokenTree = (*) "[" "]" ["."]
    //   TokenTree = (*) "[" "]" [";"]
    //   TokenTree = (*) "[" "]" ["="]
    //   TokenTree = (*) "[" "]" ["["]
    //   TokenTree = (*) "[" "]" ["{"]
    //   TokenTree = (*) "[" "]" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "[" "]" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" "]" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "[" "]" [r#"\'.\'"#]
    //   TokenTree = (*) "[" "]" [r#"[0-9]+"#]
    //   TokenTree = (*) "[" "]" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" TokenTree+ "}" ["("]
    //   TokenTree = (*) "{" TokenTree+ "}" [")"]
    //   TokenTree = (*) "{" TokenTree+ "}" ["*"]
    //   TokenTree = (*) "{" TokenTree+ "}" [","]
    //   TokenTree = (*) "{" TokenTree+ "}" ["."]
    //   TokenTree = (*) "{" TokenTree+ "}" [";"]
    //   TokenTree = (*) "{" TokenTree+ "}" ["="]
    //   TokenTree = (*) "{" TokenTree+ "}" ["["]
    //   TokenTree = (*) "{" TokenTree+ "}" ["{"]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"\'.\'"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"[0-9]+"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" "}" ["("]
    //   TokenTree = (*) "{" "}" [")"]
    //   TokenTree = (*) "{" "}" ["*"]
    //   TokenTree = (*) "{" "}" [","]
    //   TokenTree = (*) "{" "}" ["."]
    //   TokenTree = (*) "{" "}" [";"]
    //   TokenTree = (*) "{" "}" ["="]
    //   TokenTree = (*) "{" "}" ["["]
    //   TokenTree = (*) "{" "}" ["{"]
    //   TokenTree = (*) "{" "}" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "{" "}" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" "}" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "{" "}" [r#"\'.\'"#]
    //   TokenTree = (*) "{" "}" [r#"[0-9]+"#]
    //   TokenTree = (*) "{" "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = (*) TokenTree ["("]
    //   TokenTree+ = (*) TokenTree [")"]
    //   TokenTree+ = (*) TokenTree ["*"]
    //   TokenTree+ = (*) TokenTree [","]
    //   TokenTree+ = (*) TokenTree ["."]
    //   TokenTree+ = (*) TokenTree [";"]
    //   TokenTree+ = (*) TokenTree ["="]
    //   TokenTree+ = (*) TokenTree ["["]
    //   TokenTree+ = (*) TokenTree ["{"]
    //   TokenTree+ = (*) TokenTree [r#"\"[^\"]*\""#]
    //   TokenTree+ = (*) TokenTree [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = (*) TokenTree [r#"$[$0-9]+"#]
    //   TokenTree+ = (*) TokenTree [r#"\'.\'"#]
    //   TokenTree+ = (*) TokenTree [r#"[0-9]+"#]
    //   TokenTree+ = (*) TokenTree [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["("]
    //   TokenTree+ = (*) TokenTree+ TokenTree [")"]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["*"]
    //   TokenTree+ = (*) TokenTree+ TokenTree [","]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["."]
    //   TokenTree+ = (*) TokenTree+ TokenTree [";"]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["="]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["["]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["{"]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"\"[^\"]*\""#]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"$[$0-9]+"#]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"\'.\'"#]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"[0-9]+"#]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Ident ["("]
    //   UnpairedToken = (*) Ident [")"]
    //   UnpairedToken = (*) Ident ["*"]
    //   UnpairedToken = (*) Ident [","]
    //   UnpairedToken = (*) Ident ["."]
    //   UnpairedToken = (*) Ident [";"]
    //   UnpairedToken = (*) Ident ["="]
    //   UnpairedToken = (*) Ident ["["]
    //   UnpairedToken = (*) Ident ["{"]
    //   UnpairedToken = (*) Ident [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) Ident [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Ident [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) Ident [r#"\'.\'"#]
    //   UnpairedToken = (*) Ident [r#"[0-9]+"#]
    //   UnpairedToken = (*) Ident [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Integer ["("]
    //   UnpairedToken = (*) Integer [")"]
    //   UnpairedToken = (*) Integer ["*"]
    //   UnpairedToken = (*) Integer [","]
    //   UnpairedToken = (*) Integer ["."]
    //   UnpairedToken = (*) Integer [";"]
    //   UnpairedToken = (*) Integer ["="]
    //   UnpairedToken = (*) Integer ["["]
    //   UnpairedToken = (*) Integer ["{"]
    //   UnpairedToken = (*) Integer [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) Integer [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Integer [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) Integer [r#"\'.\'"#]
    //   UnpairedToken = (*) Integer [r#"[0-9]+"#]
    //   UnpairedToken = (*) Integer [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "*" ["("]
    //   UnpairedToken = (*) "*" [")"]
    //   UnpairedToken = (*) "*" ["*"]
    //   UnpairedToken = (*) "*" [","]
    //   UnpairedToken = (*) "*" ["."]
    //   UnpairedToken = (*) "*" [";"]
    //   UnpairedToken = (*) "*" ["="]
    //   UnpairedToken = (*) "*" ["["]
    //   UnpairedToken = (*) "*" ["{"]
    //   UnpairedToken = (*) "*" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "*" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "*" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "*" [r#"\'.\'"#]
    //   UnpairedToken = (*) "*" [r#"[0-9]+"#]
    //   UnpairedToken = (*) "*" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "," ["("]
    //   UnpairedToken = (*) "," [")"]
    //   UnpairedToken = (*) "," ["*"]
    //   UnpairedToken = (*) "," [","]
    //   UnpairedToken = (*) "," ["."]
    //   UnpairedToken = (*) "," [";"]
    //   UnpairedToken = (*) "," ["="]
    //   UnpairedToken = (*) "," ["["]
    //   UnpairedToken = (*) "," ["{"]
    //   UnpairedToken = (*) "," [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "," [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "," [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "," [r#"\'.\'"#]
    //   UnpairedToken = (*) "," [r#"[0-9]+"#]
    //   UnpairedToken = (*) "," [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "." ["("]
    //   UnpairedToken = (*) "." [")"]
    //   UnpairedToken = (*) "." ["*"]
    //   UnpairedToken = (*) "." [","]
    //   UnpairedToken = (*) "." ["."]
    //   UnpairedToken = (*) "." [";"]
    //   UnpairedToken = (*) "." ["="]
    //   UnpairedToken = (*) "." ["["]
    //   UnpairedToken = (*) "." ["{"]
    //   UnpairedToken = (*) "." [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "." [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "." [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "." [r#"\'.\'"#]
    //   UnpairedToken = (*) "." [r#"[0-9]+"#]
    //   UnpairedToken = (*) "." [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) ";" ["("]
    //   UnpairedToken = (*) ";" [")"]
    //   UnpairedToken = (*) ";" ["*"]
    //   UnpairedToken = (*) ";" [","]
    //   UnpairedToken = (*) ";" ["."]
    //   UnpairedToken = (*) ";" [";"]
    //   UnpairedToken = (*) ";" ["="]
    //   UnpairedToken = (*) ";" ["["]
    //   UnpairedToken = (*) ";" ["{"]
    //   UnpairedToken = (*) ";" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) ";" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) ";" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) ";" [r#"\'.\'"#]
    //   UnpairedToken = (*) ";" [r#"[0-9]+"#]
    //   UnpairedToken = (*) ";" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "=" ["("]
    //   UnpairedToken = (*) "=" [")"]
    //   UnpairedToken = (*) "=" ["*"]
    //   UnpairedToken = (*) "=" [","]
    //   UnpairedToken = (*) "=" ["."]
    //   UnpairedToken = (*) "=" [";"]
    //   UnpairedToken = (*) "=" ["="]
    //   UnpairedToken = (*) "=" ["["]
    //   UnpairedToken = (*) "=" ["{"]
    //   UnpairedToken = (*) "=" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "=" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "=" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "=" [r#"\'.\'"#]
    //   UnpairedToken = (*) "=" [r#"[0-9]+"#]
    //   UnpairedToken = (*) "=" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["("]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [")"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["*"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [","]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["."]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [";"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["="]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["["]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["{"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["("]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [")"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["*"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [","]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["."]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [";"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["="]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["["]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["{"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["("]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [")"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["*"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [","]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["."]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [";"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["="]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["["]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["{"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\'.\'"# ["("]
    //   UnpairedToken = (*) r#"\'.\'"# [")"]
    //   UnpairedToken = (*) r#"\'.\'"# ["*"]
    //   UnpairedToken = (*) r#"\'.\'"# [","]
    //   UnpairedToken = (*) r#"\'.\'"# ["."]
    //   UnpairedToken = (*) r#"\'.\'"# [";"]
    //   UnpairedToken = (*) r#"\'.\'"# ["="]
    //   UnpairedToken = (*) r#"\'.\'"# ["["]
    //   UnpairedToken = (*) r#"\'.\'"# ["{"]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Shift(S106)
    //   ")" -> Shift(S146)
    //   "*" -> Shift(S108)
    //   "," -> Shift(S109)
    //   "." -> Shift(S110)
    //   ";" -> Shift(S111)
    //   "=" -> Shift(S112)
    //   "[" -> Shift(S113)
    //   "{" -> Shift(S114)
    //   r#"\"[^\"]*\""# -> Shift(S115)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S116)
    //   r#"$[$0-9]+"# -> Shift(S117)
    //   r#"\'.\'"# -> Shift(S118)
    //   r#"[0-9]+"# -> Shift(S119)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S120)
    //
    //   Ident -> S101
    //   Integer -> S102
    //   TokenTree -> S103
    //   TokenTree+ -> S145
    //   UnpairedToken -> S105
    pub fn __state106<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state106(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state146(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state108(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state109(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (17, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state110(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state111(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state112(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state113(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state114(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state115(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state116(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state117(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state118(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state119(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (31, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state120(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ident(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state101(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Integer(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state102(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::TokenTree(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state103(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::TokenTree_2b(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state145(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::UnpairedToken(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state105(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 107
    //   TokenTree = "(" ")" (*) ["("]
    //   TokenTree = "(" ")" (*) ["*"]
    //   TokenTree = "(" ")" (*) [","]
    //   TokenTree = "(" ")" (*) ["."]
    //   TokenTree = "(" ")" (*) [";"]
    //   TokenTree = "(" ")" (*) ["="]
    //   TokenTree = "(" ")" (*) ["["]
    //   TokenTree = "(" ")" (*) ["{"]
    //   TokenTree = "(" ")" (*) ["}"]
    //   TokenTree = "(" ")" (*) [r#"\"[^\"]*\""#]
    //   TokenTree = "(" ")" (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "(" ")" (*) [r#"$[$0-9]+"#]
    //   TokenTree = "(" ")" (*) [r#"\'.\'"#]
    //   TokenTree = "(" ")" (*) [r#"[0-9]+"#]
    //   TokenTree = "(" ")" (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(TokenTree = "(", ")" => ActionFn(77);)
    //   "*" -> Reduce(TokenTree = "(", ")" => ActionFn(77);)
    //   "," -> Reduce(TokenTree = "(", ")" => ActionFn(77);)
    //   "." -> Reduce(TokenTree = "(", ")" => ActionFn(77);)
    //   ";" -> Reduce(TokenTree = "(", ")" => ActionFn(77);)
    //   "=" -> Reduce(TokenTree = "(", ")" => ActionFn(77);)
    //   "[" -> Reduce(TokenTree = "(", ")" => ActionFn(77);)
    //   "{" -> Reduce(TokenTree = "(", ")" => ActionFn(77);)
    //   "}" -> Reduce(TokenTree = "(", ")" => ActionFn(77);)
    //   r#"\"[^\"]*\""# -> Reduce(TokenTree = "(", ")" => ActionFn(77);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(TokenTree = "(", ")" => ActionFn(77);)
    //   r#"$[$0-9]+"# -> Reduce(TokenTree = "(", ")" => ActionFn(77);)
    //   r#"\'.\'"# -> Reduce(TokenTree = "(", ")" => ActionFn(77);)
    //   r#"[0-9]+"# -> Reduce(TokenTree = "(", ")" => ActionFn(77);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(TokenTree = "(", ")" => ActionFn(77);)
    //
    pub fn __state107<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action77(input, __sym0, __sym1, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::TokenTree(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 108
    //   UnpairedToken = "*" (*) ["("]
    //   UnpairedToken = "*" (*) [")"]
    //   UnpairedToken = "*" (*) ["*"]
    //   UnpairedToken = "*" (*) [","]
    //   UnpairedToken = "*" (*) ["."]
    //   UnpairedToken = "*" (*) [";"]
    //   UnpairedToken = "*" (*) ["="]
    //   UnpairedToken = "*" (*) ["["]
    //   UnpairedToken = "*" (*) ["{"]
    //   UnpairedToken = "*" (*) [r#"\"[^\"]*\""#]
    //   UnpairedToken = "*" (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = "*" (*) [r#"$[$0-9]+"#]
    //   UnpairedToken = "*" (*) [r#"\'.\'"#]
    //   UnpairedToken = "*" (*) [r#"[0-9]+"#]
    //   UnpairedToken = "*" (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   ")" -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   "*" -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   "," -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   "." -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   ";" -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   "=" -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   "[" -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   "{" -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   r#"\"[^\"]*\""# -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   r#"$[$0-9]+"# -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   r#"\'.\'"# -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   r#"[0-9]+"# -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //
    pub fn __state108<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (14, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action45(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::UnpairedToken(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 109
    //   UnpairedToken = "," (*) ["("]
    //   UnpairedToken = "," (*) [")"]
    //   UnpairedToken = "," (*) ["*"]
    //   UnpairedToken = "," (*) [","]
    //   UnpairedToken = "," (*) ["."]
    //   UnpairedToken = "," (*) [";"]
    //   UnpairedToken = "," (*) ["="]
    //   UnpairedToken = "," (*) ["["]
    //   UnpairedToken = "," (*) ["{"]
    //   UnpairedToken = "," (*) [r#"\"[^\"]*\""#]
    //   UnpairedToken = "," (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = "," (*) [r#"$[$0-9]+"#]
    //   UnpairedToken = "," (*) [r#"\'.\'"#]
    //   UnpairedToken = "," (*) [r#"[0-9]+"#]
    //   UnpairedToken = "," (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   ")" -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   "*" -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   "," -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   "." -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   ";" -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   "=" -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   "[" -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   "{" -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   r#"\"[^\"]*\""# -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   r#"$[$0-9]+"# -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   r#"\'.\'"# -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   r#"[0-9]+"# -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //
    pub fn __state109<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (14, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action40(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::UnpairedToken(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 110
    //   UnpairedToken = "." (*) ["("]
    //   UnpairedToken = "." (*) [")"]
    //   UnpairedToken = "." (*) ["*"]
    //   UnpairedToken = "." (*) [","]
    //   UnpairedToken = "." (*) ["."]
    //   UnpairedToken = "." (*) [";"]
    //   UnpairedToken = "." (*) ["="]
    //   UnpairedToken = "." (*) ["["]
    //   UnpairedToken = "." (*) ["{"]
    //   UnpairedToken = "." (*) [r#"\"[^\"]*\""#]
    //   UnpairedToken = "." (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = "." (*) [r#"$[$0-9]+"#]
    //   UnpairedToken = "." (*) [r#"\'.\'"#]
    //   UnpairedToken = "." (*) [r#"[0-9]+"#]
    //   UnpairedToken = "." (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   ")" -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   "*" -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   "," -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   "." -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   ";" -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   "=" -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   "[" -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   "{" -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   r#"\"[^\"]*\""# -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   r#"$[$0-9]+"# -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   r#"\'.\'"# -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   r#"[0-9]+"# -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //
    pub fn __state110<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (14, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action39(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::UnpairedToken(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 111
    //   UnpairedToken = ";" (*) ["("]
    //   UnpairedToken = ";" (*) [")"]
    //   UnpairedToken = ";" (*) ["*"]
    //   UnpairedToken = ";" (*) [","]
    //   UnpairedToken = ";" (*) ["."]
    //   UnpairedToken = ";" (*) [";"]
    //   UnpairedToken = ";" (*) ["="]
    //   UnpairedToken = ";" (*) ["["]
    //   UnpairedToken = ";" (*) ["{"]
    //   UnpairedToken = ";" (*) [r#"\"[^\"]*\""#]
    //   UnpairedToken = ";" (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = ";" (*) [r#"$[$0-9]+"#]
    //   UnpairedToken = ";" (*) [r#"\'.\'"#]
    //   UnpairedToken = ";" (*) [r#"[0-9]+"#]
    //   UnpairedToken = ";" (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   ")" -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   "*" -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   "," -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   "." -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   ";" -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   "=" -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   "[" -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   "{" -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   r#"\"[^\"]*\""# -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   r#"$[$0-9]+"# -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   r#"\'.\'"# -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   r#"[0-9]+"# -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //
    pub fn __state111<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (14, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action42(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::UnpairedToken(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 112
    //   UnpairedToken = "=" (*) ["("]
    //   UnpairedToken = "=" (*) [")"]
    //   UnpairedToken = "=" (*) ["*"]
    //   UnpairedToken = "=" (*) [","]
    //   UnpairedToken = "=" (*) ["."]
    //   UnpairedToken = "=" (*) [";"]
    //   UnpairedToken = "=" (*) ["="]
    //   UnpairedToken = "=" (*) ["["]
    //   UnpairedToken = "=" (*) ["{"]
    //   UnpairedToken = "=" (*) [r#"\"[^\"]*\""#]
    //   UnpairedToken = "=" (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = "=" (*) [r#"$[$0-9]+"#]
    //   UnpairedToken = "=" (*) [r#"\'.\'"#]
    //   UnpairedToken = "=" (*) [r#"[0-9]+"#]
    //   UnpairedToken = "=" (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   ")" -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   "*" -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   "," -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   "." -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   ";" -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   "=" -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   "[" -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   "{" -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   r#"\"[^\"]*\""# -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   r#"$[$0-9]+"# -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   r#"\'.\'"# -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   r#"[0-9]+"# -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //
    pub fn __state112<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (14, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action41(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::UnpairedToken(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 113
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["("]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["*"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [","]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["."]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [";"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["="]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["["]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["]"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["{"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\"[^\"]*\""#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"$[$0-9]+"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[0-9]+"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Integer = (*) r#"[0-9]+"# ["("]
    //   Integer = (*) r#"[0-9]+"# ["*"]
    //   Integer = (*) r#"[0-9]+"# [","]
    //   Integer = (*) r#"[0-9]+"# ["."]
    //   Integer = (*) r#"[0-9]+"# [";"]
    //   Integer = (*) r#"[0-9]+"# ["="]
    //   Integer = (*) r#"[0-9]+"# ["["]
    //   Integer = (*) r#"[0-9]+"# ["]"]
    //   Integer = (*) r#"[0-9]+"# ["{"]
    //   Integer = (*) r#"[0-9]+"# [r#"\"[^\"]*\""#]
    //   Integer = (*) r#"[0-9]+"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Integer = (*) r#"[0-9]+"# [r#"$[$0-9]+"#]
    //   Integer = (*) r#"[0-9]+"# [r#"\'.\'"#]
    //   Integer = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Integer = (*) r#"[0-9]+"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) UnpairedToken ["("]
    //   TokenTree = (*) UnpairedToken ["*"]
    //   TokenTree = (*) UnpairedToken [","]
    //   TokenTree = (*) UnpairedToken ["."]
    //   TokenTree = (*) UnpairedToken [";"]
    //   TokenTree = (*) UnpairedToken ["="]
    //   TokenTree = (*) UnpairedToken ["["]
    //   TokenTree = (*) UnpairedToken ["]"]
    //   TokenTree = (*) UnpairedToken ["{"]
    //   TokenTree = (*) UnpairedToken [r#"\"[^\"]*\""#]
    //   TokenTree = (*) UnpairedToken [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) UnpairedToken [r#"$[$0-9]+"#]
    //   TokenTree = (*) UnpairedToken [r#"\'.\'"#]
    //   TokenTree = (*) UnpairedToken [r#"[0-9]+"#]
    //   TokenTree = (*) UnpairedToken [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" TokenTree+ ")" ["("]
    //   TokenTree = (*) "(" TokenTree+ ")" ["*"]
    //   TokenTree = (*) "(" TokenTree+ ")" [","]
    //   TokenTree = (*) "(" TokenTree+ ")" ["."]
    //   TokenTree = (*) "(" TokenTree+ ")" [";"]
    //   TokenTree = (*) "(" TokenTree+ ")" ["="]
    //   TokenTree = (*) "(" TokenTree+ ")" ["["]
    //   TokenTree = (*) "(" TokenTree+ ")" ["]"]
    //   TokenTree = (*) "(" TokenTree+ ")" ["{"]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"\'.\'"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"[0-9]+"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" ")" ["("]
    //   TokenTree = (*) "(" ")" ["*"]
    //   TokenTree = (*) "(" ")" [","]
    //   TokenTree = (*) "(" ")" ["."]
    //   TokenTree = (*) "(" ")" [";"]
    //   TokenTree = (*) "(" ")" ["="]
    //   TokenTree = (*) "(" ")" ["["]
    //   TokenTree = (*) "(" ")" ["]"]
    //   TokenTree = (*) "(" ")" ["{"]
    //   TokenTree = (*) "(" ")" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "(" ")" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" ")" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "(" ")" [r#"\'.\'"#]
    //   TokenTree = (*) "(" ")" [r#"[0-9]+"#]
    //   TokenTree = (*) "(" ")" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" TokenTree+ "]" ["("]
    //   TokenTree = (*) "[" TokenTree+ "]" ["*"]
    //   TokenTree = (*) "[" TokenTree+ "]" [","]
    //   TokenTree = (*) "[" TokenTree+ "]" ["."]
    //   TokenTree = (*) "[" TokenTree+ "]" [";"]
    //   TokenTree = (*) "[" TokenTree+ "]" ["="]
    //   TokenTree = (*) "[" TokenTree+ "]" ["["]
    //   TokenTree = (*) "[" TokenTree+ "]" ["]"]
    //   TokenTree = (*) "[" TokenTree+ "]" ["{"]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"\'.\'"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"[0-9]+"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "[" (*) TokenTree+ "]" ["("]
    //   TokenTree = "[" (*) TokenTree+ "]" [")"]
    //   TokenTree = "[" (*) TokenTree+ "]" ["*"]
    //   TokenTree = "[" (*) TokenTree+ "]" [","]
    //   TokenTree = "[" (*) TokenTree+ "]" ["."]
    //   TokenTree = "[" (*) TokenTree+ "]" [";"]
    //   TokenTree = "[" (*) TokenTree+ "]" ["="]
    //   TokenTree = "[" (*) TokenTree+ "]" ["["]
    //   TokenTree = "[" (*) TokenTree+ "]" ["{"]
    //   TokenTree = "[" (*) TokenTree+ "]" [r#"\"[^\"]*\""#]
    //   TokenTree = "[" (*) TokenTree+ "]" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "[" (*) TokenTree+ "]" [r#"$[$0-9]+"#]
    //   TokenTree = "[" (*) TokenTree+ "]" [r#"\'.\'"#]
    //   TokenTree = "[" (*) TokenTree+ "]" [r#"[0-9]+"#]
    //   TokenTree = "[" (*) TokenTree+ "]" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" "]" ["("]
    //   TokenTree = (*) "[" "]" ["*"]
    //   TokenTree = (*) "[" "]" [","]
    //   TokenTree = (*) "[" "]" ["."]
    //   TokenTree = (*) "[" "]" [";"]
    //   TokenTree = (*) "[" "]" ["="]
    //   TokenTree = (*) "[" "]" ["["]
    //   TokenTree = (*) "[" "]" ["]"]
    //   TokenTree = (*) "[" "]" ["{"]
    //   TokenTree = (*) "[" "]" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "[" "]" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" "]" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "[" "]" [r#"\'.\'"#]
    //   TokenTree = (*) "[" "]" [r#"[0-9]+"#]
    //   TokenTree = (*) "[" "]" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "[" (*) "]" ["("]
    //   TokenTree = "[" (*) "]" [")"]
    //   TokenTree = "[" (*) "]" ["*"]
    //   TokenTree = "[" (*) "]" [","]
    //   TokenTree = "[" (*) "]" ["."]
    //   TokenTree = "[" (*) "]" [";"]
    //   TokenTree = "[" (*) "]" ["="]
    //   TokenTree = "[" (*) "]" ["["]
    //   TokenTree = "[" (*) "]" ["{"]
    //   TokenTree = "[" (*) "]" [r#"\"[^\"]*\""#]
    //   TokenTree = "[" (*) "]" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "[" (*) "]" [r#"$[$0-9]+"#]
    //   TokenTree = "[" (*) "]" [r#"\'.\'"#]
    //   TokenTree = "[" (*) "]" [r#"[0-9]+"#]
    //   TokenTree = "[" (*) "]" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" TokenTree+ "}" ["("]
    //   TokenTree = (*) "{" TokenTree+ "}" ["*"]
    //   TokenTree = (*) "{" TokenTree+ "}" [","]
    //   TokenTree = (*) "{" TokenTree+ "}" ["."]
    //   TokenTree = (*) "{" TokenTree+ "}" [";"]
    //   TokenTree = (*) "{" TokenTree+ "}" ["="]
    //   TokenTree = (*) "{" TokenTree+ "}" ["["]
    //   TokenTree = (*) "{" TokenTree+ "}" ["]"]
    //   TokenTree = (*) "{" TokenTree+ "}" ["{"]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"\'.\'"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"[0-9]+"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" "}" ["("]
    //   TokenTree = (*) "{" "}" ["*"]
    //   TokenTree = (*) "{" "}" [","]
    //   TokenTree = (*) "{" "}" ["."]
    //   TokenTree = (*) "{" "}" [";"]
    //   TokenTree = (*) "{" "}" ["="]
    //   TokenTree = (*) "{" "}" ["["]
    //   TokenTree = (*) "{" "}" ["]"]
    //   TokenTree = (*) "{" "}" ["{"]
    //   TokenTree = (*) "{" "}" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "{" "}" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" "}" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "{" "}" [r#"\'.\'"#]
    //   TokenTree = (*) "{" "}" [r#"[0-9]+"#]
    //   TokenTree = (*) "{" "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = (*) TokenTree ["("]
    //   TokenTree+ = (*) TokenTree ["*"]
    //   TokenTree+ = (*) TokenTree [","]
    //   TokenTree+ = (*) TokenTree ["."]
    //   TokenTree+ = (*) TokenTree [";"]
    //   TokenTree+ = (*) TokenTree ["="]
    //   TokenTree+ = (*) TokenTree ["["]
    //   TokenTree+ = (*) TokenTree ["]"]
    //   TokenTree+ = (*) TokenTree ["{"]
    //   TokenTree+ = (*) TokenTree [r#"\"[^\"]*\""#]
    //   TokenTree+ = (*) TokenTree [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = (*) TokenTree [r#"$[$0-9]+"#]
    //   TokenTree+ = (*) TokenTree [r#"\'.\'"#]
    //   TokenTree+ = (*) TokenTree [r#"[0-9]+"#]
    //   TokenTree+ = (*) TokenTree [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["("]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["*"]
    //   TokenTree+ = (*) TokenTree+ TokenTree [","]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["."]
    //   TokenTree+ = (*) TokenTree+ TokenTree [";"]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["="]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["["]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["]"]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["{"]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"\"[^\"]*\""#]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"$[$0-9]+"#]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"\'.\'"#]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"[0-9]+"#]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Ident ["("]
    //   UnpairedToken = (*) Ident ["*"]
    //   UnpairedToken = (*) Ident [","]
    //   UnpairedToken = (*) Ident ["."]
    //   UnpairedToken = (*) Ident [";"]
    //   UnpairedToken = (*) Ident ["="]
    //   UnpairedToken = (*) Ident ["["]
    //   UnpairedToken = (*) Ident ["]"]
    //   UnpairedToken = (*) Ident ["{"]
    //   UnpairedToken = (*) Ident [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) Ident [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Ident [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) Ident [r#"\'.\'"#]
    //   UnpairedToken = (*) Ident [r#"[0-9]+"#]
    //   UnpairedToken = (*) Ident [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Integer ["("]
    //   UnpairedToken = (*) Integer ["*"]
    //   UnpairedToken = (*) Integer [","]
    //   UnpairedToken = (*) Integer ["."]
    //   UnpairedToken = (*) Integer [";"]
    //   UnpairedToken = (*) Integer ["="]
    //   UnpairedToken = (*) Integer ["["]
    //   UnpairedToken = (*) Integer ["]"]
    //   UnpairedToken = (*) Integer ["{"]
    //   UnpairedToken = (*) Integer [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) Integer [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Integer [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) Integer [r#"\'.\'"#]
    //   UnpairedToken = (*) Integer [r#"[0-9]+"#]
    //   UnpairedToken = (*) Integer [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "*" ["("]
    //   UnpairedToken = (*) "*" ["*"]
    //   UnpairedToken = (*) "*" [","]
    //   UnpairedToken = (*) "*" ["."]
    //   UnpairedToken = (*) "*" [";"]
    //   UnpairedToken = (*) "*" ["="]
    //   UnpairedToken = (*) "*" ["["]
    //   UnpairedToken = (*) "*" ["]"]
    //   UnpairedToken = (*) "*" ["{"]
    //   UnpairedToken = (*) "*" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "*" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "*" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "*" [r#"\'.\'"#]
    //   UnpairedToken = (*) "*" [r#"[0-9]+"#]
    //   UnpairedToken = (*) "*" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "," ["("]
    //   UnpairedToken = (*) "," ["*"]
    //   UnpairedToken = (*) "," [","]
    //   UnpairedToken = (*) "," ["."]
    //   UnpairedToken = (*) "," [";"]
    //   UnpairedToken = (*) "," ["="]
    //   UnpairedToken = (*) "," ["["]
    //   UnpairedToken = (*) "," ["]"]
    //   UnpairedToken = (*) "," ["{"]
    //   UnpairedToken = (*) "," [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "," [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "," [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "," [r#"\'.\'"#]
    //   UnpairedToken = (*) "," [r#"[0-9]+"#]
    //   UnpairedToken = (*) "," [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "." ["("]
    //   UnpairedToken = (*) "." ["*"]
    //   UnpairedToken = (*) "." [","]
    //   UnpairedToken = (*) "." ["."]
    //   UnpairedToken = (*) "." [";"]
    //   UnpairedToken = (*) "." ["="]
    //   UnpairedToken = (*) "." ["["]
    //   UnpairedToken = (*) "." ["]"]
    //   UnpairedToken = (*) "." ["{"]
    //   UnpairedToken = (*) "." [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "." [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "." [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "." [r#"\'.\'"#]
    //   UnpairedToken = (*) "." [r#"[0-9]+"#]
    //   UnpairedToken = (*) "." [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) ";" ["("]
    //   UnpairedToken = (*) ";" ["*"]
    //   UnpairedToken = (*) ";" [","]
    //   UnpairedToken = (*) ";" ["."]
    //   UnpairedToken = (*) ";" [";"]
    //   UnpairedToken = (*) ";" ["="]
    //   UnpairedToken = (*) ";" ["["]
    //   UnpairedToken = (*) ";" ["]"]
    //   UnpairedToken = (*) ";" ["{"]
    //   UnpairedToken = (*) ";" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) ";" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) ";" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) ";" [r#"\'.\'"#]
    //   UnpairedToken = (*) ";" [r#"[0-9]+"#]
    //   UnpairedToken = (*) ";" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "=" ["("]
    //   UnpairedToken = (*) "=" ["*"]
    //   UnpairedToken = (*) "=" [","]
    //   UnpairedToken = (*) "=" ["."]
    //   UnpairedToken = (*) "=" [";"]
    //   UnpairedToken = (*) "=" ["="]
    //   UnpairedToken = (*) "=" ["["]
    //   UnpairedToken = (*) "=" ["]"]
    //   UnpairedToken = (*) "=" ["{"]
    //   UnpairedToken = (*) "=" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "=" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "=" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "=" [r#"\'.\'"#]
    //   UnpairedToken = (*) "=" [r#"[0-9]+"#]
    //   UnpairedToken = (*) "=" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["("]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["*"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [","]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["."]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [";"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["="]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["["]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["]"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["{"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["("]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["*"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [","]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["."]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [";"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["="]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["["]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["]"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["{"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["("]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["*"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [","]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["."]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [";"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["="]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["["]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["]"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["{"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\'.\'"# ["("]
    //   UnpairedToken = (*) r#"\'.\'"# ["*"]
    //   UnpairedToken = (*) r#"\'.\'"# [","]
    //   UnpairedToken = (*) r#"\'.\'"# ["."]
    //   UnpairedToken = (*) r#"\'.\'"# [";"]
    //   UnpairedToken = (*) r#"\'.\'"# ["="]
    //   UnpairedToken = (*) r#"\'.\'"# ["["]
    //   UnpairedToken = (*) r#"\'.\'"# ["]"]
    //   UnpairedToken = (*) r#"\'.\'"# ["{"]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Shift(S126)
    //   "*" -> Shift(S127)
    //   "," -> Shift(S128)
    //   "." -> Shift(S129)
    //   ";" -> Shift(S130)
    //   "=" -> Shift(S131)
    //   "[" -> Shift(S132)
    //   "]" -> Shift(S148)
    //   "{" -> Shift(S134)
    //   r#"\"[^\"]*\""# -> Shift(S135)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S136)
    //   r#"$[$0-9]+"# -> Shift(S137)
    //   r#"\'.\'"# -> Shift(S138)
    //   r#"[0-9]+"# -> Shift(S139)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S140)
    //
    //   Ident -> S121
    //   Integer -> S122
    //   TokenTree -> S123
    //   TokenTree+ -> S147
    //   UnpairedToken -> S125
    pub fn __state113<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state126(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state127(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state128(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (17, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state129(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state130(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state131(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state132(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (22, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state148(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state134(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state135(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state136(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state137(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state138(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state139(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (31, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state140(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ident(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state121(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Integer(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state122(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::TokenTree(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state123(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::TokenTree_2b(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state147(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::UnpairedToken(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state125(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 114
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["("]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["*"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [","]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["."]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [";"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["="]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["["]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["{"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["}"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\"[^\"]*\""#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"$[$0-9]+"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[0-9]+"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Integer = (*) r#"[0-9]+"# ["("]
    //   Integer = (*) r#"[0-9]+"# ["*"]
    //   Integer = (*) r#"[0-9]+"# [","]
    //   Integer = (*) r#"[0-9]+"# ["."]
    //   Integer = (*) r#"[0-9]+"# [";"]
    //   Integer = (*) r#"[0-9]+"# ["="]
    //   Integer = (*) r#"[0-9]+"# ["["]
    //   Integer = (*) r#"[0-9]+"# ["{"]
    //   Integer = (*) r#"[0-9]+"# ["}"]
    //   Integer = (*) r#"[0-9]+"# [r#"\"[^\"]*\""#]
    //   Integer = (*) r#"[0-9]+"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Integer = (*) r#"[0-9]+"# [r#"$[$0-9]+"#]
    //   Integer = (*) r#"[0-9]+"# [r#"\'.\'"#]
    //   Integer = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Integer = (*) r#"[0-9]+"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) UnpairedToken ["("]
    //   TokenTree = (*) UnpairedToken ["*"]
    //   TokenTree = (*) UnpairedToken [","]
    //   TokenTree = (*) UnpairedToken ["."]
    //   TokenTree = (*) UnpairedToken [";"]
    //   TokenTree = (*) UnpairedToken ["="]
    //   TokenTree = (*) UnpairedToken ["["]
    //   TokenTree = (*) UnpairedToken ["{"]
    //   TokenTree = (*) UnpairedToken ["}"]
    //   TokenTree = (*) UnpairedToken [r#"\"[^\"]*\""#]
    //   TokenTree = (*) UnpairedToken [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) UnpairedToken [r#"$[$0-9]+"#]
    //   TokenTree = (*) UnpairedToken [r#"\'.\'"#]
    //   TokenTree = (*) UnpairedToken [r#"[0-9]+"#]
    //   TokenTree = (*) UnpairedToken [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" TokenTree+ ")" ["("]
    //   TokenTree = (*) "(" TokenTree+ ")" ["*"]
    //   TokenTree = (*) "(" TokenTree+ ")" [","]
    //   TokenTree = (*) "(" TokenTree+ ")" ["."]
    //   TokenTree = (*) "(" TokenTree+ ")" [";"]
    //   TokenTree = (*) "(" TokenTree+ ")" ["="]
    //   TokenTree = (*) "(" TokenTree+ ")" ["["]
    //   TokenTree = (*) "(" TokenTree+ ")" ["{"]
    //   TokenTree = (*) "(" TokenTree+ ")" ["}"]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"\'.\'"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"[0-9]+"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" ")" ["("]
    //   TokenTree = (*) "(" ")" ["*"]
    //   TokenTree = (*) "(" ")" [","]
    //   TokenTree = (*) "(" ")" ["."]
    //   TokenTree = (*) "(" ")" [";"]
    //   TokenTree = (*) "(" ")" ["="]
    //   TokenTree = (*) "(" ")" ["["]
    //   TokenTree = (*) "(" ")" ["{"]
    //   TokenTree = (*) "(" ")" ["}"]
    //   TokenTree = (*) "(" ")" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "(" ")" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" ")" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "(" ")" [r#"\'.\'"#]
    //   TokenTree = (*) "(" ")" [r#"[0-9]+"#]
    //   TokenTree = (*) "(" ")" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" TokenTree+ "]" ["("]
    //   TokenTree = (*) "[" TokenTree+ "]" ["*"]
    //   TokenTree = (*) "[" TokenTree+ "]" [","]
    //   TokenTree = (*) "[" TokenTree+ "]" ["."]
    //   TokenTree = (*) "[" TokenTree+ "]" [";"]
    //   TokenTree = (*) "[" TokenTree+ "]" ["="]
    //   TokenTree = (*) "[" TokenTree+ "]" ["["]
    //   TokenTree = (*) "[" TokenTree+ "]" ["{"]
    //   TokenTree = (*) "[" TokenTree+ "]" ["}"]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"\'.\'"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"[0-9]+"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" "]" ["("]
    //   TokenTree = (*) "[" "]" ["*"]
    //   TokenTree = (*) "[" "]" [","]
    //   TokenTree = (*) "[" "]" ["."]
    //   TokenTree = (*) "[" "]" [";"]
    //   TokenTree = (*) "[" "]" ["="]
    //   TokenTree = (*) "[" "]" ["["]
    //   TokenTree = (*) "[" "]" ["{"]
    //   TokenTree = (*) "[" "]" ["}"]
    //   TokenTree = (*) "[" "]" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "[" "]" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" "]" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "[" "]" [r#"\'.\'"#]
    //   TokenTree = (*) "[" "]" [r#"[0-9]+"#]
    //   TokenTree = (*) "[" "]" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" TokenTree+ "}" ["("]
    //   TokenTree = (*) "{" TokenTree+ "}" ["*"]
    //   TokenTree = (*) "{" TokenTree+ "}" [","]
    //   TokenTree = (*) "{" TokenTree+ "}" ["."]
    //   TokenTree = (*) "{" TokenTree+ "}" [";"]
    //   TokenTree = (*) "{" TokenTree+ "}" ["="]
    //   TokenTree = (*) "{" TokenTree+ "}" ["["]
    //   TokenTree = (*) "{" TokenTree+ "}" ["{"]
    //   TokenTree = (*) "{" TokenTree+ "}" ["}"]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"\'.\'"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"[0-9]+"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "{" (*) TokenTree+ "}" ["("]
    //   TokenTree = "{" (*) TokenTree+ "}" [")"]
    //   TokenTree = "{" (*) TokenTree+ "}" ["*"]
    //   TokenTree = "{" (*) TokenTree+ "}" [","]
    //   TokenTree = "{" (*) TokenTree+ "}" ["."]
    //   TokenTree = "{" (*) TokenTree+ "}" [";"]
    //   TokenTree = "{" (*) TokenTree+ "}" ["="]
    //   TokenTree = "{" (*) TokenTree+ "}" ["["]
    //   TokenTree = "{" (*) TokenTree+ "}" ["{"]
    //   TokenTree = "{" (*) TokenTree+ "}" [r#"\"[^\"]*\""#]
    //   TokenTree = "{" (*) TokenTree+ "}" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "{" (*) TokenTree+ "}" [r#"$[$0-9]+"#]
    //   TokenTree = "{" (*) TokenTree+ "}" [r#"\'.\'"#]
    //   TokenTree = "{" (*) TokenTree+ "}" [r#"[0-9]+"#]
    //   TokenTree = "{" (*) TokenTree+ "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" "}" ["("]
    //   TokenTree = (*) "{" "}" ["*"]
    //   TokenTree = (*) "{" "}" [","]
    //   TokenTree = (*) "{" "}" ["."]
    //   TokenTree = (*) "{" "}" [";"]
    //   TokenTree = (*) "{" "}" ["="]
    //   TokenTree = (*) "{" "}" ["["]
    //   TokenTree = (*) "{" "}" ["{"]
    //   TokenTree = (*) "{" "}" ["}"]
    //   TokenTree = (*) "{" "}" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "{" "}" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" "}" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "{" "}" [r#"\'.\'"#]
    //   TokenTree = (*) "{" "}" [r#"[0-9]+"#]
    //   TokenTree = (*) "{" "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "{" (*) "}" ["("]
    //   TokenTree = "{" (*) "}" [")"]
    //   TokenTree = "{" (*) "}" ["*"]
    //   TokenTree = "{" (*) "}" [","]
    //   TokenTree = "{" (*) "}" ["."]
    //   TokenTree = "{" (*) "}" [";"]
    //   TokenTree = "{" (*) "}" ["="]
    //   TokenTree = "{" (*) "}" ["["]
    //   TokenTree = "{" (*) "}" ["{"]
    //   TokenTree = "{" (*) "}" [r#"\"[^\"]*\""#]
    //   TokenTree = "{" (*) "}" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "{" (*) "}" [r#"$[$0-9]+"#]
    //   TokenTree = "{" (*) "}" [r#"\'.\'"#]
    //   TokenTree = "{" (*) "}" [r#"[0-9]+"#]
    //   TokenTree = "{" (*) "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = (*) TokenTree ["("]
    //   TokenTree+ = (*) TokenTree ["*"]
    //   TokenTree+ = (*) TokenTree [","]
    //   TokenTree+ = (*) TokenTree ["."]
    //   TokenTree+ = (*) TokenTree [";"]
    //   TokenTree+ = (*) TokenTree ["="]
    //   TokenTree+ = (*) TokenTree ["["]
    //   TokenTree+ = (*) TokenTree ["{"]
    //   TokenTree+ = (*) TokenTree ["}"]
    //   TokenTree+ = (*) TokenTree [r#"\"[^\"]*\""#]
    //   TokenTree+ = (*) TokenTree [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = (*) TokenTree [r#"$[$0-9]+"#]
    //   TokenTree+ = (*) TokenTree [r#"\'.\'"#]
    //   TokenTree+ = (*) TokenTree [r#"[0-9]+"#]
    //   TokenTree+ = (*) TokenTree [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["("]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["*"]
    //   TokenTree+ = (*) TokenTree+ TokenTree [","]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["."]
    //   TokenTree+ = (*) TokenTree+ TokenTree [";"]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["="]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["["]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["{"]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["}"]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"\"[^\"]*\""#]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"$[$0-9]+"#]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"\'.\'"#]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"[0-9]+"#]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Ident ["("]
    //   UnpairedToken = (*) Ident ["*"]
    //   UnpairedToken = (*) Ident [","]
    //   UnpairedToken = (*) Ident ["."]
    //   UnpairedToken = (*) Ident [";"]
    //   UnpairedToken = (*) Ident ["="]
    //   UnpairedToken = (*) Ident ["["]
    //   UnpairedToken = (*) Ident ["{"]
    //   UnpairedToken = (*) Ident ["}"]
    //   UnpairedToken = (*) Ident [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) Ident [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Ident [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) Ident [r#"\'.\'"#]
    //   UnpairedToken = (*) Ident [r#"[0-9]+"#]
    //   UnpairedToken = (*) Ident [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Integer ["("]
    //   UnpairedToken = (*) Integer ["*"]
    //   UnpairedToken = (*) Integer [","]
    //   UnpairedToken = (*) Integer ["."]
    //   UnpairedToken = (*) Integer [";"]
    //   UnpairedToken = (*) Integer ["="]
    //   UnpairedToken = (*) Integer ["["]
    //   UnpairedToken = (*) Integer ["{"]
    //   UnpairedToken = (*) Integer ["}"]
    //   UnpairedToken = (*) Integer [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) Integer [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Integer [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) Integer [r#"\'.\'"#]
    //   UnpairedToken = (*) Integer [r#"[0-9]+"#]
    //   UnpairedToken = (*) Integer [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "*" ["("]
    //   UnpairedToken = (*) "*" ["*"]
    //   UnpairedToken = (*) "*" [","]
    //   UnpairedToken = (*) "*" ["."]
    //   UnpairedToken = (*) "*" [";"]
    //   UnpairedToken = (*) "*" ["="]
    //   UnpairedToken = (*) "*" ["["]
    //   UnpairedToken = (*) "*" ["{"]
    //   UnpairedToken = (*) "*" ["}"]
    //   UnpairedToken = (*) "*" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "*" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "*" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "*" [r#"\'.\'"#]
    //   UnpairedToken = (*) "*" [r#"[0-9]+"#]
    //   UnpairedToken = (*) "*" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "," ["("]
    //   UnpairedToken = (*) "," ["*"]
    //   UnpairedToken = (*) "," [","]
    //   UnpairedToken = (*) "," ["."]
    //   UnpairedToken = (*) "," [";"]
    //   UnpairedToken = (*) "," ["="]
    //   UnpairedToken = (*) "," ["["]
    //   UnpairedToken = (*) "," ["{"]
    //   UnpairedToken = (*) "," ["}"]
    //   UnpairedToken = (*) "," [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "," [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "," [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "," [r#"\'.\'"#]
    //   UnpairedToken = (*) "," [r#"[0-9]+"#]
    //   UnpairedToken = (*) "," [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "." ["("]
    //   UnpairedToken = (*) "." ["*"]
    //   UnpairedToken = (*) "." [","]
    //   UnpairedToken = (*) "." ["."]
    //   UnpairedToken = (*) "." [";"]
    //   UnpairedToken = (*) "." ["="]
    //   UnpairedToken = (*) "." ["["]
    //   UnpairedToken = (*) "." ["{"]
    //   UnpairedToken = (*) "." ["}"]
    //   UnpairedToken = (*) "." [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "." [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "." [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "." [r#"\'.\'"#]
    //   UnpairedToken = (*) "." [r#"[0-9]+"#]
    //   UnpairedToken = (*) "." [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) ";" ["("]
    //   UnpairedToken = (*) ";" ["*"]
    //   UnpairedToken = (*) ";" [","]
    //   UnpairedToken = (*) ";" ["."]
    //   UnpairedToken = (*) ";" [";"]
    //   UnpairedToken = (*) ";" ["="]
    //   UnpairedToken = (*) ";" ["["]
    //   UnpairedToken = (*) ";" ["{"]
    //   UnpairedToken = (*) ";" ["}"]
    //   UnpairedToken = (*) ";" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) ";" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) ";" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) ";" [r#"\'.\'"#]
    //   UnpairedToken = (*) ";" [r#"[0-9]+"#]
    //   UnpairedToken = (*) ";" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "=" ["("]
    //   UnpairedToken = (*) "=" ["*"]
    //   UnpairedToken = (*) "=" [","]
    //   UnpairedToken = (*) "=" ["."]
    //   UnpairedToken = (*) "=" [";"]
    //   UnpairedToken = (*) "=" ["="]
    //   UnpairedToken = (*) "=" ["["]
    //   UnpairedToken = (*) "=" ["{"]
    //   UnpairedToken = (*) "=" ["}"]
    //   UnpairedToken = (*) "=" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "=" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "=" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "=" [r#"\'.\'"#]
    //   UnpairedToken = (*) "=" [r#"[0-9]+"#]
    //   UnpairedToken = (*) "=" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["("]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["*"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [","]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["."]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [";"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["="]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["["]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["{"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["}"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["("]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["*"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [","]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["."]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [";"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["="]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["["]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["{"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["}"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["("]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["*"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [","]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["."]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [";"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["="]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["["]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["{"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["}"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\'.\'"# ["("]
    //   UnpairedToken = (*) r#"\'.\'"# ["*"]
    //   UnpairedToken = (*) r#"\'.\'"# [","]
    //   UnpairedToken = (*) r#"\'.\'"# ["."]
    //   UnpairedToken = (*) r#"\'.\'"# [";"]
    //   UnpairedToken = (*) r#"\'.\'"# ["="]
    //   UnpairedToken = (*) r#"\'.\'"# ["["]
    //   UnpairedToken = (*) r#"\'.\'"# ["{"]
    //   UnpairedToken = (*) r#"\'.\'"# ["}"]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Shift(S83)
    //   "*" -> Shift(S84)
    //   "," -> Shift(S85)
    //   "." -> Shift(S86)
    //   ";" -> Shift(S87)
    //   "=" -> Shift(S88)
    //   "[" -> Shift(S89)
    //   "{" -> Shift(S90)
    //   "}" -> Shift(S150)
    //   r#"\"[^\"]*\""# -> Shift(S92)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S93)
    //   r#"$[$0-9]+"# -> Shift(S94)
    //   r#"\'.\'"# -> Shift(S95)
    //   r#"[0-9]+"# -> Shift(S96)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S97)
    //
    //   Ident -> S78
    //   Integer -> S79
    //   TokenTree -> S80
    //   TokenTree+ -> S149
    //   UnpairedToken -> S82
    pub fn __state114<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state83(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state84(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state85(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (17, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state86(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state87(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state88(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state89(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state90(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state150(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state92(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state93(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state94(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state95(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state96(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (31, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state97(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ident(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state78(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Integer(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state79(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::TokenTree(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state80(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::TokenTree_2b(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state149(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::UnpairedToken(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state82(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 115
    //   UnpairedToken = r#"\"[^\"]*\""# (*) ["("]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) [")"]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) ["*"]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) [","]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) ["."]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) [";"]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) ["="]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) ["["]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) ["{"]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) [r#"\"[^\"]*\""#]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) [r#"$[$0-9]+"#]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) [r#"\'.\'"#]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) [r#"[0-9]+"#]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   ")" -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   "*" -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   "," -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   "." -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   ";" -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   "=" -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   "[" -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   "{" -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   r#"\"[^\"]*\""# -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   r#"$[$0-9]+"# -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   r#"\'.\'"# -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   r#"[0-9]+"# -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //
    pub fn __state115<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (14, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action38(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::UnpairedToken(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 116
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["("]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) [")"]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["*"]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) [","]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["."]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) [";"]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["="]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["["]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["{"]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) [r#"\"[^\"]*\""#]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) [r#"$[$0-9]+"#]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) [r#"\'.\'"#]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) [r#"[0-9]+"#]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   ")" -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   "*" -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   "," -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   "." -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   ";" -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   "=" -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   "[" -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   "{" -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   r#"\"[^\"]*\""# -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   r#"$[$0-9]+"# -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   r#"\'.\'"# -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   r#"[0-9]+"# -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //
    pub fn __state116<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (14, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action44(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::UnpairedToken(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 117
    //   UnpairedToken = r#"$[$0-9]+"# (*) ["("]
    //   UnpairedToken = r#"$[$0-9]+"# (*) [")"]
    //   UnpairedToken = r#"$[$0-9]+"# (*) ["*"]
    //   UnpairedToken = r#"$[$0-9]+"# (*) [","]
    //   UnpairedToken = r#"$[$0-9]+"# (*) ["."]
    //   UnpairedToken = r#"$[$0-9]+"# (*) [";"]
    //   UnpairedToken = r#"$[$0-9]+"# (*) ["="]
    //   UnpairedToken = r#"$[$0-9]+"# (*) ["["]
    //   UnpairedToken = r#"$[$0-9]+"# (*) ["{"]
    //   UnpairedToken = r#"$[$0-9]+"# (*) [r#"\"[^\"]*\""#]
    //   UnpairedToken = r#"$[$0-9]+"# (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = r#"$[$0-9]+"# (*) [r#"$[$0-9]+"#]
    //   UnpairedToken = r#"$[$0-9]+"# (*) [r#"\'.\'"#]
    //   UnpairedToken = r#"$[$0-9]+"# (*) [r#"[0-9]+"#]
    //   UnpairedToken = r#"$[$0-9]+"# (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   ")" -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   "*" -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   "," -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   "." -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   ";" -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   "=" -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   "[" -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   "{" -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   r#"\"[^\"]*\""# -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   r#"$[$0-9]+"# -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   r#"\'.\'"# -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   r#"[0-9]+"# -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //
    pub fn __state117<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (14, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action43(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::UnpairedToken(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 118
    //   UnpairedToken = r#"\'.\'"# (*) ["("]
    //   UnpairedToken = r#"\'.\'"# (*) [")"]
    //   UnpairedToken = r#"\'.\'"# (*) ["*"]
    //   UnpairedToken = r#"\'.\'"# (*) [","]
    //   UnpairedToken = r#"\'.\'"# (*) ["."]
    //   UnpairedToken = r#"\'.\'"# (*) [";"]
    //   UnpairedToken = r#"\'.\'"# (*) ["="]
    //   UnpairedToken = r#"\'.\'"# (*) ["["]
    //   UnpairedToken = r#"\'.\'"# (*) ["{"]
    //   UnpairedToken = r#"\'.\'"# (*) [r#"\"[^\"]*\""#]
    //   UnpairedToken = r#"\'.\'"# (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = r#"\'.\'"# (*) [r#"$[$0-9]+"#]
    //   UnpairedToken = r#"\'.\'"# (*) [r#"\'.\'"#]
    //   UnpairedToken = r#"\'.\'"# (*) [r#"[0-9]+"#]
    //   UnpairedToken = r#"\'.\'"# (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   ")" -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   "*" -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   "," -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   "." -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   ";" -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   "=" -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   "[" -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   "{" -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   r#"\"[^\"]*\""# -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   r#"$[$0-9]+"# -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   r#"\'.\'"# -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   r#"[0-9]+"# -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //
    pub fn __state118<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (14, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action46(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::UnpairedToken(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 119
    //   Integer = r#"[0-9]+"# (*) ["("]
    //   Integer = r#"[0-9]+"# (*) [")"]
    //   Integer = r#"[0-9]+"# (*) ["*"]
    //   Integer = r#"[0-9]+"# (*) [","]
    //   Integer = r#"[0-9]+"# (*) ["."]
    //   Integer = r#"[0-9]+"# (*) [";"]
    //   Integer = r#"[0-9]+"# (*) ["="]
    //   Integer = r#"[0-9]+"# (*) ["["]
    //   Integer = r#"[0-9]+"# (*) ["{"]
    //   Integer = r#"[0-9]+"# (*) [r#"\"[^\"]*\""#]
    //   Integer = r#"[0-9]+"# (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Integer = r#"[0-9]+"# (*) [r#"$[$0-9]+"#]
    //   Integer = r#"[0-9]+"# (*) [r#"\'.\'"#]
    //   Integer = r#"[0-9]+"# (*) [r#"[0-9]+"#]
    //   Integer = r#"[0-9]+"# (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   ")" -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   "*" -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   "," -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   "." -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   ";" -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   "=" -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   "[" -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   "{" -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   r#"\"[^\"]*\""# -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   r#"$[$0-9]+"# -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   r#"\'.\'"# -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   r#"[0-9]+"# -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //
    pub fn __state119<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (14, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action15(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Integer(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 120
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["("]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) [")"]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["*"]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) [","]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["."]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) [";"]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["="]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["["]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["{"]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) [r#"\"[^\"]*\""#]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) [r#"$[$0-9]+"#]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) [r#"\'.\'"#]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) [r#"[0-9]+"#]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   ")" -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   "*" -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   "," -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   "." -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   ";" -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   "=" -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   "[" -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   "{" -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   r#"\"[^\"]*\""# -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   r#"$[$0-9]+"# -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   r#"\'.\'"# -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   r#"[0-9]+"# -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //
    pub fn __state120<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (14, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action14(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ident(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 121
    //   UnpairedToken = Ident (*) ["("]
    //   UnpairedToken = Ident (*) ["*"]
    //   UnpairedToken = Ident (*) [","]
    //   UnpairedToken = Ident (*) ["."]
    //   UnpairedToken = Ident (*) [";"]
    //   UnpairedToken = Ident (*) ["="]
    //   UnpairedToken = Ident (*) ["["]
    //   UnpairedToken = Ident (*) ["]"]
    //   UnpairedToken = Ident (*) ["{"]
    //   UnpairedToken = Ident (*) [r#"\"[^\"]*\""#]
    //   UnpairedToken = Ident (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = Ident (*) [r#"$[$0-9]+"#]
    //   UnpairedToken = Ident (*) [r#"\'.\'"#]
    //   UnpairedToken = Ident (*) [r#"[0-9]+"#]
    //   UnpairedToken = Ident (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   "*" -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   "," -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   "." -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   ";" -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   "=" -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   "[" -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   "]" -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   "{" -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   r#"\"[^\"]*\""# -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   r#"$[$0-9]+"# -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   r#"\'.\'"# -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   r#"[0-9]+"# -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = Ident => ActionFn(36);)
    //
    pub fn __state121<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Ident<'input>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action36(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::UnpairedToken(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 122
    //   UnpairedToken = Integer (*) ["("]
    //   UnpairedToken = Integer (*) ["*"]
    //   UnpairedToken = Integer (*) [","]
    //   UnpairedToken = Integer (*) ["."]
    //   UnpairedToken = Integer (*) [";"]
    //   UnpairedToken = Integer (*) ["="]
    //   UnpairedToken = Integer (*) ["["]
    //   UnpairedToken = Integer (*) ["]"]
    //   UnpairedToken = Integer (*) ["{"]
    //   UnpairedToken = Integer (*) [r#"\"[^\"]*\""#]
    //   UnpairedToken = Integer (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = Integer (*) [r#"$[$0-9]+"#]
    //   UnpairedToken = Integer (*) [r#"\'.\'"#]
    //   UnpairedToken = Integer (*) [r#"[0-9]+"#]
    //   UnpairedToken = Integer (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   "*" -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   "," -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   "." -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   ";" -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   "=" -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   "[" -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   "]" -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   "{" -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   r#"\"[^\"]*\""# -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   r#"$[$0-9]+"# -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   r#"\'.\'"# -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   r#"[0-9]+"# -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = Integer => ActionFn(37);)
    //
    pub fn __state122<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action37(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::UnpairedToken(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 123
    //   TokenTree+ = TokenTree (*) ["("]
    //   TokenTree+ = TokenTree (*) ["*"]
    //   TokenTree+ = TokenTree (*) [","]
    //   TokenTree+ = TokenTree (*) ["."]
    //   TokenTree+ = TokenTree (*) [";"]
    //   TokenTree+ = TokenTree (*) ["="]
    //   TokenTree+ = TokenTree (*) ["["]
    //   TokenTree+ = TokenTree (*) ["]"]
    //   TokenTree+ = TokenTree (*) ["{"]
    //   TokenTree+ = TokenTree (*) [r#"\"[^\"]*\""#]
    //   TokenTree+ = TokenTree (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = TokenTree (*) [r#"$[$0-9]+"#]
    //   TokenTree+ = TokenTree (*) [r#"\'.\'"#]
    //   TokenTree+ = TokenTree (*) [r#"[0-9]+"#]
    //   TokenTree+ = TokenTree (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(TokenTree+ = TokenTree => ActionFn(65);)
    //   "*" -> Reduce(TokenTree+ = TokenTree => ActionFn(65);)
    //   "," -> Reduce(TokenTree+ = TokenTree => ActionFn(65);)
    //   "." -> Reduce(TokenTree+ = TokenTree => ActionFn(65);)
    //   ";" -> Reduce(TokenTree+ = TokenTree => ActionFn(65);)
    //   "=" -> Reduce(TokenTree+ = TokenTree => ActionFn(65);)
    //   "[" -> Reduce(TokenTree+ = TokenTree => ActionFn(65);)
    //   "]" -> Reduce(TokenTree+ = TokenTree => ActionFn(65);)
    //   "{" -> Reduce(TokenTree+ = TokenTree => ActionFn(65);)
    //   r#"\"[^\"]*\""# -> Reduce(TokenTree+ = TokenTree => ActionFn(65);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(TokenTree+ = TokenTree => ActionFn(65);)
    //   r#"$[$0-9]+"# -> Reduce(TokenTree+ = TokenTree => ActionFn(65);)
    //   r#"\'.\'"# -> Reduce(TokenTree+ = TokenTree => ActionFn(65);)
    //   r#"[0-9]+"# -> Reduce(TokenTree+ = TokenTree => ActionFn(65);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(TokenTree+ = TokenTree => ActionFn(65);)
    //
    pub fn __state123<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<()>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action65(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::TokenTree_2b(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 124
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["("]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["*"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [","]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["."]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [";"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["="]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["["]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["]"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["{"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\"[^\"]*\""#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"$[$0-9]+"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[0-9]+"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Integer = (*) r#"[0-9]+"# ["("]
    //   Integer = (*) r#"[0-9]+"# ["*"]
    //   Integer = (*) r#"[0-9]+"# [","]
    //   Integer = (*) r#"[0-9]+"# ["."]
    //   Integer = (*) r#"[0-9]+"# [";"]
    //   Integer = (*) r#"[0-9]+"# ["="]
    //   Integer = (*) r#"[0-9]+"# ["["]
    //   Integer = (*) r#"[0-9]+"# ["]"]
    //   Integer = (*) r#"[0-9]+"# ["{"]
    //   Integer = (*) r#"[0-9]+"# [r#"\"[^\"]*\""#]
    //   Integer = (*) r#"[0-9]+"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Integer = (*) r#"[0-9]+"# [r#"$[$0-9]+"#]
    //   Integer = (*) r#"[0-9]+"# [r#"\'.\'"#]
    //   Integer = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Integer = (*) r#"[0-9]+"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) UnpairedToken ["("]
    //   TokenTree = (*) UnpairedToken ["*"]
    //   TokenTree = (*) UnpairedToken [","]
    //   TokenTree = (*) UnpairedToken ["."]
    //   TokenTree = (*) UnpairedToken [";"]
    //   TokenTree = (*) UnpairedToken ["="]
    //   TokenTree = (*) UnpairedToken ["["]
    //   TokenTree = (*) UnpairedToken ["]"]
    //   TokenTree = (*) UnpairedToken ["{"]
    //   TokenTree = (*) UnpairedToken [r#"\"[^\"]*\""#]
    //   TokenTree = (*) UnpairedToken [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) UnpairedToken [r#"$[$0-9]+"#]
    //   TokenTree = (*) UnpairedToken [r#"\'.\'"#]
    //   TokenTree = (*) UnpairedToken [r#"[0-9]+"#]
    //   TokenTree = (*) UnpairedToken [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" TokenTree+ ")" ["("]
    //   TokenTree = (*) "(" TokenTree+ ")" ["*"]
    //   TokenTree = (*) "(" TokenTree+ ")" [","]
    //   TokenTree = (*) "(" TokenTree+ ")" ["."]
    //   TokenTree = (*) "(" TokenTree+ ")" [";"]
    //   TokenTree = (*) "(" TokenTree+ ")" ["="]
    //   TokenTree = (*) "(" TokenTree+ ")" ["["]
    //   TokenTree = (*) "(" TokenTree+ ")" ["]"]
    //   TokenTree = (*) "(" TokenTree+ ")" ["{"]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"\'.\'"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"[0-9]+"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" ")" ["("]
    //   TokenTree = (*) "(" ")" ["*"]
    //   TokenTree = (*) "(" ")" [","]
    //   TokenTree = (*) "(" ")" ["."]
    //   TokenTree = (*) "(" ")" [";"]
    //   TokenTree = (*) "(" ")" ["="]
    //   TokenTree = (*) "(" ")" ["["]
    //   TokenTree = (*) "(" ")" ["]"]
    //   TokenTree = (*) "(" ")" ["{"]
    //   TokenTree = (*) "(" ")" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "(" ")" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" ")" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "(" ")" [r#"\'.\'"#]
    //   TokenTree = (*) "(" ")" [r#"[0-9]+"#]
    //   TokenTree = (*) "(" ")" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" TokenTree+ "]" ["("]
    //   TokenTree = (*) "[" TokenTree+ "]" ["*"]
    //   TokenTree = (*) "[" TokenTree+ "]" [","]
    //   TokenTree = (*) "[" TokenTree+ "]" ["."]
    //   TokenTree = (*) "[" TokenTree+ "]" [";"]
    //   TokenTree = (*) "[" TokenTree+ "]" ["="]
    //   TokenTree = (*) "[" TokenTree+ "]" ["["]
    //   TokenTree = (*) "[" TokenTree+ "]" ["]"]
    //   TokenTree = (*) "[" TokenTree+ "]" ["{"]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"\'.\'"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"[0-9]+"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "[" TokenTree+ (*) "]" ["("]
    //   TokenTree = "[" TokenTree+ (*) "]" ["*"]
    //   TokenTree = "[" TokenTree+ (*) "]" [","]
    //   TokenTree = "[" TokenTree+ (*) "]" ["."]
    //   TokenTree = "[" TokenTree+ (*) "]" [";"]
    //   TokenTree = "[" TokenTree+ (*) "]" ["="]
    //   TokenTree = "[" TokenTree+ (*) "]" ["["]
    //   TokenTree = "[" TokenTree+ (*) "]" ["{"]
    //   TokenTree = "[" TokenTree+ (*) "]" ["}"]
    //   TokenTree = "[" TokenTree+ (*) "]" [r#"\"[^\"]*\""#]
    //   TokenTree = "[" TokenTree+ (*) "]" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "[" TokenTree+ (*) "]" [r#"$[$0-9]+"#]
    //   TokenTree = "[" TokenTree+ (*) "]" [r#"\'.\'"#]
    //   TokenTree = "[" TokenTree+ (*) "]" [r#"[0-9]+"#]
    //   TokenTree = "[" TokenTree+ (*) "]" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" "]" ["("]
    //   TokenTree = (*) "[" "]" ["*"]
    //   TokenTree = (*) "[" "]" [","]
    //   TokenTree = (*) "[" "]" ["."]
    //   TokenTree = (*) "[" "]" [";"]
    //   TokenTree = (*) "[" "]" ["="]
    //   TokenTree = (*) "[" "]" ["["]
    //   TokenTree = (*) "[" "]" ["]"]
    //   TokenTree = (*) "[" "]" ["{"]
    //   TokenTree = (*) "[" "]" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "[" "]" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" "]" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "[" "]" [r#"\'.\'"#]
    //   TokenTree = (*) "[" "]" [r#"[0-9]+"#]
    //   TokenTree = (*) "[" "]" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" TokenTree+ "}" ["("]
    //   TokenTree = (*) "{" TokenTree+ "}" ["*"]
    //   TokenTree = (*) "{" TokenTree+ "}" [","]
    //   TokenTree = (*) "{" TokenTree+ "}" ["."]
    //   TokenTree = (*) "{" TokenTree+ "}" [";"]
    //   TokenTree = (*) "{" TokenTree+ "}" ["="]
    //   TokenTree = (*) "{" TokenTree+ "}" ["["]
    //   TokenTree = (*) "{" TokenTree+ "}" ["]"]
    //   TokenTree = (*) "{" TokenTree+ "}" ["{"]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"\'.\'"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"[0-9]+"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" "}" ["("]
    //   TokenTree = (*) "{" "}" ["*"]
    //   TokenTree = (*) "{" "}" [","]
    //   TokenTree = (*) "{" "}" ["."]
    //   TokenTree = (*) "{" "}" [";"]
    //   TokenTree = (*) "{" "}" ["="]
    //   TokenTree = (*) "{" "}" ["["]
    //   TokenTree = (*) "{" "}" ["]"]
    //   TokenTree = (*) "{" "}" ["{"]
    //   TokenTree = (*) "{" "}" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "{" "}" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" "}" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "{" "}" [r#"\'.\'"#]
    //   TokenTree = (*) "{" "}" [r#"[0-9]+"#]
    //   TokenTree = (*) "{" "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["("]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["*"]
    //   TokenTree+ = TokenTree+ (*) TokenTree [","]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["."]
    //   TokenTree+ = TokenTree+ (*) TokenTree [";"]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["="]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["["]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["]"]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["{"]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"\"[^\"]*\""#]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"$[$0-9]+"#]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"\'.\'"#]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"[0-9]+"#]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Ident ["("]
    //   UnpairedToken = (*) Ident ["*"]
    //   UnpairedToken = (*) Ident [","]
    //   UnpairedToken = (*) Ident ["."]
    //   UnpairedToken = (*) Ident [";"]
    //   UnpairedToken = (*) Ident ["="]
    //   UnpairedToken = (*) Ident ["["]
    //   UnpairedToken = (*) Ident ["]"]
    //   UnpairedToken = (*) Ident ["{"]
    //   UnpairedToken = (*) Ident [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) Ident [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Ident [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) Ident [r#"\'.\'"#]
    //   UnpairedToken = (*) Ident [r#"[0-9]+"#]
    //   UnpairedToken = (*) Ident [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Integer ["("]
    //   UnpairedToken = (*) Integer ["*"]
    //   UnpairedToken = (*) Integer [","]
    //   UnpairedToken = (*) Integer ["."]
    //   UnpairedToken = (*) Integer [";"]
    //   UnpairedToken = (*) Integer ["="]
    //   UnpairedToken = (*) Integer ["["]
    //   UnpairedToken = (*) Integer ["]"]
    //   UnpairedToken = (*) Integer ["{"]
    //   UnpairedToken = (*) Integer [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) Integer [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Integer [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) Integer [r#"\'.\'"#]
    //   UnpairedToken = (*) Integer [r#"[0-9]+"#]
    //   UnpairedToken = (*) Integer [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "*" ["("]
    //   UnpairedToken = (*) "*" ["*"]
    //   UnpairedToken = (*) "*" [","]
    //   UnpairedToken = (*) "*" ["."]
    //   UnpairedToken = (*) "*" [";"]
    //   UnpairedToken = (*) "*" ["="]
    //   UnpairedToken = (*) "*" ["["]
    //   UnpairedToken = (*) "*" ["]"]
    //   UnpairedToken = (*) "*" ["{"]
    //   UnpairedToken = (*) "*" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "*" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "*" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "*" [r#"\'.\'"#]
    //   UnpairedToken = (*) "*" [r#"[0-9]+"#]
    //   UnpairedToken = (*) "*" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "," ["("]
    //   UnpairedToken = (*) "," ["*"]
    //   UnpairedToken = (*) "," [","]
    //   UnpairedToken = (*) "," ["."]
    //   UnpairedToken = (*) "," [";"]
    //   UnpairedToken = (*) "," ["="]
    //   UnpairedToken = (*) "," ["["]
    //   UnpairedToken = (*) "," ["]"]
    //   UnpairedToken = (*) "," ["{"]
    //   UnpairedToken = (*) "," [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "," [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "," [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "," [r#"\'.\'"#]
    //   UnpairedToken = (*) "," [r#"[0-9]+"#]
    //   UnpairedToken = (*) "," [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "." ["("]
    //   UnpairedToken = (*) "." ["*"]
    //   UnpairedToken = (*) "." [","]
    //   UnpairedToken = (*) "." ["."]
    //   UnpairedToken = (*) "." [";"]
    //   UnpairedToken = (*) "." ["="]
    //   UnpairedToken = (*) "." ["["]
    //   UnpairedToken = (*) "." ["]"]
    //   UnpairedToken = (*) "." ["{"]
    //   UnpairedToken = (*) "." [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "." [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "." [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "." [r#"\'.\'"#]
    //   UnpairedToken = (*) "." [r#"[0-9]+"#]
    //   UnpairedToken = (*) "." [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) ";" ["("]
    //   UnpairedToken = (*) ";" ["*"]
    //   UnpairedToken = (*) ";" [","]
    //   UnpairedToken = (*) ";" ["."]
    //   UnpairedToken = (*) ";" [";"]
    //   UnpairedToken = (*) ";" ["="]
    //   UnpairedToken = (*) ";" ["["]
    //   UnpairedToken = (*) ";" ["]"]
    //   UnpairedToken = (*) ";" ["{"]
    //   UnpairedToken = (*) ";" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) ";" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) ";" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) ";" [r#"\'.\'"#]
    //   UnpairedToken = (*) ";" [r#"[0-9]+"#]
    //   UnpairedToken = (*) ";" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "=" ["("]
    //   UnpairedToken = (*) "=" ["*"]
    //   UnpairedToken = (*) "=" [","]
    //   UnpairedToken = (*) "=" ["."]
    //   UnpairedToken = (*) "=" [";"]
    //   UnpairedToken = (*) "=" ["="]
    //   UnpairedToken = (*) "=" ["["]
    //   UnpairedToken = (*) "=" ["]"]
    //   UnpairedToken = (*) "=" ["{"]
    //   UnpairedToken = (*) "=" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "=" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "=" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "=" [r#"\'.\'"#]
    //   UnpairedToken = (*) "=" [r#"[0-9]+"#]
    //   UnpairedToken = (*) "=" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["("]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["*"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [","]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["."]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [";"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["="]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["["]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["]"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["{"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["("]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["*"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [","]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["."]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [";"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["="]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["["]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["]"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["{"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["("]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["*"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [","]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["."]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [";"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["="]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["["]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["]"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["{"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\'.\'"# ["("]
    //   UnpairedToken = (*) r#"\'.\'"# ["*"]
    //   UnpairedToken = (*) r#"\'.\'"# [","]
    //   UnpairedToken = (*) r#"\'.\'"# ["."]
    //   UnpairedToken = (*) r#"\'.\'"# [";"]
    //   UnpairedToken = (*) r#"\'.\'"# ["="]
    //   UnpairedToken = (*) r#"\'.\'"# ["["]
    //   UnpairedToken = (*) r#"\'.\'"# ["]"]
    //   UnpairedToken = (*) r#"\'.\'"# ["{"]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Shift(S126)
    //   "*" -> Shift(S127)
    //   "," -> Shift(S128)
    //   "." -> Shift(S129)
    //   ";" -> Shift(S130)
    //   "=" -> Shift(S131)
    //   "[" -> Shift(S132)
    //   "]" -> Shift(S152)
    //   "{" -> Shift(S134)
    //   r#"\"[^\"]*\""# -> Shift(S135)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S136)
    //   r#"$[$0-9]+"# -> Shift(S137)
    //   r#"\'.\'"# -> Shift(S138)
    //   r#"[0-9]+"# -> Shift(S139)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S140)
    //
    //   Ident -> S121
    //   Integer -> S122
    //   TokenTree -> S151
    //   UnpairedToken -> S125
    pub fn __state124<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<::std::vec::Vec<()>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state126(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state127(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state128(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (17, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state129(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state130(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state131(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state132(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (22, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state152(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state134(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state135(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state136(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state137(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state138(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state139(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (31, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state140(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ident(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state121(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state122(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::TokenTree(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state151(input, __lookbehind, __tokens, __lookahead, __sym1, __sym2));
                }
                __Nonterminal::UnpairedToken(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state125(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 125
    //   TokenTree = UnpairedToken (*) ["("]
    //   TokenTree = UnpairedToken (*) ["*"]
    //   TokenTree = UnpairedToken (*) [","]
    //   TokenTree = UnpairedToken (*) ["."]
    //   TokenTree = UnpairedToken (*) [";"]
    //   TokenTree = UnpairedToken (*) ["="]
    //   TokenTree = UnpairedToken (*) ["["]
    //   TokenTree = UnpairedToken (*) ["]"]
    //   TokenTree = UnpairedToken (*) ["{"]
    //   TokenTree = UnpairedToken (*) [r#"\"[^\"]*\""#]
    //   TokenTree = UnpairedToken (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = UnpairedToken (*) [r#"$[$0-9]+"#]
    //   TokenTree = UnpairedToken (*) [r#"\'.\'"#]
    //   TokenTree = UnpairedToken (*) [r#"[0-9]+"#]
    //   TokenTree = UnpairedToken (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(TokenTree = UnpairedToken => ActionFn(28);)
    //   "*" -> Reduce(TokenTree = UnpairedToken => ActionFn(28);)
    //   "," -> Reduce(TokenTree = UnpairedToken => ActionFn(28);)
    //   "." -> Reduce(TokenTree = UnpairedToken => ActionFn(28);)
    //   ";" -> Reduce(TokenTree = UnpairedToken => ActionFn(28);)
    //   "=" -> Reduce(TokenTree = UnpairedToken => ActionFn(28);)
    //   "[" -> Reduce(TokenTree = UnpairedToken => ActionFn(28);)
    //   "]" -> Reduce(TokenTree = UnpairedToken => ActionFn(28);)
    //   "{" -> Reduce(TokenTree = UnpairedToken => ActionFn(28);)
    //   r#"\"[^\"]*\""# -> Reduce(TokenTree = UnpairedToken => ActionFn(28);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(TokenTree = UnpairedToken => ActionFn(28);)
    //   r#"$[$0-9]+"# -> Reduce(TokenTree = UnpairedToken => ActionFn(28);)
    //   r#"\'.\'"# -> Reduce(TokenTree = UnpairedToken => ActionFn(28);)
    //   r#"[0-9]+"# -> Reduce(TokenTree = UnpairedToken => ActionFn(28);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(TokenTree = UnpairedToken => ActionFn(28);)
    //
    pub fn __state125<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<()>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action28(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::TokenTree(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 126
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["("]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [")"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["*"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [","]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["."]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [";"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["="]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["["]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["{"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\"[^\"]*\""#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"$[$0-9]+"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[0-9]+"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Integer = (*) r#"[0-9]+"# ["("]
    //   Integer = (*) r#"[0-9]+"# [")"]
    //   Integer = (*) r#"[0-9]+"# ["*"]
    //   Integer = (*) r#"[0-9]+"# [","]
    //   Integer = (*) r#"[0-9]+"# ["."]
    //   Integer = (*) r#"[0-9]+"# [";"]
    //   Integer = (*) r#"[0-9]+"# ["="]
    //   Integer = (*) r#"[0-9]+"# ["["]
    //   Integer = (*) r#"[0-9]+"# ["{"]
    //   Integer = (*) r#"[0-9]+"# [r#"\"[^\"]*\""#]
    //   Integer = (*) r#"[0-9]+"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Integer = (*) r#"[0-9]+"# [r#"$[$0-9]+"#]
    //   Integer = (*) r#"[0-9]+"# [r#"\'.\'"#]
    //   Integer = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Integer = (*) r#"[0-9]+"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) UnpairedToken ["("]
    //   TokenTree = (*) UnpairedToken [")"]
    //   TokenTree = (*) UnpairedToken ["*"]
    //   TokenTree = (*) UnpairedToken [","]
    //   TokenTree = (*) UnpairedToken ["."]
    //   TokenTree = (*) UnpairedToken [";"]
    //   TokenTree = (*) UnpairedToken ["="]
    //   TokenTree = (*) UnpairedToken ["["]
    //   TokenTree = (*) UnpairedToken ["{"]
    //   TokenTree = (*) UnpairedToken [r#"\"[^\"]*\""#]
    //   TokenTree = (*) UnpairedToken [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) UnpairedToken [r#"$[$0-9]+"#]
    //   TokenTree = (*) UnpairedToken [r#"\'.\'"#]
    //   TokenTree = (*) UnpairedToken [r#"[0-9]+"#]
    //   TokenTree = (*) UnpairedToken [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" TokenTree+ ")" ["("]
    //   TokenTree = (*) "(" TokenTree+ ")" [")"]
    //   TokenTree = (*) "(" TokenTree+ ")" ["*"]
    //   TokenTree = (*) "(" TokenTree+ ")" [","]
    //   TokenTree = (*) "(" TokenTree+ ")" ["."]
    //   TokenTree = (*) "(" TokenTree+ ")" [";"]
    //   TokenTree = (*) "(" TokenTree+ ")" ["="]
    //   TokenTree = (*) "(" TokenTree+ ")" ["["]
    //   TokenTree = (*) "(" TokenTree+ ")" ["{"]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"\'.\'"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"[0-9]+"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "(" (*) TokenTree+ ")" ["("]
    //   TokenTree = "(" (*) TokenTree+ ")" ["*"]
    //   TokenTree = "(" (*) TokenTree+ ")" [","]
    //   TokenTree = "(" (*) TokenTree+ ")" ["."]
    //   TokenTree = "(" (*) TokenTree+ ")" [";"]
    //   TokenTree = "(" (*) TokenTree+ ")" ["="]
    //   TokenTree = "(" (*) TokenTree+ ")" ["["]
    //   TokenTree = "(" (*) TokenTree+ ")" ["]"]
    //   TokenTree = "(" (*) TokenTree+ ")" ["{"]
    //   TokenTree = "(" (*) TokenTree+ ")" [r#"\"[^\"]*\""#]
    //   TokenTree = "(" (*) TokenTree+ ")" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "(" (*) TokenTree+ ")" [r#"$[$0-9]+"#]
    //   TokenTree = "(" (*) TokenTree+ ")" [r#"\'.\'"#]
    //   TokenTree = "(" (*) TokenTree+ ")" [r#"[0-9]+"#]
    //   TokenTree = "(" (*) TokenTree+ ")" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" ")" ["("]
    //   TokenTree = (*) "(" ")" [")"]
    //   TokenTree = (*) "(" ")" ["*"]
    //   TokenTree = (*) "(" ")" [","]
    //   TokenTree = (*) "(" ")" ["."]
    //   TokenTree = (*) "(" ")" [";"]
    //   TokenTree = (*) "(" ")" ["="]
    //   TokenTree = (*) "(" ")" ["["]
    //   TokenTree = (*) "(" ")" ["{"]
    //   TokenTree = (*) "(" ")" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "(" ")" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" ")" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "(" ")" [r#"\'.\'"#]
    //   TokenTree = (*) "(" ")" [r#"[0-9]+"#]
    //   TokenTree = (*) "(" ")" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "(" (*) ")" ["("]
    //   TokenTree = "(" (*) ")" ["*"]
    //   TokenTree = "(" (*) ")" [","]
    //   TokenTree = "(" (*) ")" ["."]
    //   TokenTree = "(" (*) ")" [";"]
    //   TokenTree = "(" (*) ")" ["="]
    //   TokenTree = "(" (*) ")" ["["]
    //   TokenTree = "(" (*) ")" ["]"]
    //   TokenTree = "(" (*) ")" ["{"]
    //   TokenTree = "(" (*) ")" [r#"\"[^\"]*\""#]
    //   TokenTree = "(" (*) ")" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "(" (*) ")" [r#"$[$0-9]+"#]
    //   TokenTree = "(" (*) ")" [r#"\'.\'"#]
    //   TokenTree = "(" (*) ")" [r#"[0-9]+"#]
    //   TokenTree = "(" (*) ")" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" TokenTree+ "]" ["("]
    //   TokenTree = (*) "[" TokenTree+ "]" [")"]
    //   TokenTree = (*) "[" TokenTree+ "]" ["*"]
    //   TokenTree = (*) "[" TokenTree+ "]" [","]
    //   TokenTree = (*) "[" TokenTree+ "]" ["."]
    //   TokenTree = (*) "[" TokenTree+ "]" [";"]
    //   TokenTree = (*) "[" TokenTree+ "]" ["="]
    //   TokenTree = (*) "[" TokenTree+ "]" ["["]
    //   TokenTree = (*) "[" TokenTree+ "]" ["{"]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"\'.\'"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"[0-9]+"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" "]" ["("]
    //   TokenTree = (*) "[" "]" [")"]
    //   TokenTree = (*) "[" "]" ["*"]
    //   TokenTree = (*) "[" "]" [","]
    //   TokenTree = (*) "[" "]" ["."]
    //   TokenTree = (*) "[" "]" [";"]
    //   TokenTree = (*) "[" "]" ["="]
    //   TokenTree = (*) "[" "]" ["["]
    //   TokenTree = (*) "[" "]" ["{"]
    //   TokenTree = (*) "[" "]" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "[" "]" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" "]" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "[" "]" [r#"\'.\'"#]
    //   TokenTree = (*) "[" "]" [r#"[0-9]+"#]
    //   TokenTree = (*) "[" "]" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" TokenTree+ "}" ["("]
    //   TokenTree = (*) "{" TokenTree+ "}" [")"]
    //   TokenTree = (*) "{" TokenTree+ "}" ["*"]
    //   TokenTree = (*) "{" TokenTree+ "}" [","]
    //   TokenTree = (*) "{" TokenTree+ "}" ["."]
    //   TokenTree = (*) "{" TokenTree+ "}" [";"]
    //   TokenTree = (*) "{" TokenTree+ "}" ["="]
    //   TokenTree = (*) "{" TokenTree+ "}" ["["]
    //   TokenTree = (*) "{" TokenTree+ "}" ["{"]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"\'.\'"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"[0-9]+"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" "}" ["("]
    //   TokenTree = (*) "{" "}" [")"]
    //   TokenTree = (*) "{" "}" ["*"]
    //   TokenTree = (*) "{" "}" [","]
    //   TokenTree = (*) "{" "}" ["."]
    //   TokenTree = (*) "{" "}" [";"]
    //   TokenTree = (*) "{" "}" ["="]
    //   TokenTree = (*) "{" "}" ["["]
    //   TokenTree = (*) "{" "}" ["{"]
    //   TokenTree = (*) "{" "}" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "{" "}" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" "}" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "{" "}" [r#"\'.\'"#]
    //   TokenTree = (*) "{" "}" [r#"[0-9]+"#]
    //   TokenTree = (*) "{" "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = (*) TokenTree ["("]
    //   TokenTree+ = (*) TokenTree [")"]
    //   TokenTree+ = (*) TokenTree ["*"]
    //   TokenTree+ = (*) TokenTree [","]
    //   TokenTree+ = (*) TokenTree ["."]
    //   TokenTree+ = (*) TokenTree [";"]
    //   TokenTree+ = (*) TokenTree ["="]
    //   TokenTree+ = (*) TokenTree ["["]
    //   TokenTree+ = (*) TokenTree ["{"]
    //   TokenTree+ = (*) TokenTree [r#"\"[^\"]*\""#]
    //   TokenTree+ = (*) TokenTree [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = (*) TokenTree [r#"$[$0-9]+"#]
    //   TokenTree+ = (*) TokenTree [r#"\'.\'"#]
    //   TokenTree+ = (*) TokenTree [r#"[0-9]+"#]
    //   TokenTree+ = (*) TokenTree [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["("]
    //   TokenTree+ = (*) TokenTree+ TokenTree [")"]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["*"]
    //   TokenTree+ = (*) TokenTree+ TokenTree [","]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["."]
    //   TokenTree+ = (*) TokenTree+ TokenTree [";"]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["="]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["["]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["{"]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"\"[^\"]*\""#]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"$[$0-9]+"#]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"\'.\'"#]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"[0-9]+"#]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Ident ["("]
    //   UnpairedToken = (*) Ident [")"]
    //   UnpairedToken = (*) Ident ["*"]
    //   UnpairedToken = (*) Ident [","]
    //   UnpairedToken = (*) Ident ["."]
    //   UnpairedToken = (*) Ident [";"]
    //   UnpairedToken = (*) Ident ["="]
    //   UnpairedToken = (*) Ident ["["]
    //   UnpairedToken = (*) Ident ["{"]
    //   UnpairedToken = (*) Ident [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) Ident [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Ident [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) Ident [r#"\'.\'"#]
    //   UnpairedToken = (*) Ident [r#"[0-9]+"#]
    //   UnpairedToken = (*) Ident [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Integer ["("]
    //   UnpairedToken = (*) Integer [")"]
    //   UnpairedToken = (*) Integer ["*"]
    //   UnpairedToken = (*) Integer [","]
    //   UnpairedToken = (*) Integer ["."]
    //   UnpairedToken = (*) Integer [";"]
    //   UnpairedToken = (*) Integer ["="]
    //   UnpairedToken = (*) Integer ["["]
    //   UnpairedToken = (*) Integer ["{"]
    //   UnpairedToken = (*) Integer [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) Integer [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Integer [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) Integer [r#"\'.\'"#]
    //   UnpairedToken = (*) Integer [r#"[0-9]+"#]
    //   UnpairedToken = (*) Integer [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "*" ["("]
    //   UnpairedToken = (*) "*" [")"]
    //   UnpairedToken = (*) "*" ["*"]
    //   UnpairedToken = (*) "*" [","]
    //   UnpairedToken = (*) "*" ["."]
    //   UnpairedToken = (*) "*" [";"]
    //   UnpairedToken = (*) "*" ["="]
    //   UnpairedToken = (*) "*" ["["]
    //   UnpairedToken = (*) "*" ["{"]
    //   UnpairedToken = (*) "*" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "*" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "*" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "*" [r#"\'.\'"#]
    //   UnpairedToken = (*) "*" [r#"[0-9]+"#]
    //   UnpairedToken = (*) "*" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "," ["("]
    //   UnpairedToken = (*) "," [")"]
    //   UnpairedToken = (*) "," ["*"]
    //   UnpairedToken = (*) "," [","]
    //   UnpairedToken = (*) "," ["."]
    //   UnpairedToken = (*) "," [";"]
    //   UnpairedToken = (*) "," ["="]
    //   UnpairedToken = (*) "," ["["]
    //   UnpairedToken = (*) "," ["{"]
    //   UnpairedToken = (*) "," [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "," [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "," [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "," [r#"\'.\'"#]
    //   UnpairedToken = (*) "," [r#"[0-9]+"#]
    //   UnpairedToken = (*) "," [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "." ["("]
    //   UnpairedToken = (*) "." [")"]
    //   UnpairedToken = (*) "." ["*"]
    //   UnpairedToken = (*) "." [","]
    //   UnpairedToken = (*) "." ["."]
    //   UnpairedToken = (*) "." [";"]
    //   UnpairedToken = (*) "." ["="]
    //   UnpairedToken = (*) "." ["["]
    //   UnpairedToken = (*) "." ["{"]
    //   UnpairedToken = (*) "." [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "." [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "." [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "." [r#"\'.\'"#]
    //   UnpairedToken = (*) "." [r#"[0-9]+"#]
    //   UnpairedToken = (*) "." [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) ";" ["("]
    //   UnpairedToken = (*) ";" [")"]
    //   UnpairedToken = (*) ";" ["*"]
    //   UnpairedToken = (*) ";" [","]
    //   UnpairedToken = (*) ";" ["."]
    //   UnpairedToken = (*) ";" [";"]
    //   UnpairedToken = (*) ";" ["="]
    //   UnpairedToken = (*) ";" ["["]
    //   UnpairedToken = (*) ";" ["{"]
    //   UnpairedToken = (*) ";" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) ";" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) ";" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) ";" [r#"\'.\'"#]
    //   UnpairedToken = (*) ";" [r#"[0-9]+"#]
    //   UnpairedToken = (*) ";" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "=" ["("]
    //   UnpairedToken = (*) "=" [")"]
    //   UnpairedToken = (*) "=" ["*"]
    //   UnpairedToken = (*) "=" [","]
    //   UnpairedToken = (*) "=" ["."]
    //   UnpairedToken = (*) "=" [";"]
    //   UnpairedToken = (*) "=" ["="]
    //   UnpairedToken = (*) "=" ["["]
    //   UnpairedToken = (*) "=" ["{"]
    //   UnpairedToken = (*) "=" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "=" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "=" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "=" [r#"\'.\'"#]
    //   UnpairedToken = (*) "=" [r#"[0-9]+"#]
    //   UnpairedToken = (*) "=" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["("]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [")"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["*"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [","]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["."]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [";"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["="]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["["]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["{"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["("]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [")"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["*"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [","]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["."]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [";"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["="]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["["]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["{"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["("]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [")"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["*"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [","]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["."]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [";"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["="]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["["]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["{"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\'.\'"# ["("]
    //   UnpairedToken = (*) r#"\'.\'"# [")"]
    //   UnpairedToken = (*) r#"\'.\'"# ["*"]
    //   UnpairedToken = (*) r#"\'.\'"# [","]
    //   UnpairedToken = (*) r#"\'.\'"# ["."]
    //   UnpairedToken = (*) r#"\'.\'"# [";"]
    //   UnpairedToken = (*) r#"\'.\'"# ["="]
    //   UnpairedToken = (*) r#"\'.\'"# ["["]
    //   UnpairedToken = (*) r#"\'.\'"# ["{"]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Shift(S106)
    //   ")" -> Shift(S154)
    //   "*" -> Shift(S108)
    //   "," -> Shift(S109)
    //   "." -> Shift(S110)
    //   ";" -> Shift(S111)
    //   "=" -> Shift(S112)
    //   "[" -> Shift(S113)
    //   "{" -> Shift(S114)
    //   r#"\"[^\"]*\""# -> Shift(S115)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S116)
    //   r#"$[$0-9]+"# -> Shift(S117)
    //   r#"\'.\'"# -> Shift(S118)
    //   r#"[0-9]+"# -> Shift(S119)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S120)
    //
    //   Ident -> S101
    //   Integer -> S102
    //   TokenTree -> S103
    //   TokenTree+ -> S153
    //   UnpairedToken -> S105
    pub fn __state126<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state106(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state154(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state108(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state109(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (17, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state110(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state111(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state112(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state113(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state114(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state115(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state116(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state117(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state118(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state119(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (31, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state120(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ident(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state101(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Integer(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state102(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::TokenTree(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state103(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::TokenTree_2b(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state153(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::UnpairedToken(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state105(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 127
    //   UnpairedToken = "*" (*) ["("]
    //   UnpairedToken = "*" (*) ["*"]
    //   UnpairedToken = "*" (*) [","]
    //   UnpairedToken = "*" (*) ["."]
    //   UnpairedToken = "*" (*) [";"]
    //   UnpairedToken = "*" (*) ["="]
    //   UnpairedToken = "*" (*) ["["]
    //   UnpairedToken = "*" (*) ["]"]
    //   UnpairedToken = "*" (*) ["{"]
    //   UnpairedToken = "*" (*) [r#"\"[^\"]*\""#]
    //   UnpairedToken = "*" (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = "*" (*) [r#"$[$0-9]+"#]
    //   UnpairedToken = "*" (*) [r#"\'.\'"#]
    //   UnpairedToken = "*" (*) [r#"[0-9]+"#]
    //   UnpairedToken = "*" (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   "*" -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   "," -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   "." -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   ";" -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   "=" -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   "[" -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   "]" -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   "{" -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   r#"\"[^\"]*\""# -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   r#"$[$0-9]+"# -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   r#"\'.\'"# -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   r#"[0-9]+"# -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = "*" => ActionFn(45);)
    //
    pub fn __state127<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action45(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::UnpairedToken(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 128
    //   UnpairedToken = "," (*) ["("]
    //   UnpairedToken = "," (*) ["*"]
    //   UnpairedToken = "," (*) [","]
    //   UnpairedToken = "," (*) ["."]
    //   UnpairedToken = "," (*) [";"]
    //   UnpairedToken = "," (*) ["="]
    //   UnpairedToken = "," (*) ["["]
    //   UnpairedToken = "," (*) ["]"]
    //   UnpairedToken = "," (*) ["{"]
    //   UnpairedToken = "," (*) [r#"\"[^\"]*\""#]
    //   UnpairedToken = "," (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = "," (*) [r#"$[$0-9]+"#]
    //   UnpairedToken = "," (*) [r#"\'.\'"#]
    //   UnpairedToken = "," (*) [r#"[0-9]+"#]
    //   UnpairedToken = "," (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   "*" -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   "," -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   "." -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   ";" -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   "=" -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   "[" -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   "]" -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   "{" -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   r#"\"[^\"]*\""# -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   r#"$[$0-9]+"# -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   r#"\'.\'"# -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   r#"[0-9]+"# -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = "," => ActionFn(40);)
    //
    pub fn __state128<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action40(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::UnpairedToken(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 129
    //   UnpairedToken = "." (*) ["("]
    //   UnpairedToken = "." (*) ["*"]
    //   UnpairedToken = "." (*) [","]
    //   UnpairedToken = "." (*) ["."]
    //   UnpairedToken = "." (*) [";"]
    //   UnpairedToken = "." (*) ["="]
    //   UnpairedToken = "." (*) ["["]
    //   UnpairedToken = "." (*) ["]"]
    //   UnpairedToken = "." (*) ["{"]
    //   UnpairedToken = "." (*) [r#"\"[^\"]*\""#]
    //   UnpairedToken = "." (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = "." (*) [r#"$[$0-9]+"#]
    //   UnpairedToken = "." (*) [r#"\'.\'"#]
    //   UnpairedToken = "." (*) [r#"[0-9]+"#]
    //   UnpairedToken = "." (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   "*" -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   "," -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   "." -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   ";" -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   "=" -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   "[" -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   "]" -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   "{" -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   r#"\"[^\"]*\""# -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   r#"$[$0-9]+"# -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   r#"\'.\'"# -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   r#"[0-9]+"# -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = "." => ActionFn(39);)
    //
    pub fn __state129<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action39(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::UnpairedToken(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 130
    //   UnpairedToken = ";" (*) ["("]
    //   UnpairedToken = ";" (*) ["*"]
    //   UnpairedToken = ";" (*) [","]
    //   UnpairedToken = ";" (*) ["."]
    //   UnpairedToken = ";" (*) [";"]
    //   UnpairedToken = ";" (*) ["="]
    //   UnpairedToken = ";" (*) ["["]
    //   UnpairedToken = ";" (*) ["]"]
    //   UnpairedToken = ";" (*) ["{"]
    //   UnpairedToken = ";" (*) [r#"\"[^\"]*\""#]
    //   UnpairedToken = ";" (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = ";" (*) [r#"$[$0-9]+"#]
    //   UnpairedToken = ";" (*) [r#"\'.\'"#]
    //   UnpairedToken = ";" (*) [r#"[0-9]+"#]
    //   UnpairedToken = ";" (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   "*" -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   "," -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   "." -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   ";" -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   "=" -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   "[" -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   "]" -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   "{" -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   r#"\"[^\"]*\""# -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   r#"$[$0-9]+"# -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   r#"\'.\'"# -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   r#"[0-9]+"# -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = ";" => ActionFn(42);)
    //
    pub fn __state130<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action42(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::UnpairedToken(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 131
    //   UnpairedToken = "=" (*) ["("]
    //   UnpairedToken = "=" (*) ["*"]
    //   UnpairedToken = "=" (*) [","]
    //   UnpairedToken = "=" (*) ["."]
    //   UnpairedToken = "=" (*) [";"]
    //   UnpairedToken = "=" (*) ["="]
    //   UnpairedToken = "=" (*) ["["]
    //   UnpairedToken = "=" (*) ["]"]
    //   UnpairedToken = "=" (*) ["{"]
    //   UnpairedToken = "=" (*) [r#"\"[^\"]*\""#]
    //   UnpairedToken = "=" (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = "=" (*) [r#"$[$0-9]+"#]
    //   UnpairedToken = "=" (*) [r#"\'.\'"#]
    //   UnpairedToken = "=" (*) [r#"[0-9]+"#]
    //   UnpairedToken = "=" (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   "*" -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   "," -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   "." -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   ";" -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   "=" -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   "[" -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   "]" -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   "{" -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   r#"\"[^\"]*\""# -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   r#"$[$0-9]+"# -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   r#"\'.\'"# -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   r#"[0-9]+"# -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = "=" => ActionFn(41);)
    //
    pub fn __state131<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action41(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::UnpairedToken(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 132
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["("]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["*"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [","]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["."]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [";"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["="]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["["]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["]"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["{"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\"[^\"]*\""#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"$[$0-9]+"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[0-9]+"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Integer = (*) r#"[0-9]+"# ["("]
    //   Integer = (*) r#"[0-9]+"# ["*"]
    //   Integer = (*) r#"[0-9]+"# [","]
    //   Integer = (*) r#"[0-9]+"# ["."]
    //   Integer = (*) r#"[0-9]+"# [";"]
    //   Integer = (*) r#"[0-9]+"# ["="]
    //   Integer = (*) r#"[0-9]+"# ["["]
    //   Integer = (*) r#"[0-9]+"# ["]"]
    //   Integer = (*) r#"[0-9]+"# ["{"]
    //   Integer = (*) r#"[0-9]+"# [r#"\"[^\"]*\""#]
    //   Integer = (*) r#"[0-9]+"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Integer = (*) r#"[0-9]+"# [r#"$[$0-9]+"#]
    //   Integer = (*) r#"[0-9]+"# [r#"\'.\'"#]
    //   Integer = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Integer = (*) r#"[0-9]+"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) UnpairedToken ["("]
    //   TokenTree = (*) UnpairedToken ["*"]
    //   TokenTree = (*) UnpairedToken [","]
    //   TokenTree = (*) UnpairedToken ["."]
    //   TokenTree = (*) UnpairedToken [";"]
    //   TokenTree = (*) UnpairedToken ["="]
    //   TokenTree = (*) UnpairedToken ["["]
    //   TokenTree = (*) UnpairedToken ["]"]
    //   TokenTree = (*) UnpairedToken ["{"]
    //   TokenTree = (*) UnpairedToken [r#"\"[^\"]*\""#]
    //   TokenTree = (*) UnpairedToken [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) UnpairedToken [r#"$[$0-9]+"#]
    //   TokenTree = (*) UnpairedToken [r#"\'.\'"#]
    //   TokenTree = (*) UnpairedToken [r#"[0-9]+"#]
    //   TokenTree = (*) UnpairedToken [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" TokenTree+ ")" ["("]
    //   TokenTree = (*) "(" TokenTree+ ")" ["*"]
    //   TokenTree = (*) "(" TokenTree+ ")" [","]
    //   TokenTree = (*) "(" TokenTree+ ")" ["."]
    //   TokenTree = (*) "(" TokenTree+ ")" [";"]
    //   TokenTree = (*) "(" TokenTree+ ")" ["="]
    //   TokenTree = (*) "(" TokenTree+ ")" ["["]
    //   TokenTree = (*) "(" TokenTree+ ")" ["]"]
    //   TokenTree = (*) "(" TokenTree+ ")" ["{"]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"\'.\'"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"[0-9]+"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" ")" ["("]
    //   TokenTree = (*) "(" ")" ["*"]
    //   TokenTree = (*) "(" ")" [","]
    //   TokenTree = (*) "(" ")" ["."]
    //   TokenTree = (*) "(" ")" [";"]
    //   TokenTree = (*) "(" ")" ["="]
    //   TokenTree = (*) "(" ")" ["["]
    //   TokenTree = (*) "(" ")" ["]"]
    //   TokenTree = (*) "(" ")" ["{"]
    //   TokenTree = (*) "(" ")" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "(" ")" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" ")" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "(" ")" [r#"\'.\'"#]
    //   TokenTree = (*) "(" ")" [r#"[0-9]+"#]
    //   TokenTree = (*) "(" ")" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" TokenTree+ "]" ["("]
    //   TokenTree = (*) "[" TokenTree+ "]" ["*"]
    //   TokenTree = (*) "[" TokenTree+ "]" [","]
    //   TokenTree = (*) "[" TokenTree+ "]" ["."]
    //   TokenTree = (*) "[" TokenTree+ "]" [";"]
    //   TokenTree = (*) "[" TokenTree+ "]" ["="]
    //   TokenTree = (*) "[" TokenTree+ "]" ["["]
    //   TokenTree = (*) "[" TokenTree+ "]" ["]"]
    //   TokenTree = (*) "[" TokenTree+ "]" ["{"]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"\'.\'"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"[0-9]+"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "[" (*) TokenTree+ "]" ["("]
    //   TokenTree = "[" (*) TokenTree+ "]" ["*"]
    //   TokenTree = "[" (*) TokenTree+ "]" [","]
    //   TokenTree = "[" (*) TokenTree+ "]" ["."]
    //   TokenTree = "[" (*) TokenTree+ "]" [";"]
    //   TokenTree = "[" (*) TokenTree+ "]" ["="]
    //   TokenTree = "[" (*) TokenTree+ "]" ["["]
    //   TokenTree = "[" (*) TokenTree+ "]" ["]"]
    //   TokenTree = "[" (*) TokenTree+ "]" ["{"]
    //   TokenTree = "[" (*) TokenTree+ "]" [r#"\"[^\"]*\""#]
    //   TokenTree = "[" (*) TokenTree+ "]" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "[" (*) TokenTree+ "]" [r#"$[$0-9]+"#]
    //   TokenTree = "[" (*) TokenTree+ "]" [r#"\'.\'"#]
    //   TokenTree = "[" (*) TokenTree+ "]" [r#"[0-9]+"#]
    //   TokenTree = "[" (*) TokenTree+ "]" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" "]" ["("]
    //   TokenTree = (*) "[" "]" ["*"]
    //   TokenTree = (*) "[" "]" [","]
    //   TokenTree = (*) "[" "]" ["."]
    //   TokenTree = (*) "[" "]" [";"]
    //   TokenTree = (*) "[" "]" ["="]
    //   TokenTree = (*) "[" "]" ["["]
    //   TokenTree = (*) "[" "]" ["]"]
    //   TokenTree = (*) "[" "]" ["{"]
    //   TokenTree = (*) "[" "]" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "[" "]" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" "]" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "[" "]" [r#"\'.\'"#]
    //   TokenTree = (*) "[" "]" [r#"[0-9]+"#]
    //   TokenTree = (*) "[" "]" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "[" (*) "]" ["("]
    //   TokenTree = "[" (*) "]" ["*"]
    //   TokenTree = "[" (*) "]" [","]
    //   TokenTree = "[" (*) "]" ["."]
    //   TokenTree = "[" (*) "]" [";"]
    //   TokenTree = "[" (*) "]" ["="]
    //   TokenTree = "[" (*) "]" ["["]
    //   TokenTree = "[" (*) "]" ["]"]
    //   TokenTree = "[" (*) "]" ["{"]
    //   TokenTree = "[" (*) "]" [r#"\"[^\"]*\""#]
    //   TokenTree = "[" (*) "]" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "[" (*) "]" [r#"$[$0-9]+"#]
    //   TokenTree = "[" (*) "]" [r#"\'.\'"#]
    //   TokenTree = "[" (*) "]" [r#"[0-9]+"#]
    //   TokenTree = "[" (*) "]" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" TokenTree+ "}" ["("]
    //   TokenTree = (*) "{" TokenTree+ "}" ["*"]
    //   TokenTree = (*) "{" TokenTree+ "}" [","]
    //   TokenTree = (*) "{" TokenTree+ "}" ["."]
    //   TokenTree = (*) "{" TokenTree+ "}" [";"]
    //   TokenTree = (*) "{" TokenTree+ "}" ["="]
    //   TokenTree = (*) "{" TokenTree+ "}" ["["]
    //   TokenTree = (*) "{" TokenTree+ "}" ["]"]
    //   TokenTree = (*) "{" TokenTree+ "}" ["{"]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"\'.\'"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"[0-9]+"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" "}" ["("]
    //   TokenTree = (*) "{" "}" ["*"]
    //   TokenTree = (*) "{" "}" [","]
    //   TokenTree = (*) "{" "}" ["."]
    //   TokenTree = (*) "{" "}" [";"]
    //   TokenTree = (*) "{" "}" ["="]
    //   TokenTree = (*) "{" "}" ["["]
    //   TokenTree = (*) "{" "}" ["]"]
    //   TokenTree = (*) "{" "}" ["{"]
    //   TokenTree = (*) "{" "}" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "{" "}" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" "}" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "{" "}" [r#"\'.\'"#]
    //   TokenTree = (*) "{" "}" [r#"[0-9]+"#]
    //   TokenTree = (*) "{" "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = (*) TokenTree ["("]
    //   TokenTree+ = (*) TokenTree ["*"]
    //   TokenTree+ = (*) TokenTree [","]
    //   TokenTree+ = (*) TokenTree ["."]
    //   TokenTree+ = (*) TokenTree [";"]
    //   TokenTree+ = (*) TokenTree ["="]
    //   TokenTree+ = (*) TokenTree ["["]
    //   TokenTree+ = (*) TokenTree ["]"]
    //   TokenTree+ = (*) TokenTree ["{"]
    //   TokenTree+ = (*) TokenTree [r#"\"[^\"]*\""#]
    //   TokenTree+ = (*) TokenTree [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = (*) TokenTree [r#"$[$0-9]+"#]
    //   TokenTree+ = (*) TokenTree [r#"\'.\'"#]
    //   TokenTree+ = (*) TokenTree [r#"[0-9]+"#]
    //   TokenTree+ = (*) TokenTree [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["("]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["*"]
    //   TokenTree+ = (*) TokenTree+ TokenTree [","]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["."]
    //   TokenTree+ = (*) TokenTree+ TokenTree [";"]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["="]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["["]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["]"]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["{"]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"\"[^\"]*\""#]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"$[$0-9]+"#]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"\'.\'"#]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"[0-9]+"#]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Ident ["("]
    //   UnpairedToken = (*) Ident ["*"]
    //   UnpairedToken = (*) Ident [","]
    //   UnpairedToken = (*) Ident ["."]
    //   UnpairedToken = (*) Ident [";"]
    //   UnpairedToken = (*) Ident ["="]
    //   UnpairedToken = (*) Ident ["["]
    //   UnpairedToken = (*) Ident ["]"]
    //   UnpairedToken = (*) Ident ["{"]
    //   UnpairedToken = (*) Ident [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) Ident [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Ident [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) Ident [r#"\'.\'"#]
    //   UnpairedToken = (*) Ident [r#"[0-9]+"#]
    //   UnpairedToken = (*) Ident [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Integer ["("]
    //   UnpairedToken = (*) Integer ["*"]
    //   UnpairedToken = (*) Integer [","]
    //   UnpairedToken = (*) Integer ["."]
    //   UnpairedToken = (*) Integer [";"]
    //   UnpairedToken = (*) Integer ["="]
    //   UnpairedToken = (*) Integer ["["]
    //   UnpairedToken = (*) Integer ["]"]
    //   UnpairedToken = (*) Integer ["{"]
    //   UnpairedToken = (*) Integer [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) Integer [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Integer [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) Integer [r#"\'.\'"#]
    //   UnpairedToken = (*) Integer [r#"[0-9]+"#]
    //   UnpairedToken = (*) Integer [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "*" ["("]
    //   UnpairedToken = (*) "*" ["*"]
    //   UnpairedToken = (*) "*" [","]
    //   UnpairedToken = (*) "*" ["."]
    //   UnpairedToken = (*) "*" [";"]
    //   UnpairedToken = (*) "*" ["="]
    //   UnpairedToken = (*) "*" ["["]
    //   UnpairedToken = (*) "*" ["]"]
    //   UnpairedToken = (*) "*" ["{"]
    //   UnpairedToken = (*) "*" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "*" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "*" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "*" [r#"\'.\'"#]
    //   UnpairedToken = (*) "*" [r#"[0-9]+"#]
    //   UnpairedToken = (*) "*" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "," ["("]
    //   UnpairedToken = (*) "," ["*"]
    //   UnpairedToken = (*) "," [","]
    //   UnpairedToken = (*) "," ["."]
    //   UnpairedToken = (*) "," [";"]
    //   UnpairedToken = (*) "," ["="]
    //   UnpairedToken = (*) "," ["["]
    //   UnpairedToken = (*) "," ["]"]
    //   UnpairedToken = (*) "," ["{"]
    //   UnpairedToken = (*) "," [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "," [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "," [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "," [r#"\'.\'"#]
    //   UnpairedToken = (*) "," [r#"[0-9]+"#]
    //   UnpairedToken = (*) "," [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "." ["("]
    //   UnpairedToken = (*) "." ["*"]
    //   UnpairedToken = (*) "." [","]
    //   UnpairedToken = (*) "." ["."]
    //   UnpairedToken = (*) "." [";"]
    //   UnpairedToken = (*) "." ["="]
    //   UnpairedToken = (*) "." ["["]
    //   UnpairedToken = (*) "." ["]"]
    //   UnpairedToken = (*) "." ["{"]
    //   UnpairedToken = (*) "." [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "." [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "." [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "." [r#"\'.\'"#]
    //   UnpairedToken = (*) "." [r#"[0-9]+"#]
    //   UnpairedToken = (*) "." [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) ";" ["("]
    //   UnpairedToken = (*) ";" ["*"]
    //   UnpairedToken = (*) ";" [","]
    //   UnpairedToken = (*) ";" ["."]
    //   UnpairedToken = (*) ";" [";"]
    //   UnpairedToken = (*) ";" ["="]
    //   UnpairedToken = (*) ";" ["["]
    //   UnpairedToken = (*) ";" ["]"]
    //   UnpairedToken = (*) ";" ["{"]
    //   UnpairedToken = (*) ";" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) ";" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) ";" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) ";" [r#"\'.\'"#]
    //   UnpairedToken = (*) ";" [r#"[0-9]+"#]
    //   UnpairedToken = (*) ";" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "=" ["("]
    //   UnpairedToken = (*) "=" ["*"]
    //   UnpairedToken = (*) "=" [","]
    //   UnpairedToken = (*) "=" ["."]
    //   UnpairedToken = (*) "=" [";"]
    //   UnpairedToken = (*) "=" ["="]
    //   UnpairedToken = (*) "=" ["["]
    //   UnpairedToken = (*) "=" ["]"]
    //   UnpairedToken = (*) "=" ["{"]
    //   UnpairedToken = (*) "=" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "=" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "=" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "=" [r#"\'.\'"#]
    //   UnpairedToken = (*) "=" [r#"[0-9]+"#]
    //   UnpairedToken = (*) "=" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["("]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["*"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [","]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["."]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [";"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["="]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["["]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["]"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["{"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["("]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["*"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [","]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["."]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [";"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["="]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["["]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["]"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["{"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["("]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["*"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [","]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["."]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [";"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["="]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["["]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["]"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["{"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\'.\'"# ["("]
    //   UnpairedToken = (*) r#"\'.\'"# ["*"]
    //   UnpairedToken = (*) r#"\'.\'"# [","]
    //   UnpairedToken = (*) r#"\'.\'"# ["."]
    //   UnpairedToken = (*) r#"\'.\'"# [";"]
    //   UnpairedToken = (*) r#"\'.\'"# ["="]
    //   UnpairedToken = (*) r#"\'.\'"# ["["]
    //   UnpairedToken = (*) r#"\'.\'"# ["]"]
    //   UnpairedToken = (*) r#"\'.\'"# ["{"]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Shift(S126)
    //   "*" -> Shift(S127)
    //   "," -> Shift(S128)
    //   "." -> Shift(S129)
    //   ";" -> Shift(S130)
    //   "=" -> Shift(S131)
    //   "[" -> Shift(S132)
    //   "]" -> Shift(S156)
    //   "{" -> Shift(S134)
    //   r#"\"[^\"]*\""# -> Shift(S135)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S136)
    //   r#"$[$0-9]+"# -> Shift(S137)
    //   r#"\'.\'"# -> Shift(S138)
    //   r#"[0-9]+"# -> Shift(S139)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S140)
    //
    //   Ident -> S121
    //   Integer -> S122
    //   TokenTree -> S123
    //   TokenTree+ -> S155
    //   UnpairedToken -> S125
    pub fn __state132<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state126(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state127(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state128(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (17, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state129(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state130(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state131(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state132(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (22, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state156(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state134(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state135(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state136(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state137(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state138(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state139(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (31, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state140(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ident(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state121(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Integer(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state122(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::TokenTree(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state123(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::TokenTree_2b(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state155(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::UnpairedToken(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state125(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 133
    //   TokenTree = "[" "]" (*) ["("]
    //   TokenTree = "[" "]" (*) ["*"]
    //   TokenTree = "[" "]" (*) [","]
    //   TokenTree = "[" "]" (*) ["."]
    //   TokenTree = "[" "]" (*) [";"]
    //   TokenTree = "[" "]" (*) ["="]
    //   TokenTree = "[" "]" (*) ["["]
    //   TokenTree = "[" "]" (*) ["{"]
    //   TokenTree = "[" "]" (*) ["}"]
    //   TokenTree = "[" "]" (*) [r#"\"[^\"]*\""#]
    //   TokenTree = "[" "]" (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "[" "]" (*) [r#"$[$0-9]+"#]
    //   TokenTree = "[" "]" (*) [r#"\'.\'"#]
    //   TokenTree = "[" "]" (*) [r#"[0-9]+"#]
    //   TokenTree = "[" "]" (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(TokenTree = "[", "]" => ActionFn(79);)
    //   "*" -> Reduce(TokenTree = "[", "]" => ActionFn(79);)
    //   "," -> Reduce(TokenTree = "[", "]" => ActionFn(79);)
    //   "." -> Reduce(TokenTree = "[", "]" => ActionFn(79);)
    //   ";" -> Reduce(TokenTree = "[", "]" => ActionFn(79);)
    //   "=" -> Reduce(TokenTree = "[", "]" => ActionFn(79);)
    //   "[" -> Reduce(TokenTree = "[", "]" => ActionFn(79);)
    //   "{" -> Reduce(TokenTree = "[", "]" => ActionFn(79);)
    //   "}" -> Reduce(TokenTree = "[", "]" => ActionFn(79);)
    //   r#"\"[^\"]*\""# -> Reduce(TokenTree = "[", "]" => ActionFn(79);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(TokenTree = "[", "]" => ActionFn(79);)
    //   r#"$[$0-9]+"# -> Reduce(TokenTree = "[", "]" => ActionFn(79);)
    //   r#"\'.\'"# -> Reduce(TokenTree = "[", "]" => ActionFn(79);)
    //   r#"[0-9]+"# -> Reduce(TokenTree = "[", "]" => ActionFn(79);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(TokenTree = "[", "]" => ActionFn(79);)
    //
    pub fn __state133<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action79(input, __sym0, __sym1, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::TokenTree(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 134
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["("]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["*"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [","]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["."]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [";"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["="]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["["]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["{"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["}"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\"[^\"]*\""#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"$[$0-9]+"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[0-9]+"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Integer = (*) r#"[0-9]+"# ["("]
    //   Integer = (*) r#"[0-9]+"# ["*"]
    //   Integer = (*) r#"[0-9]+"# [","]
    //   Integer = (*) r#"[0-9]+"# ["."]
    //   Integer = (*) r#"[0-9]+"# [";"]
    //   Integer = (*) r#"[0-9]+"# ["="]
    //   Integer = (*) r#"[0-9]+"# ["["]
    //   Integer = (*) r#"[0-9]+"# ["{"]
    //   Integer = (*) r#"[0-9]+"# ["}"]
    //   Integer = (*) r#"[0-9]+"# [r#"\"[^\"]*\""#]
    //   Integer = (*) r#"[0-9]+"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Integer = (*) r#"[0-9]+"# [r#"$[$0-9]+"#]
    //   Integer = (*) r#"[0-9]+"# [r#"\'.\'"#]
    //   Integer = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Integer = (*) r#"[0-9]+"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) UnpairedToken ["("]
    //   TokenTree = (*) UnpairedToken ["*"]
    //   TokenTree = (*) UnpairedToken [","]
    //   TokenTree = (*) UnpairedToken ["."]
    //   TokenTree = (*) UnpairedToken [";"]
    //   TokenTree = (*) UnpairedToken ["="]
    //   TokenTree = (*) UnpairedToken ["["]
    //   TokenTree = (*) UnpairedToken ["{"]
    //   TokenTree = (*) UnpairedToken ["}"]
    //   TokenTree = (*) UnpairedToken [r#"\"[^\"]*\""#]
    //   TokenTree = (*) UnpairedToken [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) UnpairedToken [r#"$[$0-9]+"#]
    //   TokenTree = (*) UnpairedToken [r#"\'.\'"#]
    //   TokenTree = (*) UnpairedToken [r#"[0-9]+"#]
    //   TokenTree = (*) UnpairedToken [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" TokenTree+ ")" ["("]
    //   TokenTree = (*) "(" TokenTree+ ")" ["*"]
    //   TokenTree = (*) "(" TokenTree+ ")" [","]
    //   TokenTree = (*) "(" TokenTree+ ")" ["."]
    //   TokenTree = (*) "(" TokenTree+ ")" [";"]
    //   TokenTree = (*) "(" TokenTree+ ")" ["="]
    //   TokenTree = (*) "(" TokenTree+ ")" ["["]
    //   TokenTree = (*) "(" TokenTree+ ")" ["{"]
    //   TokenTree = (*) "(" TokenTree+ ")" ["}"]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"\'.\'"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"[0-9]+"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" ")" ["("]
    //   TokenTree = (*) "(" ")" ["*"]
    //   TokenTree = (*) "(" ")" [","]
    //   TokenTree = (*) "(" ")" ["."]
    //   TokenTree = (*) "(" ")" [";"]
    //   TokenTree = (*) "(" ")" ["="]
    //   TokenTree = (*) "(" ")" ["["]
    //   TokenTree = (*) "(" ")" ["{"]
    //   TokenTree = (*) "(" ")" ["}"]
    //   TokenTree = (*) "(" ")" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "(" ")" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" ")" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "(" ")" [r#"\'.\'"#]
    //   TokenTree = (*) "(" ")" [r#"[0-9]+"#]
    //   TokenTree = (*) "(" ")" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" TokenTree+ "]" ["("]
    //   TokenTree = (*) "[" TokenTree+ "]" ["*"]
    //   TokenTree = (*) "[" TokenTree+ "]" [","]
    //   TokenTree = (*) "[" TokenTree+ "]" ["."]
    //   TokenTree = (*) "[" TokenTree+ "]" [";"]
    //   TokenTree = (*) "[" TokenTree+ "]" ["="]
    //   TokenTree = (*) "[" TokenTree+ "]" ["["]
    //   TokenTree = (*) "[" TokenTree+ "]" ["{"]
    //   TokenTree = (*) "[" TokenTree+ "]" ["}"]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"\'.\'"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"[0-9]+"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" "]" ["("]
    //   TokenTree = (*) "[" "]" ["*"]
    //   TokenTree = (*) "[" "]" [","]
    //   TokenTree = (*) "[" "]" ["."]
    //   TokenTree = (*) "[" "]" [";"]
    //   TokenTree = (*) "[" "]" ["="]
    //   TokenTree = (*) "[" "]" ["["]
    //   TokenTree = (*) "[" "]" ["{"]
    //   TokenTree = (*) "[" "]" ["}"]
    //   TokenTree = (*) "[" "]" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "[" "]" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" "]" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "[" "]" [r#"\'.\'"#]
    //   TokenTree = (*) "[" "]" [r#"[0-9]+"#]
    //   TokenTree = (*) "[" "]" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" TokenTree+ "}" ["("]
    //   TokenTree = (*) "{" TokenTree+ "}" ["*"]
    //   TokenTree = (*) "{" TokenTree+ "}" [","]
    //   TokenTree = (*) "{" TokenTree+ "}" ["."]
    //   TokenTree = (*) "{" TokenTree+ "}" [";"]
    //   TokenTree = (*) "{" TokenTree+ "}" ["="]
    //   TokenTree = (*) "{" TokenTree+ "}" ["["]
    //   TokenTree = (*) "{" TokenTree+ "}" ["{"]
    //   TokenTree = (*) "{" TokenTree+ "}" ["}"]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"\'.\'"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"[0-9]+"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "{" (*) TokenTree+ "}" ["("]
    //   TokenTree = "{" (*) TokenTree+ "}" ["*"]
    //   TokenTree = "{" (*) TokenTree+ "}" [","]
    //   TokenTree = "{" (*) TokenTree+ "}" ["."]
    //   TokenTree = "{" (*) TokenTree+ "}" [";"]
    //   TokenTree = "{" (*) TokenTree+ "}" ["="]
    //   TokenTree = "{" (*) TokenTree+ "}" ["["]
    //   TokenTree = "{" (*) TokenTree+ "}" ["]"]
    //   TokenTree = "{" (*) TokenTree+ "}" ["{"]
    //   TokenTree = "{" (*) TokenTree+ "}" [r#"\"[^\"]*\""#]
    //   TokenTree = "{" (*) TokenTree+ "}" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "{" (*) TokenTree+ "}" [r#"$[$0-9]+"#]
    //   TokenTree = "{" (*) TokenTree+ "}" [r#"\'.\'"#]
    //   TokenTree = "{" (*) TokenTree+ "}" [r#"[0-9]+"#]
    //   TokenTree = "{" (*) TokenTree+ "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" "}" ["("]
    //   TokenTree = (*) "{" "}" ["*"]
    //   TokenTree = (*) "{" "}" [","]
    //   TokenTree = (*) "{" "}" ["."]
    //   TokenTree = (*) "{" "}" [";"]
    //   TokenTree = (*) "{" "}" ["="]
    //   TokenTree = (*) "{" "}" ["["]
    //   TokenTree = (*) "{" "}" ["{"]
    //   TokenTree = (*) "{" "}" ["}"]
    //   TokenTree = (*) "{" "}" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "{" "}" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" "}" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "{" "}" [r#"\'.\'"#]
    //   TokenTree = (*) "{" "}" [r#"[0-9]+"#]
    //   TokenTree = (*) "{" "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "{" (*) "}" ["("]
    //   TokenTree = "{" (*) "}" ["*"]
    //   TokenTree = "{" (*) "}" [","]
    //   TokenTree = "{" (*) "}" ["."]
    //   TokenTree = "{" (*) "}" [";"]
    //   TokenTree = "{" (*) "}" ["="]
    //   TokenTree = "{" (*) "}" ["["]
    //   TokenTree = "{" (*) "}" ["]"]
    //   TokenTree = "{" (*) "}" ["{"]
    //   TokenTree = "{" (*) "}" [r#"\"[^\"]*\""#]
    //   TokenTree = "{" (*) "}" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "{" (*) "}" [r#"$[$0-9]+"#]
    //   TokenTree = "{" (*) "}" [r#"\'.\'"#]
    //   TokenTree = "{" (*) "}" [r#"[0-9]+"#]
    //   TokenTree = "{" (*) "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = (*) TokenTree ["("]
    //   TokenTree+ = (*) TokenTree ["*"]
    //   TokenTree+ = (*) TokenTree [","]
    //   TokenTree+ = (*) TokenTree ["."]
    //   TokenTree+ = (*) TokenTree [";"]
    //   TokenTree+ = (*) TokenTree ["="]
    //   TokenTree+ = (*) TokenTree ["["]
    //   TokenTree+ = (*) TokenTree ["{"]
    //   TokenTree+ = (*) TokenTree ["}"]
    //   TokenTree+ = (*) TokenTree [r#"\"[^\"]*\""#]
    //   TokenTree+ = (*) TokenTree [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = (*) TokenTree [r#"$[$0-9]+"#]
    //   TokenTree+ = (*) TokenTree [r#"\'.\'"#]
    //   TokenTree+ = (*) TokenTree [r#"[0-9]+"#]
    //   TokenTree+ = (*) TokenTree [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["("]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["*"]
    //   TokenTree+ = (*) TokenTree+ TokenTree [","]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["."]
    //   TokenTree+ = (*) TokenTree+ TokenTree [";"]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["="]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["["]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["{"]
    //   TokenTree+ = (*) TokenTree+ TokenTree ["}"]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"\"[^\"]*\""#]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"$[$0-9]+"#]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"\'.\'"#]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"[0-9]+"#]
    //   TokenTree+ = (*) TokenTree+ TokenTree [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Ident ["("]
    //   UnpairedToken = (*) Ident ["*"]
    //   UnpairedToken = (*) Ident [","]
    //   UnpairedToken = (*) Ident ["."]
    //   UnpairedToken = (*) Ident [";"]
    //   UnpairedToken = (*) Ident ["="]
    //   UnpairedToken = (*) Ident ["["]
    //   UnpairedToken = (*) Ident ["{"]
    //   UnpairedToken = (*) Ident ["}"]
    //   UnpairedToken = (*) Ident [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) Ident [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Ident [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) Ident [r#"\'.\'"#]
    //   UnpairedToken = (*) Ident [r#"[0-9]+"#]
    //   UnpairedToken = (*) Ident [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Integer ["("]
    //   UnpairedToken = (*) Integer ["*"]
    //   UnpairedToken = (*) Integer [","]
    //   UnpairedToken = (*) Integer ["."]
    //   UnpairedToken = (*) Integer [";"]
    //   UnpairedToken = (*) Integer ["="]
    //   UnpairedToken = (*) Integer ["["]
    //   UnpairedToken = (*) Integer ["{"]
    //   UnpairedToken = (*) Integer ["}"]
    //   UnpairedToken = (*) Integer [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) Integer [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Integer [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) Integer [r#"\'.\'"#]
    //   UnpairedToken = (*) Integer [r#"[0-9]+"#]
    //   UnpairedToken = (*) Integer [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "*" ["("]
    //   UnpairedToken = (*) "*" ["*"]
    //   UnpairedToken = (*) "*" [","]
    //   UnpairedToken = (*) "*" ["."]
    //   UnpairedToken = (*) "*" [";"]
    //   UnpairedToken = (*) "*" ["="]
    //   UnpairedToken = (*) "*" ["["]
    //   UnpairedToken = (*) "*" ["{"]
    //   UnpairedToken = (*) "*" ["}"]
    //   UnpairedToken = (*) "*" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "*" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "*" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "*" [r#"\'.\'"#]
    //   UnpairedToken = (*) "*" [r#"[0-9]+"#]
    //   UnpairedToken = (*) "*" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "," ["("]
    //   UnpairedToken = (*) "," ["*"]
    //   UnpairedToken = (*) "," [","]
    //   UnpairedToken = (*) "," ["."]
    //   UnpairedToken = (*) "," [";"]
    //   UnpairedToken = (*) "," ["="]
    //   UnpairedToken = (*) "," ["["]
    //   UnpairedToken = (*) "," ["{"]
    //   UnpairedToken = (*) "," ["}"]
    //   UnpairedToken = (*) "," [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "," [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "," [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "," [r#"\'.\'"#]
    //   UnpairedToken = (*) "," [r#"[0-9]+"#]
    //   UnpairedToken = (*) "," [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "." ["("]
    //   UnpairedToken = (*) "." ["*"]
    //   UnpairedToken = (*) "." [","]
    //   UnpairedToken = (*) "." ["."]
    //   UnpairedToken = (*) "." [";"]
    //   UnpairedToken = (*) "." ["="]
    //   UnpairedToken = (*) "." ["["]
    //   UnpairedToken = (*) "." ["{"]
    //   UnpairedToken = (*) "." ["}"]
    //   UnpairedToken = (*) "." [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "." [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "." [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "." [r#"\'.\'"#]
    //   UnpairedToken = (*) "." [r#"[0-9]+"#]
    //   UnpairedToken = (*) "." [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) ";" ["("]
    //   UnpairedToken = (*) ";" ["*"]
    //   UnpairedToken = (*) ";" [","]
    //   UnpairedToken = (*) ";" ["."]
    //   UnpairedToken = (*) ";" [";"]
    //   UnpairedToken = (*) ";" ["="]
    //   UnpairedToken = (*) ";" ["["]
    //   UnpairedToken = (*) ";" ["{"]
    //   UnpairedToken = (*) ";" ["}"]
    //   UnpairedToken = (*) ";" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) ";" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) ";" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) ";" [r#"\'.\'"#]
    //   UnpairedToken = (*) ";" [r#"[0-9]+"#]
    //   UnpairedToken = (*) ";" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "=" ["("]
    //   UnpairedToken = (*) "=" ["*"]
    //   UnpairedToken = (*) "=" [","]
    //   UnpairedToken = (*) "=" ["."]
    //   UnpairedToken = (*) "=" [";"]
    //   UnpairedToken = (*) "=" ["="]
    //   UnpairedToken = (*) "=" ["["]
    //   UnpairedToken = (*) "=" ["{"]
    //   UnpairedToken = (*) "=" ["}"]
    //   UnpairedToken = (*) "=" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "=" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "=" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "=" [r#"\'.\'"#]
    //   UnpairedToken = (*) "=" [r#"[0-9]+"#]
    //   UnpairedToken = (*) "=" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["("]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["*"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [","]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["."]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [";"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["="]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["["]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["{"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["}"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["("]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["*"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [","]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["."]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [";"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["="]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["["]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["{"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["}"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["("]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["*"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [","]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["."]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [";"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["="]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["["]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["{"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["}"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\'.\'"# ["("]
    //   UnpairedToken = (*) r#"\'.\'"# ["*"]
    //   UnpairedToken = (*) r#"\'.\'"# [","]
    //   UnpairedToken = (*) r#"\'.\'"# ["."]
    //   UnpairedToken = (*) r#"\'.\'"# [";"]
    //   UnpairedToken = (*) r#"\'.\'"# ["="]
    //   UnpairedToken = (*) r#"\'.\'"# ["["]
    //   UnpairedToken = (*) r#"\'.\'"# ["{"]
    //   UnpairedToken = (*) r#"\'.\'"# ["}"]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Shift(S83)
    //   "*" -> Shift(S84)
    //   "," -> Shift(S85)
    //   "." -> Shift(S86)
    //   ";" -> Shift(S87)
    //   "=" -> Shift(S88)
    //   "[" -> Shift(S89)
    //   "{" -> Shift(S90)
    //   "}" -> Shift(S158)
    //   r#"\"[^\"]*\""# -> Shift(S92)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S93)
    //   r#"$[$0-9]+"# -> Shift(S94)
    //   r#"\'.\'"# -> Shift(S95)
    //   r#"[0-9]+"# -> Shift(S96)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S97)
    //
    //   Ident -> S78
    //   Integer -> S79
    //   TokenTree -> S80
    //   TokenTree+ -> S157
    //   UnpairedToken -> S82
    pub fn __state134<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state83(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state84(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state85(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (17, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state86(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state87(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state88(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state89(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state90(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state158(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state92(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state93(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state94(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state95(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state96(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (31, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state97(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ident(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state78(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Integer(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state79(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::TokenTree(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state80(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::TokenTree_2b(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state157(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::UnpairedToken(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state82(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 135
    //   UnpairedToken = r#"\"[^\"]*\""# (*) ["("]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) ["*"]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) [","]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) ["."]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) [";"]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) ["="]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) ["["]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) ["]"]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) ["{"]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) [r#"\"[^\"]*\""#]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) [r#"$[$0-9]+"#]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) [r#"\'.\'"#]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) [r#"[0-9]+"#]
    //   UnpairedToken = r#"\"[^\"]*\""# (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   "*" -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   "," -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   "." -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   ";" -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   "=" -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   "[" -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   "]" -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   "{" -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   r#"\"[^\"]*\""# -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   r#"$[$0-9]+"# -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   r#"\'.\'"# -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   r#"[0-9]+"# -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = r#"\"[^\"]*\""# => ActionFn(38);)
    //
    pub fn __state135<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action38(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::UnpairedToken(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 136
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["("]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["*"]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) [","]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["."]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) [";"]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["="]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["["]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["]"]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["{"]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) [r#"\"[^\"]*\""#]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) [r#"$[$0-9]+"#]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) [r#"\'.\'"#]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) [r#"[0-9]+"#]
    //   UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   "*" -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   "," -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   "." -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   ";" -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   "=" -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   "[" -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   "]" -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   "{" -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   r#"\"[^\"]*\""# -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   r#"$[$0-9]+"# -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   r#"\'.\'"# -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   r#"[0-9]+"# -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = r#"#[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(44);)
    //
    pub fn __state136<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action44(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::UnpairedToken(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 137
    //   UnpairedToken = r#"$[$0-9]+"# (*) ["("]
    //   UnpairedToken = r#"$[$0-9]+"# (*) ["*"]
    //   UnpairedToken = r#"$[$0-9]+"# (*) [","]
    //   UnpairedToken = r#"$[$0-9]+"# (*) ["."]
    //   UnpairedToken = r#"$[$0-9]+"# (*) [";"]
    //   UnpairedToken = r#"$[$0-9]+"# (*) ["="]
    //   UnpairedToken = r#"$[$0-9]+"# (*) ["["]
    //   UnpairedToken = r#"$[$0-9]+"# (*) ["]"]
    //   UnpairedToken = r#"$[$0-9]+"# (*) ["{"]
    //   UnpairedToken = r#"$[$0-9]+"# (*) [r#"\"[^\"]*\""#]
    //   UnpairedToken = r#"$[$0-9]+"# (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = r#"$[$0-9]+"# (*) [r#"$[$0-9]+"#]
    //   UnpairedToken = r#"$[$0-9]+"# (*) [r#"\'.\'"#]
    //   UnpairedToken = r#"$[$0-9]+"# (*) [r#"[0-9]+"#]
    //   UnpairedToken = r#"$[$0-9]+"# (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   "*" -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   "," -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   "." -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   ";" -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   "=" -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   "[" -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   "]" -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   "{" -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   r#"\"[^\"]*\""# -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   r#"$[$0-9]+"# -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   r#"\'.\'"# -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   r#"[0-9]+"# -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = r#"$[$0-9]+"# => ActionFn(43);)
    //
    pub fn __state137<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action43(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::UnpairedToken(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 138
    //   UnpairedToken = r#"\'.\'"# (*) ["("]
    //   UnpairedToken = r#"\'.\'"# (*) ["*"]
    //   UnpairedToken = r#"\'.\'"# (*) [","]
    //   UnpairedToken = r#"\'.\'"# (*) ["."]
    //   UnpairedToken = r#"\'.\'"# (*) [";"]
    //   UnpairedToken = r#"\'.\'"# (*) ["="]
    //   UnpairedToken = r#"\'.\'"# (*) ["["]
    //   UnpairedToken = r#"\'.\'"# (*) ["]"]
    //   UnpairedToken = r#"\'.\'"# (*) ["{"]
    //   UnpairedToken = r#"\'.\'"# (*) [r#"\"[^\"]*\""#]
    //   UnpairedToken = r#"\'.\'"# (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = r#"\'.\'"# (*) [r#"$[$0-9]+"#]
    //   UnpairedToken = r#"\'.\'"# (*) [r#"\'.\'"#]
    //   UnpairedToken = r#"\'.\'"# (*) [r#"[0-9]+"#]
    //   UnpairedToken = r#"\'.\'"# (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   "*" -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   "," -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   "." -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   ";" -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   "=" -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   "[" -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   "]" -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   "{" -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   r#"\"[^\"]*\""# -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   r#"$[$0-9]+"# -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   r#"\'.\'"# -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   r#"[0-9]+"# -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(UnpairedToken = r#"\'.\'"# => ActionFn(46);)
    //
    pub fn __state138<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action46(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::UnpairedToken(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 139
    //   Integer = r#"[0-9]+"# (*) ["("]
    //   Integer = r#"[0-9]+"# (*) ["*"]
    //   Integer = r#"[0-9]+"# (*) [","]
    //   Integer = r#"[0-9]+"# (*) ["."]
    //   Integer = r#"[0-9]+"# (*) [";"]
    //   Integer = r#"[0-9]+"# (*) ["="]
    //   Integer = r#"[0-9]+"# (*) ["["]
    //   Integer = r#"[0-9]+"# (*) ["]"]
    //   Integer = r#"[0-9]+"# (*) ["{"]
    //   Integer = r#"[0-9]+"# (*) [r#"\"[^\"]*\""#]
    //   Integer = r#"[0-9]+"# (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Integer = r#"[0-9]+"# (*) [r#"$[$0-9]+"#]
    //   Integer = r#"[0-9]+"# (*) [r#"\'.\'"#]
    //   Integer = r#"[0-9]+"# (*) [r#"[0-9]+"#]
    //   Integer = r#"[0-9]+"# (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   "*" -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   "," -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   "." -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   ";" -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   "=" -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   "[" -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   "]" -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   "{" -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   r#"\"[^\"]*\""# -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   r#"$[$0-9]+"# -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   r#"\'.\'"# -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   r#"[0-9]+"# -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(Integer = r#"[0-9]+"# => ActionFn(15);)
    //
    pub fn __state139<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action15(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Integer(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 140
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["("]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["*"]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) [","]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["."]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) [";"]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["="]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["["]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["]"]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) ["{"]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) [r#"\"[^\"]*\""#]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) [r#"$[$0-9]+"#]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) [r#"\'.\'"#]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) [r#"[0-9]+"#]
    //   Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   "*" -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   "," -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   "." -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   ";" -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   "=" -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   "[" -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   "]" -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   "{" -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   r#"\"[^\"]*\""# -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   r#"$[$0-9]+"# -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   r#"\'.\'"# -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   r#"[0-9]+"# -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(Ident = r#"[_a-zA-Z][_a-zA-Z0-9]*"# => ActionFn(14);)
    //
    pub fn __state140<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action14(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ident(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 141
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["("]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["*"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [","]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["."]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [";"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["="]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["["]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["{"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["}"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\"[^\"]*\""#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"$[$0-9]+"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[0-9]+"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Integer = (*) r#"[0-9]+"# ["("]
    //   Integer = (*) r#"[0-9]+"# ["*"]
    //   Integer = (*) r#"[0-9]+"# [","]
    //   Integer = (*) r#"[0-9]+"# ["."]
    //   Integer = (*) r#"[0-9]+"# [";"]
    //   Integer = (*) r#"[0-9]+"# ["="]
    //   Integer = (*) r#"[0-9]+"# ["["]
    //   Integer = (*) r#"[0-9]+"# ["{"]
    //   Integer = (*) r#"[0-9]+"# ["}"]
    //   Integer = (*) r#"[0-9]+"# [r#"\"[^\"]*\""#]
    //   Integer = (*) r#"[0-9]+"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Integer = (*) r#"[0-9]+"# [r#"$[$0-9]+"#]
    //   Integer = (*) r#"[0-9]+"# [r#"\'.\'"#]
    //   Integer = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Integer = (*) r#"[0-9]+"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) UnpairedToken ["("]
    //   TokenTree = (*) UnpairedToken ["*"]
    //   TokenTree = (*) UnpairedToken [","]
    //   TokenTree = (*) UnpairedToken ["."]
    //   TokenTree = (*) UnpairedToken [";"]
    //   TokenTree = (*) UnpairedToken ["="]
    //   TokenTree = (*) UnpairedToken ["["]
    //   TokenTree = (*) UnpairedToken ["{"]
    //   TokenTree = (*) UnpairedToken ["}"]
    //   TokenTree = (*) UnpairedToken [r#"\"[^\"]*\""#]
    //   TokenTree = (*) UnpairedToken [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) UnpairedToken [r#"$[$0-9]+"#]
    //   TokenTree = (*) UnpairedToken [r#"\'.\'"#]
    //   TokenTree = (*) UnpairedToken [r#"[0-9]+"#]
    //   TokenTree = (*) UnpairedToken [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" TokenTree+ ")" ["("]
    //   TokenTree = (*) "(" TokenTree+ ")" ["*"]
    //   TokenTree = (*) "(" TokenTree+ ")" [","]
    //   TokenTree = (*) "(" TokenTree+ ")" ["."]
    //   TokenTree = (*) "(" TokenTree+ ")" [";"]
    //   TokenTree = (*) "(" TokenTree+ ")" ["="]
    //   TokenTree = (*) "(" TokenTree+ ")" ["["]
    //   TokenTree = (*) "(" TokenTree+ ")" ["{"]
    //   TokenTree = (*) "(" TokenTree+ ")" ["}"]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"\'.\'"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"[0-9]+"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" ")" ["("]
    //   TokenTree = (*) "(" ")" ["*"]
    //   TokenTree = (*) "(" ")" [","]
    //   TokenTree = (*) "(" ")" ["."]
    //   TokenTree = (*) "(" ")" [";"]
    //   TokenTree = (*) "(" ")" ["="]
    //   TokenTree = (*) "(" ")" ["["]
    //   TokenTree = (*) "(" ")" ["{"]
    //   TokenTree = (*) "(" ")" ["}"]
    //   TokenTree = (*) "(" ")" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "(" ")" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" ")" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "(" ")" [r#"\'.\'"#]
    //   TokenTree = (*) "(" ")" [r#"[0-9]+"#]
    //   TokenTree = (*) "(" ")" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" TokenTree+ "]" ["("]
    //   TokenTree = (*) "[" TokenTree+ "]" ["*"]
    //   TokenTree = (*) "[" TokenTree+ "]" [","]
    //   TokenTree = (*) "[" TokenTree+ "]" ["."]
    //   TokenTree = (*) "[" TokenTree+ "]" [";"]
    //   TokenTree = (*) "[" TokenTree+ "]" ["="]
    //   TokenTree = (*) "[" TokenTree+ "]" ["["]
    //   TokenTree = (*) "[" TokenTree+ "]" ["{"]
    //   TokenTree = (*) "[" TokenTree+ "]" ["}"]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"\'.\'"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"[0-9]+"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" "]" ["("]
    //   TokenTree = (*) "[" "]" ["*"]
    //   TokenTree = (*) "[" "]" [","]
    //   TokenTree = (*) "[" "]" ["."]
    //   TokenTree = (*) "[" "]" [";"]
    //   TokenTree = (*) "[" "]" ["="]
    //   TokenTree = (*) "[" "]" ["["]
    //   TokenTree = (*) "[" "]" ["{"]
    //   TokenTree = (*) "[" "]" ["}"]
    //   TokenTree = (*) "[" "]" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "[" "]" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" "]" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "[" "]" [r#"\'.\'"#]
    //   TokenTree = (*) "[" "]" [r#"[0-9]+"#]
    //   TokenTree = (*) "[" "]" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" TokenTree+ "}" ["("]
    //   TokenTree = (*) "{" TokenTree+ "}" ["*"]
    //   TokenTree = (*) "{" TokenTree+ "}" [","]
    //   TokenTree = (*) "{" TokenTree+ "}" ["."]
    //   TokenTree = (*) "{" TokenTree+ "}" [";"]
    //   TokenTree = (*) "{" TokenTree+ "}" ["="]
    //   TokenTree = (*) "{" TokenTree+ "}" ["["]
    //   TokenTree = (*) "{" TokenTree+ "}" ["{"]
    //   TokenTree = (*) "{" TokenTree+ "}" ["}"]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"\'.\'"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"[0-9]+"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "{" TokenTree+ (*) "}" ["("]
    //   TokenTree = "{" TokenTree+ (*) "}" ["*"]
    //   TokenTree = "{" TokenTree+ (*) "}" [","]
    //   TokenTree = "{" TokenTree+ (*) "}" ["."]
    //   TokenTree = "{" TokenTree+ (*) "}" [";"]
    //   TokenTree = "{" TokenTree+ (*) "}" ["="]
    //   TokenTree = "{" TokenTree+ (*) "}" ["["]
    //   TokenTree = "{" TokenTree+ (*) "}" ["{"]
    //   TokenTree = "{" TokenTree+ (*) "}" ["}"]
    //   TokenTree = "{" TokenTree+ (*) "}" [r#"\"[^\"]*\""#]
    //   TokenTree = "{" TokenTree+ (*) "}" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "{" TokenTree+ (*) "}" [r#"$[$0-9]+"#]
    //   TokenTree = "{" TokenTree+ (*) "}" [r#"\'.\'"#]
    //   TokenTree = "{" TokenTree+ (*) "}" [r#"[0-9]+"#]
    //   TokenTree = "{" TokenTree+ (*) "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" "}" ["("]
    //   TokenTree = (*) "{" "}" ["*"]
    //   TokenTree = (*) "{" "}" [","]
    //   TokenTree = (*) "{" "}" ["."]
    //   TokenTree = (*) "{" "}" [";"]
    //   TokenTree = (*) "{" "}" ["="]
    //   TokenTree = (*) "{" "}" ["["]
    //   TokenTree = (*) "{" "}" ["{"]
    //   TokenTree = (*) "{" "}" ["}"]
    //   TokenTree = (*) "{" "}" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "{" "}" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" "}" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "{" "}" [r#"\'.\'"#]
    //   TokenTree = (*) "{" "}" [r#"[0-9]+"#]
    //   TokenTree = (*) "{" "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["("]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["*"]
    //   TokenTree+ = TokenTree+ (*) TokenTree [","]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["."]
    //   TokenTree+ = TokenTree+ (*) TokenTree [";"]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["="]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["["]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["{"]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["}"]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"\"[^\"]*\""#]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"$[$0-9]+"#]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"\'.\'"#]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"[0-9]+"#]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Ident ["("]
    //   UnpairedToken = (*) Ident ["*"]
    //   UnpairedToken = (*) Ident [","]
    //   UnpairedToken = (*) Ident ["."]
    //   UnpairedToken = (*) Ident [";"]
    //   UnpairedToken = (*) Ident ["="]
    //   UnpairedToken = (*) Ident ["["]
    //   UnpairedToken = (*) Ident ["{"]
    //   UnpairedToken = (*) Ident ["}"]
    //   UnpairedToken = (*) Ident [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) Ident [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Ident [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) Ident [r#"\'.\'"#]
    //   UnpairedToken = (*) Ident [r#"[0-9]+"#]
    //   UnpairedToken = (*) Ident [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Integer ["("]
    //   UnpairedToken = (*) Integer ["*"]
    //   UnpairedToken = (*) Integer [","]
    //   UnpairedToken = (*) Integer ["."]
    //   UnpairedToken = (*) Integer [";"]
    //   UnpairedToken = (*) Integer ["="]
    //   UnpairedToken = (*) Integer ["["]
    //   UnpairedToken = (*) Integer ["{"]
    //   UnpairedToken = (*) Integer ["}"]
    //   UnpairedToken = (*) Integer [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) Integer [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Integer [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) Integer [r#"\'.\'"#]
    //   UnpairedToken = (*) Integer [r#"[0-9]+"#]
    //   UnpairedToken = (*) Integer [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "*" ["("]
    //   UnpairedToken = (*) "*" ["*"]
    //   UnpairedToken = (*) "*" [","]
    //   UnpairedToken = (*) "*" ["."]
    //   UnpairedToken = (*) "*" [";"]
    //   UnpairedToken = (*) "*" ["="]
    //   UnpairedToken = (*) "*" ["["]
    //   UnpairedToken = (*) "*" ["{"]
    //   UnpairedToken = (*) "*" ["}"]
    //   UnpairedToken = (*) "*" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "*" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "*" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "*" [r#"\'.\'"#]
    //   UnpairedToken = (*) "*" [r#"[0-9]+"#]
    //   UnpairedToken = (*) "*" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "," ["("]
    //   UnpairedToken = (*) "," ["*"]
    //   UnpairedToken = (*) "," [","]
    //   UnpairedToken = (*) "," ["."]
    //   UnpairedToken = (*) "," [";"]
    //   UnpairedToken = (*) "," ["="]
    //   UnpairedToken = (*) "," ["["]
    //   UnpairedToken = (*) "," ["{"]
    //   UnpairedToken = (*) "," ["}"]
    //   UnpairedToken = (*) "," [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "," [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "," [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "," [r#"\'.\'"#]
    //   UnpairedToken = (*) "," [r#"[0-9]+"#]
    //   UnpairedToken = (*) "," [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "." ["("]
    //   UnpairedToken = (*) "." ["*"]
    //   UnpairedToken = (*) "." [","]
    //   UnpairedToken = (*) "." ["."]
    //   UnpairedToken = (*) "." [";"]
    //   UnpairedToken = (*) "." ["="]
    //   UnpairedToken = (*) "." ["["]
    //   UnpairedToken = (*) "." ["{"]
    //   UnpairedToken = (*) "." ["}"]
    //   UnpairedToken = (*) "." [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "." [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "." [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "." [r#"\'.\'"#]
    //   UnpairedToken = (*) "." [r#"[0-9]+"#]
    //   UnpairedToken = (*) "." [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) ";" ["("]
    //   UnpairedToken = (*) ";" ["*"]
    //   UnpairedToken = (*) ";" [","]
    //   UnpairedToken = (*) ";" ["."]
    //   UnpairedToken = (*) ";" [";"]
    //   UnpairedToken = (*) ";" ["="]
    //   UnpairedToken = (*) ";" ["["]
    //   UnpairedToken = (*) ";" ["{"]
    //   UnpairedToken = (*) ";" ["}"]
    //   UnpairedToken = (*) ";" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) ";" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) ";" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) ";" [r#"\'.\'"#]
    //   UnpairedToken = (*) ";" [r#"[0-9]+"#]
    //   UnpairedToken = (*) ";" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "=" ["("]
    //   UnpairedToken = (*) "=" ["*"]
    //   UnpairedToken = (*) "=" [","]
    //   UnpairedToken = (*) "=" ["."]
    //   UnpairedToken = (*) "=" [";"]
    //   UnpairedToken = (*) "=" ["="]
    //   UnpairedToken = (*) "=" ["["]
    //   UnpairedToken = (*) "=" ["{"]
    //   UnpairedToken = (*) "=" ["}"]
    //   UnpairedToken = (*) "=" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "=" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "=" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "=" [r#"\'.\'"#]
    //   UnpairedToken = (*) "=" [r#"[0-9]+"#]
    //   UnpairedToken = (*) "=" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["("]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["*"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [","]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["."]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [";"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["="]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["["]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["{"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["}"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["("]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["*"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [","]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["."]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [";"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["="]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["["]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["{"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["}"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["("]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["*"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [","]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["."]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [";"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["="]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["["]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["{"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["}"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\'.\'"# ["("]
    //   UnpairedToken = (*) r#"\'.\'"# ["*"]
    //   UnpairedToken = (*) r#"\'.\'"# [","]
    //   UnpairedToken = (*) r#"\'.\'"# ["."]
    //   UnpairedToken = (*) r#"\'.\'"# [";"]
    //   UnpairedToken = (*) r#"\'.\'"# ["="]
    //   UnpairedToken = (*) r#"\'.\'"# ["["]
    //   UnpairedToken = (*) r#"\'.\'"# ["{"]
    //   UnpairedToken = (*) r#"\'.\'"# ["}"]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Shift(S83)
    //   "*" -> Shift(S84)
    //   "," -> Shift(S85)
    //   "." -> Shift(S86)
    //   ";" -> Shift(S87)
    //   "=" -> Shift(S88)
    //   "[" -> Shift(S89)
    //   "{" -> Shift(S90)
    //   "}" -> Shift(S159)
    //   r#"\"[^\"]*\""# -> Shift(S92)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S93)
    //   r#"$[$0-9]+"# -> Shift(S94)
    //   r#"\'.\'"# -> Shift(S95)
    //   r#"[0-9]+"# -> Shift(S96)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S97)
    //
    //   Ident -> S78
    //   Integer -> S79
    //   TokenTree -> S99
    //   UnpairedToken -> S82
    pub fn __state141<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<::std::vec::Vec<()>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state83(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state84(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state85(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (17, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state86(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state87(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state88(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state89(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state90(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state159(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state92(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state93(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state94(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state95(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state96(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (31, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state97(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ident(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state78(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state79(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::TokenTree(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state99(input, __lookbehind, __tokens, __lookahead, __sym1, __sym2));
                }
                __Nonterminal::UnpairedToken(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state82(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 142
    //   TokenTree = "{" "}" (*) ["("]
    //   TokenTree = "{" "}" (*) ["*"]
    //   TokenTree = "{" "}" (*) [","]
    //   TokenTree = "{" "}" (*) ["."]
    //   TokenTree = "{" "}" (*) [";"]
    //   TokenTree = "{" "}" (*) ["="]
    //   TokenTree = "{" "}" (*) ["["]
    //   TokenTree = "{" "}" (*) ["{"]
    //   TokenTree = "{" "}" (*) ["}"]
    //   TokenTree = "{" "}" (*) [r#"\"[^\"]*\""#]
    //   TokenTree = "{" "}" (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "{" "}" (*) [r#"$[$0-9]+"#]
    //   TokenTree = "{" "}" (*) [r#"\'.\'"#]
    //   TokenTree = "{" "}" (*) [r#"[0-9]+"#]
    //   TokenTree = "{" "}" (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(TokenTree = "{", "}" => ActionFn(75);)
    //   "*" -> Reduce(TokenTree = "{", "}" => ActionFn(75);)
    //   "," -> Reduce(TokenTree = "{", "}" => ActionFn(75);)
    //   "." -> Reduce(TokenTree = "{", "}" => ActionFn(75);)
    //   ";" -> Reduce(TokenTree = "{", "}" => ActionFn(75);)
    //   "=" -> Reduce(TokenTree = "{", "}" => ActionFn(75);)
    //   "[" -> Reduce(TokenTree = "{", "}" => ActionFn(75);)
    //   "{" -> Reduce(TokenTree = "{", "}" => ActionFn(75);)
    //   "}" -> Reduce(TokenTree = "{", "}" => ActionFn(75);)
    //   r#"\"[^\"]*\""# -> Reduce(TokenTree = "{", "}" => ActionFn(75);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(TokenTree = "{", "}" => ActionFn(75);)
    //   r#"$[$0-9]+"# -> Reduce(TokenTree = "{", "}" => ActionFn(75);)
    //   r#"\'.\'"# -> Reduce(TokenTree = "{", "}" => ActionFn(75);)
    //   r#"[0-9]+"# -> Reduce(TokenTree = "{", "}" => ActionFn(75);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(TokenTree = "{", "}" => ActionFn(75);)
    //
    pub fn __state142<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action75(input, __sym0, __sym1, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::TokenTree(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 143
    //   TokenTree+ = TokenTree+ TokenTree (*) ["("]
    //   TokenTree+ = TokenTree+ TokenTree (*) [")"]
    //   TokenTree+ = TokenTree+ TokenTree (*) ["*"]
    //   TokenTree+ = TokenTree+ TokenTree (*) [","]
    //   TokenTree+ = TokenTree+ TokenTree (*) ["."]
    //   TokenTree+ = TokenTree+ TokenTree (*) [";"]
    //   TokenTree+ = TokenTree+ TokenTree (*) ["="]
    //   TokenTree+ = TokenTree+ TokenTree (*) ["["]
    //   TokenTree+ = TokenTree+ TokenTree (*) ["{"]
    //   TokenTree+ = TokenTree+ TokenTree (*) [r#"\"[^\"]*\""#]
    //   TokenTree+ = TokenTree+ TokenTree (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = TokenTree+ TokenTree (*) [r#"$[$0-9]+"#]
    //   TokenTree+ = TokenTree+ TokenTree (*) [r#"\'.\'"#]
    //   TokenTree+ = TokenTree+ TokenTree (*) [r#"[0-9]+"#]
    //   TokenTree+ = TokenTree+ TokenTree (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(TokenTree+ = TokenTree+, TokenTree => ActionFn(66);)
    //   ")" -> Reduce(TokenTree+ = TokenTree+, TokenTree => ActionFn(66);)
    //   "*" -> Reduce(TokenTree+ = TokenTree+, TokenTree => ActionFn(66);)
    //   "," -> Reduce(TokenTree+ = TokenTree+, TokenTree => ActionFn(66);)
    //   "." -> Reduce(TokenTree+ = TokenTree+, TokenTree => ActionFn(66);)
    //   ";" -> Reduce(TokenTree+ = TokenTree+, TokenTree => ActionFn(66);)
    //   "=" -> Reduce(TokenTree+ = TokenTree+, TokenTree => ActionFn(66);)
    //   "[" -> Reduce(TokenTree+ = TokenTree+, TokenTree => ActionFn(66);)
    //   "{" -> Reduce(TokenTree+ = TokenTree+, TokenTree => ActionFn(66);)
    //   r#"\"[^\"]*\""# -> Reduce(TokenTree+ = TokenTree+, TokenTree => ActionFn(66);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(TokenTree+ = TokenTree+, TokenTree => ActionFn(66);)
    //   r#"$[$0-9]+"# -> Reduce(TokenTree+ = TokenTree+, TokenTree => ActionFn(66);)
    //   r#"\'.\'"# -> Reduce(TokenTree+ = TokenTree+, TokenTree => ActionFn(66);)
    //   r#"[0-9]+"# -> Reduce(TokenTree+ = TokenTree+, TokenTree => ActionFn(66);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(TokenTree+ = TokenTree+, TokenTree => ActionFn(66);)
    //
    pub fn __state143<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<::std::vec::Vec<()>>,
        __sym1: &mut Option<()>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (14, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action66(input, __sym0, __sym1, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::TokenTree_2b(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 144
    //   TokenTree = "(" TokenTree+ ")" (*) ["("]
    //   TokenTree = "(" TokenTree+ ")" (*) ["*"]
    //   TokenTree = "(" TokenTree+ ")" (*) [","]
    //   TokenTree = "(" TokenTree+ ")" (*) ["."]
    //   TokenTree = "(" TokenTree+ ")" (*) [";"]
    //   TokenTree = "(" TokenTree+ ")" (*) ["="]
    //   TokenTree = "(" TokenTree+ ")" (*) ["["]
    //   TokenTree = "(" TokenTree+ ")" (*) ["{"]
    //   TokenTree = "(" TokenTree+ ")" (*) ["}"]
    //   TokenTree = "(" TokenTree+ ")" (*) [r#"\"[^\"]*\""#]
    //   TokenTree = "(" TokenTree+ ")" (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "(" TokenTree+ ")" (*) [r#"$[$0-9]+"#]
    //   TokenTree = "(" TokenTree+ ")" (*) [r#"\'.\'"#]
    //   TokenTree = "(" TokenTree+ ")" (*) [r#"[0-9]+"#]
    //   TokenTree = "(" TokenTree+ ")" (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(TokenTree = "(", TokenTree+, ")" => ActionFn(78);)
    //   "*" -> Reduce(TokenTree = "(", TokenTree+, ")" => ActionFn(78);)
    //   "," -> Reduce(TokenTree = "(", TokenTree+, ")" => ActionFn(78);)
    //   "." -> Reduce(TokenTree = "(", TokenTree+, ")" => ActionFn(78);)
    //   ";" -> Reduce(TokenTree = "(", TokenTree+, ")" => ActionFn(78);)
    //   "=" -> Reduce(TokenTree = "(", TokenTree+, ")" => ActionFn(78);)
    //   "[" -> Reduce(TokenTree = "(", TokenTree+, ")" => ActionFn(78);)
    //   "{" -> Reduce(TokenTree = "(", TokenTree+, ")" => ActionFn(78);)
    //   "}" -> Reduce(TokenTree = "(", TokenTree+, ")" => ActionFn(78);)
    //   r#"\"[^\"]*\""# -> Reduce(TokenTree = "(", TokenTree+, ")" => ActionFn(78);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(TokenTree = "(", TokenTree+, ")" => ActionFn(78);)
    //   r#"$[$0-9]+"# -> Reduce(TokenTree = "(", TokenTree+, ")" => ActionFn(78);)
    //   r#"\'.\'"# -> Reduce(TokenTree = "(", TokenTree+, ")" => ActionFn(78);)
    //   r#"[0-9]+"# -> Reduce(TokenTree = "(", TokenTree+, ")" => ActionFn(78);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(TokenTree = "(", TokenTree+, ")" => ActionFn(78);)
    //
    pub fn __state144<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<::std::vec::Vec<()>>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action78(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::TokenTree(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 145
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["("]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [")"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["*"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [","]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["."]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [";"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["="]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["["]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["{"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\"[^\"]*\""#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"$[$0-9]+"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[0-9]+"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Integer = (*) r#"[0-9]+"# ["("]
    //   Integer = (*) r#"[0-9]+"# [")"]
    //   Integer = (*) r#"[0-9]+"# ["*"]
    //   Integer = (*) r#"[0-9]+"# [","]
    //   Integer = (*) r#"[0-9]+"# ["."]
    //   Integer = (*) r#"[0-9]+"# [";"]
    //   Integer = (*) r#"[0-9]+"# ["="]
    //   Integer = (*) r#"[0-9]+"# ["["]
    //   Integer = (*) r#"[0-9]+"# ["{"]
    //   Integer = (*) r#"[0-9]+"# [r#"\"[^\"]*\""#]
    //   Integer = (*) r#"[0-9]+"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Integer = (*) r#"[0-9]+"# [r#"$[$0-9]+"#]
    //   Integer = (*) r#"[0-9]+"# [r#"\'.\'"#]
    //   Integer = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Integer = (*) r#"[0-9]+"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) UnpairedToken ["("]
    //   TokenTree = (*) UnpairedToken [")"]
    //   TokenTree = (*) UnpairedToken ["*"]
    //   TokenTree = (*) UnpairedToken [","]
    //   TokenTree = (*) UnpairedToken ["."]
    //   TokenTree = (*) UnpairedToken [";"]
    //   TokenTree = (*) UnpairedToken ["="]
    //   TokenTree = (*) UnpairedToken ["["]
    //   TokenTree = (*) UnpairedToken ["{"]
    //   TokenTree = (*) UnpairedToken [r#"\"[^\"]*\""#]
    //   TokenTree = (*) UnpairedToken [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) UnpairedToken [r#"$[$0-9]+"#]
    //   TokenTree = (*) UnpairedToken [r#"\'.\'"#]
    //   TokenTree = (*) UnpairedToken [r#"[0-9]+"#]
    //   TokenTree = (*) UnpairedToken [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" TokenTree+ ")" ["("]
    //   TokenTree = (*) "(" TokenTree+ ")" [")"]
    //   TokenTree = (*) "(" TokenTree+ ")" ["*"]
    //   TokenTree = (*) "(" TokenTree+ ")" [","]
    //   TokenTree = (*) "(" TokenTree+ ")" ["."]
    //   TokenTree = (*) "(" TokenTree+ ")" [";"]
    //   TokenTree = (*) "(" TokenTree+ ")" ["="]
    //   TokenTree = (*) "(" TokenTree+ ")" ["["]
    //   TokenTree = (*) "(" TokenTree+ ")" ["{"]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"\'.\'"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"[0-9]+"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "(" TokenTree+ (*) ")" ["("]
    //   TokenTree = "(" TokenTree+ (*) ")" [")"]
    //   TokenTree = "(" TokenTree+ (*) ")" ["*"]
    //   TokenTree = "(" TokenTree+ (*) ")" [","]
    //   TokenTree = "(" TokenTree+ (*) ")" ["."]
    //   TokenTree = "(" TokenTree+ (*) ")" [";"]
    //   TokenTree = "(" TokenTree+ (*) ")" ["="]
    //   TokenTree = "(" TokenTree+ (*) ")" ["["]
    //   TokenTree = "(" TokenTree+ (*) ")" ["{"]
    //   TokenTree = "(" TokenTree+ (*) ")" [r#"\"[^\"]*\""#]
    //   TokenTree = "(" TokenTree+ (*) ")" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "(" TokenTree+ (*) ")" [r#"$[$0-9]+"#]
    //   TokenTree = "(" TokenTree+ (*) ")" [r#"\'.\'"#]
    //   TokenTree = "(" TokenTree+ (*) ")" [r#"[0-9]+"#]
    //   TokenTree = "(" TokenTree+ (*) ")" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" ")" ["("]
    //   TokenTree = (*) "(" ")" [")"]
    //   TokenTree = (*) "(" ")" ["*"]
    //   TokenTree = (*) "(" ")" [","]
    //   TokenTree = (*) "(" ")" ["."]
    //   TokenTree = (*) "(" ")" [";"]
    //   TokenTree = (*) "(" ")" ["="]
    //   TokenTree = (*) "(" ")" ["["]
    //   TokenTree = (*) "(" ")" ["{"]
    //   TokenTree = (*) "(" ")" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "(" ")" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" ")" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "(" ")" [r#"\'.\'"#]
    //   TokenTree = (*) "(" ")" [r#"[0-9]+"#]
    //   TokenTree = (*) "(" ")" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" TokenTree+ "]" ["("]
    //   TokenTree = (*) "[" TokenTree+ "]" [")"]
    //   TokenTree = (*) "[" TokenTree+ "]" ["*"]
    //   TokenTree = (*) "[" TokenTree+ "]" [","]
    //   TokenTree = (*) "[" TokenTree+ "]" ["."]
    //   TokenTree = (*) "[" TokenTree+ "]" [";"]
    //   TokenTree = (*) "[" TokenTree+ "]" ["="]
    //   TokenTree = (*) "[" TokenTree+ "]" ["["]
    //   TokenTree = (*) "[" TokenTree+ "]" ["{"]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"\'.\'"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"[0-9]+"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" "]" ["("]
    //   TokenTree = (*) "[" "]" [")"]
    //   TokenTree = (*) "[" "]" ["*"]
    //   TokenTree = (*) "[" "]" [","]
    //   TokenTree = (*) "[" "]" ["."]
    //   TokenTree = (*) "[" "]" [";"]
    //   TokenTree = (*) "[" "]" ["="]
    //   TokenTree = (*) "[" "]" ["["]
    //   TokenTree = (*) "[" "]" ["{"]
    //   TokenTree = (*) "[" "]" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "[" "]" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" "]" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "[" "]" [r#"\'.\'"#]
    //   TokenTree = (*) "[" "]" [r#"[0-9]+"#]
    //   TokenTree = (*) "[" "]" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" TokenTree+ "}" ["("]
    //   TokenTree = (*) "{" TokenTree+ "}" [")"]
    //   TokenTree = (*) "{" TokenTree+ "}" ["*"]
    //   TokenTree = (*) "{" TokenTree+ "}" [","]
    //   TokenTree = (*) "{" TokenTree+ "}" ["."]
    //   TokenTree = (*) "{" TokenTree+ "}" [";"]
    //   TokenTree = (*) "{" TokenTree+ "}" ["="]
    //   TokenTree = (*) "{" TokenTree+ "}" ["["]
    //   TokenTree = (*) "{" TokenTree+ "}" ["{"]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"\'.\'"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"[0-9]+"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" "}" ["("]
    //   TokenTree = (*) "{" "}" [")"]
    //   TokenTree = (*) "{" "}" ["*"]
    //   TokenTree = (*) "{" "}" [","]
    //   TokenTree = (*) "{" "}" ["."]
    //   TokenTree = (*) "{" "}" [";"]
    //   TokenTree = (*) "{" "}" ["="]
    //   TokenTree = (*) "{" "}" ["["]
    //   TokenTree = (*) "{" "}" ["{"]
    //   TokenTree = (*) "{" "}" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "{" "}" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" "}" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "{" "}" [r#"\'.\'"#]
    //   TokenTree = (*) "{" "}" [r#"[0-9]+"#]
    //   TokenTree = (*) "{" "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["("]
    //   TokenTree+ = TokenTree+ (*) TokenTree [")"]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["*"]
    //   TokenTree+ = TokenTree+ (*) TokenTree [","]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["."]
    //   TokenTree+ = TokenTree+ (*) TokenTree [";"]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["="]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["["]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["{"]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"\"[^\"]*\""#]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"$[$0-9]+"#]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"\'.\'"#]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"[0-9]+"#]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Ident ["("]
    //   UnpairedToken = (*) Ident [")"]
    //   UnpairedToken = (*) Ident ["*"]
    //   UnpairedToken = (*) Ident [","]
    //   UnpairedToken = (*) Ident ["."]
    //   UnpairedToken = (*) Ident [";"]
    //   UnpairedToken = (*) Ident ["="]
    //   UnpairedToken = (*) Ident ["["]
    //   UnpairedToken = (*) Ident ["{"]
    //   UnpairedToken = (*) Ident [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) Ident [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Ident [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) Ident [r#"\'.\'"#]
    //   UnpairedToken = (*) Ident [r#"[0-9]+"#]
    //   UnpairedToken = (*) Ident [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Integer ["("]
    //   UnpairedToken = (*) Integer [")"]
    //   UnpairedToken = (*) Integer ["*"]
    //   UnpairedToken = (*) Integer [","]
    //   UnpairedToken = (*) Integer ["."]
    //   UnpairedToken = (*) Integer [";"]
    //   UnpairedToken = (*) Integer ["="]
    //   UnpairedToken = (*) Integer ["["]
    //   UnpairedToken = (*) Integer ["{"]
    //   UnpairedToken = (*) Integer [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) Integer [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Integer [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) Integer [r#"\'.\'"#]
    //   UnpairedToken = (*) Integer [r#"[0-9]+"#]
    //   UnpairedToken = (*) Integer [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "*" ["("]
    //   UnpairedToken = (*) "*" [")"]
    //   UnpairedToken = (*) "*" ["*"]
    //   UnpairedToken = (*) "*" [","]
    //   UnpairedToken = (*) "*" ["."]
    //   UnpairedToken = (*) "*" [";"]
    //   UnpairedToken = (*) "*" ["="]
    //   UnpairedToken = (*) "*" ["["]
    //   UnpairedToken = (*) "*" ["{"]
    //   UnpairedToken = (*) "*" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "*" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "*" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "*" [r#"\'.\'"#]
    //   UnpairedToken = (*) "*" [r#"[0-9]+"#]
    //   UnpairedToken = (*) "*" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "," ["("]
    //   UnpairedToken = (*) "," [")"]
    //   UnpairedToken = (*) "," ["*"]
    //   UnpairedToken = (*) "," [","]
    //   UnpairedToken = (*) "," ["."]
    //   UnpairedToken = (*) "," [";"]
    //   UnpairedToken = (*) "," ["="]
    //   UnpairedToken = (*) "," ["["]
    //   UnpairedToken = (*) "," ["{"]
    //   UnpairedToken = (*) "," [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "," [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "," [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "," [r#"\'.\'"#]
    //   UnpairedToken = (*) "," [r#"[0-9]+"#]
    //   UnpairedToken = (*) "," [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "." ["("]
    //   UnpairedToken = (*) "." [")"]
    //   UnpairedToken = (*) "." ["*"]
    //   UnpairedToken = (*) "." [","]
    //   UnpairedToken = (*) "." ["."]
    //   UnpairedToken = (*) "." [";"]
    //   UnpairedToken = (*) "." ["="]
    //   UnpairedToken = (*) "." ["["]
    //   UnpairedToken = (*) "." ["{"]
    //   UnpairedToken = (*) "." [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "." [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "." [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "." [r#"\'.\'"#]
    //   UnpairedToken = (*) "." [r#"[0-9]+"#]
    //   UnpairedToken = (*) "." [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) ";" ["("]
    //   UnpairedToken = (*) ";" [")"]
    //   UnpairedToken = (*) ";" ["*"]
    //   UnpairedToken = (*) ";" [","]
    //   UnpairedToken = (*) ";" ["."]
    //   UnpairedToken = (*) ";" [";"]
    //   UnpairedToken = (*) ";" ["="]
    //   UnpairedToken = (*) ";" ["["]
    //   UnpairedToken = (*) ";" ["{"]
    //   UnpairedToken = (*) ";" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) ";" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) ";" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) ";" [r#"\'.\'"#]
    //   UnpairedToken = (*) ";" [r#"[0-9]+"#]
    //   UnpairedToken = (*) ";" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "=" ["("]
    //   UnpairedToken = (*) "=" [")"]
    //   UnpairedToken = (*) "=" ["*"]
    //   UnpairedToken = (*) "=" [","]
    //   UnpairedToken = (*) "=" ["."]
    //   UnpairedToken = (*) "=" [";"]
    //   UnpairedToken = (*) "=" ["="]
    //   UnpairedToken = (*) "=" ["["]
    //   UnpairedToken = (*) "=" ["{"]
    //   UnpairedToken = (*) "=" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "=" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "=" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "=" [r#"\'.\'"#]
    //   UnpairedToken = (*) "=" [r#"[0-9]+"#]
    //   UnpairedToken = (*) "=" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["("]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [")"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["*"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [","]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["."]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [";"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["="]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["["]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["{"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["("]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [")"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["*"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [","]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["."]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [";"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["="]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["["]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["{"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["("]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [")"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["*"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [","]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["."]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [";"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["="]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["["]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["{"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\'.\'"# ["("]
    //   UnpairedToken = (*) r#"\'.\'"# [")"]
    //   UnpairedToken = (*) r#"\'.\'"# ["*"]
    //   UnpairedToken = (*) r#"\'.\'"# [","]
    //   UnpairedToken = (*) r#"\'.\'"# ["."]
    //   UnpairedToken = (*) r#"\'.\'"# [";"]
    //   UnpairedToken = (*) r#"\'.\'"# ["="]
    //   UnpairedToken = (*) r#"\'.\'"# ["["]
    //   UnpairedToken = (*) r#"\'.\'"# ["{"]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Shift(S106)
    //   ")" -> Shift(S160)
    //   "*" -> Shift(S108)
    //   "," -> Shift(S109)
    //   "." -> Shift(S110)
    //   ";" -> Shift(S111)
    //   "=" -> Shift(S112)
    //   "[" -> Shift(S113)
    //   "{" -> Shift(S114)
    //   r#"\"[^\"]*\""# -> Shift(S115)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S116)
    //   r#"$[$0-9]+"# -> Shift(S117)
    //   r#"\'.\'"# -> Shift(S118)
    //   r#"[0-9]+"# -> Shift(S119)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S120)
    //
    //   Ident -> S101
    //   Integer -> S102
    //   TokenTree -> S143
    //   UnpairedToken -> S105
    pub fn __state145<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<::std::vec::Vec<()>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state106(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state160(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state108(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state109(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (17, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state110(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state111(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state112(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state113(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state114(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state115(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state116(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state117(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state118(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state119(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (31, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state120(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ident(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state101(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state102(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::TokenTree(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state143(input, __lookbehind, __tokens, __lookahead, __sym1, __sym2));
                }
                __Nonterminal::UnpairedToken(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state105(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 146
    //   TokenTree = "(" ")" (*) ["("]
    //   TokenTree = "(" ")" (*) [")"]
    //   TokenTree = "(" ")" (*) ["*"]
    //   TokenTree = "(" ")" (*) [","]
    //   TokenTree = "(" ")" (*) ["."]
    //   TokenTree = "(" ")" (*) [";"]
    //   TokenTree = "(" ")" (*) ["="]
    //   TokenTree = "(" ")" (*) ["["]
    //   TokenTree = "(" ")" (*) ["{"]
    //   TokenTree = "(" ")" (*) [r#"\"[^\"]*\""#]
    //   TokenTree = "(" ")" (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "(" ")" (*) [r#"$[$0-9]+"#]
    //   TokenTree = "(" ")" (*) [r#"\'.\'"#]
    //   TokenTree = "(" ")" (*) [r#"[0-9]+"#]
    //   TokenTree = "(" ")" (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(TokenTree = "(", ")" => ActionFn(77);)
    //   ")" -> Reduce(TokenTree = "(", ")" => ActionFn(77);)
    //   "*" -> Reduce(TokenTree = "(", ")" => ActionFn(77);)
    //   "," -> Reduce(TokenTree = "(", ")" => ActionFn(77);)
    //   "." -> Reduce(TokenTree = "(", ")" => ActionFn(77);)
    //   ";" -> Reduce(TokenTree = "(", ")" => ActionFn(77);)
    //   "=" -> Reduce(TokenTree = "(", ")" => ActionFn(77);)
    //   "[" -> Reduce(TokenTree = "(", ")" => ActionFn(77);)
    //   "{" -> Reduce(TokenTree = "(", ")" => ActionFn(77);)
    //   r#"\"[^\"]*\""# -> Reduce(TokenTree = "(", ")" => ActionFn(77);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(TokenTree = "(", ")" => ActionFn(77);)
    //   r#"$[$0-9]+"# -> Reduce(TokenTree = "(", ")" => ActionFn(77);)
    //   r#"\'.\'"# -> Reduce(TokenTree = "(", ")" => ActionFn(77);)
    //   r#"[0-9]+"# -> Reduce(TokenTree = "(", ")" => ActionFn(77);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(TokenTree = "(", ")" => ActionFn(77);)
    //
    pub fn __state146<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (14, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action77(input, __sym0, __sym1, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::TokenTree(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 147
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["("]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["*"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [","]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["."]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [";"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["="]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["["]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["]"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["{"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\"[^\"]*\""#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"$[$0-9]+"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[0-9]+"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Integer = (*) r#"[0-9]+"# ["("]
    //   Integer = (*) r#"[0-9]+"# ["*"]
    //   Integer = (*) r#"[0-9]+"# [","]
    //   Integer = (*) r#"[0-9]+"# ["."]
    //   Integer = (*) r#"[0-9]+"# [";"]
    //   Integer = (*) r#"[0-9]+"# ["="]
    //   Integer = (*) r#"[0-9]+"# ["["]
    //   Integer = (*) r#"[0-9]+"# ["]"]
    //   Integer = (*) r#"[0-9]+"# ["{"]
    //   Integer = (*) r#"[0-9]+"# [r#"\"[^\"]*\""#]
    //   Integer = (*) r#"[0-9]+"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Integer = (*) r#"[0-9]+"# [r#"$[$0-9]+"#]
    //   Integer = (*) r#"[0-9]+"# [r#"\'.\'"#]
    //   Integer = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Integer = (*) r#"[0-9]+"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) UnpairedToken ["("]
    //   TokenTree = (*) UnpairedToken ["*"]
    //   TokenTree = (*) UnpairedToken [","]
    //   TokenTree = (*) UnpairedToken ["."]
    //   TokenTree = (*) UnpairedToken [";"]
    //   TokenTree = (*) UnpairedToken ["="]
    //   TokenTree = (*) UnpairedToken ["["]
    //   TokenTree = (*) UnpairedToken ["]"]
    //   TokenTree = (*) UnpairedToken ["{"]
    //   TokenTree = (*) UnpairedToken [r#"\"[^\"]*\""#]
    //   TokenTree = (*) UnpairedToken [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) UnpairedToken [r#"$[$0-9]+"#]
    //   TokenTree = (*) UnpairedToken [r#"\'.\'"#]
    //   TokenTree = (*) UnpairedToken [r#"[0-9]+"#]
    //   TokenTree = (*) UnpairedToken [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" TokenTree+ ")" ["("]
    //   TokenTree = (*) "(" TokenTree+ ")" ["*"]
    //   TokenTree = (*) "(" TokenTree+ ")" [","]
    //   TokenTree = (*) "(" TokenTree+ ")" ["."]
    //   TokenTree = (*) "(" TokenTree+ ")" [";"]
    //   TokenTree = (*) "(" TokenTree+ ")" ["="]
    //   TokenTree = (*) "(" TokenTree+ ")" ["["]
    //   TokenTree = (*) "(" TokenTree+ ")" ["]"]
    //   TokenTree = (*) "(" TokenTree+ ")" ["{"]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"\'.\'"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"[0-9]+"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" ")" ["("]
    //   TokenTree = (*) "(" ")" ["*"]
    //   TokenTree = (*) "(" ")" [","]
    //   TokenTree = (*) "(" ")" ["."]
    //   TokenTree = (*) "(" ")" [";"]
    //   TokenTree = (*) "(" ")" ["="]
    //   TokenTree = (*) "(" ")" ["["]
    //   TokenTree = (*) "(" ")" ["]"]
    //   TokenTree = (*) "(" ")" ["{"]
    //   TokenTree = (*) "(" ")" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "(" ")" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" ")" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "(" ")" [r#"\'.\'"#]
    //   TokenTree = (*) "(" ")" [r#"[0-9]+"#]
    //   TokenTree = (*) "(" ")" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" TokenTree+ "]" ["("]
    //   TokenTree = (*) "[" TokenTree+ "]" ["*"]
    //   TokenTree = (*) "[" TokenTree+ "]" [","]
    //   TokenTree = (*) "[" TokenTree+ "]" ["."]
    //   TokenTree = (*) "[" TokenTree+ "]" [";"]
    //   TokenTree = (*) "[" TokenTree+ "]" ["="]
    //   TokenTree = (*) "[" TokenTree+ "]" ["["]
    //   TokenTree = (*) "[" TokenTree+ "]" ["]"]
    //   TokenTree = (*) "[" TokenTree+ "]" ["{"]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"\'.\'"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"[0-9]+"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "[" TokenTree+ (*) "]" ["("]
    //   TokenTree = "[" TokenTree+ (*) "]" [")"]
    //   TokenTree = "[" TokenTree+ (*) "]" ["*"]
    //   TokenTree = "[" TokenTree+ (*) "]" [","]
    //   TokenTree = "[" TokenTree+ (*) "]" ["."]
    //   TokenTree = "[" TokenTree+ (*) "]" [";"]
    //   TokenTree = "[" TokenTree+ (*) "]" ["="]
    //   TokenTree = "[" TokenTree+ (*) "]" ["["]
    //   TokenTree = "[" TokenTree+ (*) "]" ["{"]
    //   TokenTree = "[" TokenTree+ (*) "]" [r#"\"[^\"]*\""#]
    //   TokenTree = "[" TokenTree+ (*) "]" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "[" TokenTree+ (*) "]" [r#"$[$0-9]+"#]
    //   TokenTree = "[" TokenTree+ (*) "]" [r#"\'.\'"#]
    //   TokenTree = "[" TokenTree+ (*) "]" [r#"[0-9]+"#]
    //   TokenTree = "[" TokenTree+ (*) "]" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" "]" ["("]
    //   TokenTree = (*) "[" "]" ["*"]
    //   TokenTree = (*) "[" "]" [","]
    //   TokenTree = (*) "[" "]" ["."]
    //   TokenTree = (*) "[" "]" [";"]
    //   TokenTree = (*) "[" "]" ["="]
    //   TokenTree = (*) "[" "]" ["["]
    //   TokenTree = (*) "[" "]" ["]"]
    //   TokenTree = (*) "[" "]" ["{"]
    //   TokenTree = (*) "[" "]" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "[" "]" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" "]" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "[" "]" [r#"\'.\'"#]
    //   TokenTree = (*) "[" "]" [r#"[0-9]+"#]
    //   TokenTree = (*) "[" "]" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" TokenTree+ "}" ["("]
    //   TokenTree = (*) "{" TokenTree+ "}" ["*"]
    //   TokenTree = (*) "{" TokenTree+ "}" [","]
    //   TokenTree = (*) "{" TokenTree+ "}" ["."]
    //   TokenTree = (*) "{" TokenTree+ "}" [";"]
    //   TokenTree = (*) "{" TokenTree+ "}" ["="]
    //   TokenTree = (*) "{" TokenTree+ "}" ["["]
    //   TokenTree = (*) "{" TokenTree+ "}" ["]"]
    //   TokenTree = (*) "{" TokenTree+ "}" ["{"]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"\'.\'"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"[0-9]+"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" "}" ["("]
    //   TokenTree = (*) "{" "}" ["*"]
    //   TokenTree = (*) "{" "}" [","]
    //   TokenTree = (*) "{" "}" ["."]
    //   TokenTree = (*) "{" "}" [";"]
    //   TokenTree = (*) "{" "}" ["="]
    //   TokenTree = (*) "{" "}" ["["]
    //   TokenTree = (*) "{" "}" ["]"]
    //   TokenTree = (*) "{" "}" ["{"]
    //   TokenTree = (*) "{" "}" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "{" "}" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" "}" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "{" "}" [r#"\'.\'"#]
    //   TokenTree = (*) "{" "}" [r#"[0-9]+"#]
    //   TokenTree = (*) "{" "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["("]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["*"]
    //   TokenTree+ = TokenTree+ (*) TokenTree [","]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["."]
    //   TokenTree+ = TokenTree+ (*) TokenTree [";"]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["="]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["["]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["]"]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["{"]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"\"[^\"]*\""#]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"$[$0-9]+"#]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"\'.\'"#]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"[0-9]+"#]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Ident ["("]
    //   UnpairedToken = (*) Ident ["*"]
    //   UnpairedToken = (*) Ident [","]
    //   UnpairedToken = (*) Ident ["."]
    //   UnpairedToken = (*) Ident [";"]
    //   UnpairedToken = (*) Ident ["="]
    //   UnpairedToken = (*) Ident ["["]
    //   UnpairedToken = (*) Ident ["]"]
    //   UnpairedToken = (*) Ident ["{"]
    //   UnpairedToken = (*) Ident [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) Ident [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Ident [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) Ident [r#"\'.\'"#]
    //   UnpairedToken = (*) Ident [r#"[0-9]+"#]
    //   UnpairedToken = (*) Ident [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Integer ["("]
    //   UnpairedToken = (*) Integer ["*"]
    //   UnpairedToken = (*) Integer [","]
    //   UnpairedToken = (*) Integer ["."]
    //   UnpairedToken = (*) Integer [";"]
    //   UnpairedToken = (*) Integer ["="]
    //   UnpairedToken = (*) Integer ["["]
    //   UnpairedToken = (*) Integer ["]"]
    //   UnpairedToken = (*) Integer ["{"]
    //   UnpairedToken = (*) Integer [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) Integer [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Integer [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) Integer [r#"\'.\'"#]
    //   UnpairedToken = (*) Integer [r#"[0-9]+"#]
    //   UnpairedToken = (*) Integer [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "*" ["("]
    //   UnpairedToken = (*) "*" ["*"]
    //   UnpairedToken = (*) "*" [","]
    //   UnpairedToken = (*) "*" ["."]
    //   UnpairedToken = (*) "*" [";"]
    //   UnpairedToken = (*) "*" ["="]
    //   UnpairedToken = (*) "*" ["["]
    //   UnpairedToken = (*) "*" ["]"]
    //   UnpairedToken = (*) "*" ["{"]
    //   UnpairedToken = (*) "*" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "*" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "*" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "*" [r#"\'.\'"#]
    //   UnpairedToken = (*) "*" [r#"[0-9]+"#]
    //   UnpairedToken = (*) "*" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "," ["("]
    //   UnpairedToken = (*) "," ["*"]
    //   UnpairedToken = (*) "," [","]
    //   UnpairedToken = (*) "," ["."]
    //   UnpairedToken = (*) "," [";"]
    //   UnpairedToken = (*) "," ["="]
    //   UnpairedToken = (*) "," ["["]
    //   UnpairedToken = (*) "," ["]"]
    //   UnpairedToken = (*) "," ["{"]
    //   UnpairedToken = (*) "," [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "," [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "," [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "," [r#"\'.\'"#]
    //   UnpairedToken = (*) "," [r#"[0-9]+"#]
    //   UnpairedToken = (*) "," [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "." ["("]
    //   UnpairedToken = (*) "." ["*"]
    //   UnpairedToken = (*) "." [","]
    //   UnpairedToken = (*) "." ["."]
    //   UnpairedToken = (*) "." [";"]
    //   UnpairedToken = (*) "." ["="]
    //   UnpairedToken = (*) "." ["["]
    //   UnpairedToken = (*) "." ["]"]
    //   UnpairedToken = (*) "." ["{"]
    //   UnpairedToken = (*) "." [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "." [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "." [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "." [r#"\'.\'"#]
    //   UnpairedToken = (*) "." [r#"[0-9]+"#]
    //   UnpairedToken = (*) "." [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) ";" ["("]
    //   UnpairedToken = (*) ";" ["*"]
    //   UnpairedToken = (*) ";" [","]
    //   UnpairedToken = (*) ";" ["."]
    //   UnpairedToken = (*) ";" [";"]
    //   UnpairedToken = (*) ";" ["="]
    //   UnpairedToken = (*) ";" ["["]
    //   UnpairedToken = (*) ";" ["]"]
    //   UnpairedToken = (*) ";" ["{"]
    //   UnpairedToken = (*) ";" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) ";" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) ";" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) ";" [r#"\'.\'"#]
    //   UnpairedToken = (*) ";" [r#"[0-9]+"#]
    //   UnpairedToken = (*) ";" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "=" ["("]
    //   UnpairedToken = (*) "=" ["*"]
    //   UnpairedToken = (*) "=" [","]
    //   UnpairedToken = (*) "=" ["."]
    //   UnpairedToken = (*) "=" [";"]
    //   UnpairedToken = (*) "=" ["="]
    //   UnpairedToken = (*) "=" ["["]
    //   UnpairedToken = (*) "=" ["]"]
    //   UnpairedToken = (*) "=" ["{"]
    //   UnpairedToken = (*) "=" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "=" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "=" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "=" [r#"\'.\'"#]
    //   UnpairedToken = (*) "=" [r#"[0-9]+"#]
    //   UnpairedToken = (*) "=" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["("]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["*"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [","]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["."]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [";"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["="]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["["]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["]"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["{"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["("]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["*"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [","]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["."]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [";"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["="]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["["]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["]"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["{"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["("]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["*"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [","]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["."]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [";"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["="]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["["]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["]"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["{"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\'.\'"# ["("]
    //   UnpairedToken = (*) r#"\'.\'"# ["*"]
    //   UnpairedToken = (*) r#"\'.\'"# [","]
    //   UnpairedToken = (*) r#"\'.\'"# ["."]
    //   UnpairedToken = (*) r#"\'.\'"# [";"]
    //   UnpairedToken = (*) r#"\'.\'"# ["="]
    //   UnpairedToken = (*) r#"\'.\'"# ["["]
    //   UnpairedToken = (*) r#"\'.\'"# ["]"]
    //   UnpairedToken = (*) r#"\'.\'"# ["{"]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Shift(S126)
    //   "*" -> Shift(S127)
    //   "," -> Shift(S128)
    //   "." -> Shift(S129)
    //   ";" -> Shift(S130)
    //   "=" -> Shift(S131)
    //   "[" -> Shift(S132)
    //   "]" -> Shift(S161)
    //   "{" -> Shift(S134)
    //   r#"\"[^\"]*\""# -> Shift(S135)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S136)
    //   r#"$[$0-9]+"# -> Shift(S137)
    //   r#"\'.\'"# -> Shift(S138)
    //   r#"[0-9]+"# -> Shift(S139)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S140)
    //
    //   Ident -> S121
    //   Integer -> S122
    //   TokenTree -> S151
    //   UnpairedToken -> S125
    pub fn __state147<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<::std::vec::Vec<()>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state126(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state127(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state128(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (17, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state129(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state130(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state131(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state132(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (22, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state161(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state134(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state135(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state136(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state137(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state138(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state139(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (31, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state140(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ident(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state121(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state122(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::TokenTree(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state151(input, __lookbehind, __tokens, __lookahead, __sym1, __sym2));
                }
                __Nonterminal::UnpairedToken(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state125(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 148
    //   TokenTree = "[" "]" (*) ["("]
    //   TokenTree = "[" "]" (*) [")"]
    //   TokenTree = "[" "]" (*) ["*"]
    //   TokenTree = "[" "]" (*) [","]
    //   TokenTree = "[" "]" (*) ["."]
    //   TokenTree = "[" "]" (*) [";"]
    //   TokenTree = "[" "]" (*) ["="]
    //   TokenTree = "[" "]" (*) ["["]
    //   TokenTree = "[" "]" (*) ["{"]
    //   TokenTree = "[" "]" (*) [r#"\"[^\"]*\""#]
    //   TokenTree = "[" "]" (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "[" "]" (*) [r#"$[$0-9]+"#]
    //   TokenTree = "[" "]" (*) [r#"\'.\'"#]
    //   TokenTree = "[" "]" (*) [r#"[0-9]+"#]
    //   TokenTree = "[" "]" (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(TokenTree = "[", "]" => ActionFn(79);)
    //   ")" -> Reduce(TokenTree = "[", "]" => ActionFn(79);)
    //   "*" -> Reduce(TokenTree = "[", "]" => ActionFn(79);)
    //   "," -> Reduce(TokenTree = "[", "]" => ActionFn(79);)
    //   "." -> Reduce(TokenTree = "[", "]" => ActionFn(79);)
    //   ";" -> Reduce(TokenTree = "[", "]" => ActionFn(79);)
    //   "=" -> Reduce(TokenTree = "[", "]" => ActionFn(79);)
    //   "[" -> Reduce(TokenTree = "[", "]" => ActionFn(79);)
    //   "{" -> Reduce(TokenTree = "[", "]" => ActionFn(79);)
    //   r#"\"[^\"]*\""# -> Reduce(TokenTree = "[", "]" => ActionFn(79);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(TokenTree = "[", "]" => ActionFn(79);)
    //   r#"$[$0-9]+"# -> Reduce(TokenTree = "[", "]" => ActionFn(79);)
    //   r#"\'.\'"# -> Reduce(TokenTree = "[", "]" => ActionFn(79);)
    //   r#"[0-9]+"# -> Reduce(TokenTree = "[", "]" => ActionFn(79);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(TokenTree = "[", "]" => ActionFn(79);)
    //
    pub fn __state148<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (14, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action79(input, __sym0, __sym1, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::TokenTree(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 149
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["("]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["*"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [","]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["."]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [";"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["="]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["["]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["{"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["}"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\"[^\"]*\""#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"$[$0-9]+"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[0-9]+"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Integer = (*) r#"[0-9]+"# ["("]
    //   Integer = (*) r#"[0-9]+"# ["*"]
    //   Integer = (*) r#"[0-9]+"# [","]
    //   Integer = (*) r#"[0-9]+"# ["."]
    //   Integer = (*) r#"[0-9]+"# [";"]
    //   Integer = (*) r#"[0-9]+"# ["="]
    //   Integer = (*) r#"[0-9]+"# ["["]
    //   Integer = (*) r#"[0-9]+"# ["{"]
    //   Integer = (*) r#"[0-9]+"# ["}"]
    //   Integer = (*) r#"[0-9]+"# [r#"\"[^\"]*\""#]
    //   Integer = (*) r#"[0-9]+"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Integer = (*) r#"[0-9]+"# [r#"$[$0-9]+"#]
    //   Integer = (*) r#"[0-9]+"# [r#"\'.\'"#]
    //   Integer = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Integer = (*) r#"[0-9]+"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) UnpairedToken ["("]
    //   TokenTree = (*) UnpairedToken ["*"]
    //   TokenTree = (*) UnpairedToken [","]
    //   TokenTree = (*) UnpairedToken ["."]
    //   TokenTree = (*) UnpairedToken [";"]
    //   TokenTree = (*) UnpairedToken ["="]
    //   TokenTree = (*) UnpairedToken ["["]
    //   TokenTree = (*) UnpairedToken ["{"]
    //   TokenTree = (*) UnpairedToken ["}"]
    //   TokenTree = (*) UnpairedToken [r#"\"[^\"]*\""#]
    //   TokenTree = (*) UnpairedToken [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) UnpairedToken [r#"$[$0-9]+"#]
    //   TokenTree = (*) UnpairedToken [r#"\'.\'"#]
    //   TokenTree = (*) UnpairedToken [r#"[0-9]+"#]
    //   TokenTree = (*) UnpairedToken [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" TokenTree+ ")" ["("]
    //   TokenTree = (*) "(" TokenTree+ ")" ["*"]
    //   TokenTree = (*) "(" TokenTree+ ")" [","]
    //   TokenTree = (*) "(" TokenTree+ ")" ["."]
    //   TokenTree = (*) "(" TokenTree+ ")" [";"]
    //   TokenTree = (*) "(" TokenTree+ ")" ["="]
    //   TokenTree = (*) "(" TokenTree+ ")" ["["]
    //   TokenTree = (*) "(" TokenTree+ ")" ["{"]
    //   TokenTree = (*) "(" TokenTree+ ")" ["}"]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"\'.\'"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"[0-9]+"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" ")" ["("]
    //   TokenTree = (*) "(" ")" ["*"]
    //   TokenTree = (*) "(" ")" [","]
    //   TokenTree = (*) "(" ")" ["."]
    //   TokenTree = (*) "(" ")" [";"]
    //   TokenTree = (*) "(" ")" ["="]
    //   TokenTree = (*) "(" ")" ["["]
    //   TokenTree = (*) "(" ")" ["{"]
    //   TokenTree = (*) "(" ")" ["}"]
    //   TokenTree = (*) "(" ")" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "(" ")" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" ")" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "(" ")" [r#"\'.\'"#]
    //   TokenTree = (*) "(" ")" [r#"[0-9]+"#]
    //   TokenTree = (*) "(" ")" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" TokenTree+ "]" ["("]
    //   TokenTree = (*) "[" TokenTree+ "]" ["*"]
    //   TokenTree = (*) "[" TokenTree+ "]" [","]
    //   TokenTree = (*) "[" TokenTree+ "]" ["."]
    //   TokenTree = (*) "[" TokenTree+ "]" [";"]
    //   TokenTree = (*) "[" TokenTree+ "]" ["="]
    //   TokenTree = (*) "[" TokenTree+ "]" ["["]
    //   TokenTree = (*) "[" TokenTree+ "]" ["{"]
    //   TokenTree = (*) "[" TokenTree+ "]" ["}"]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"\'.\'"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"[0-9]+"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" "]" ["("]
    //   TokenTree = (*) "[" "]" ["*"]
    //   TokenTree = (*) "[" "]" [","]
    //   TokenTree = (*) "[" "]" ["."]
    //   TokenTree = (*) "[" "]" [";"]
    //   TokenTree = (*) "[" "]" ["="]
    //   TokenTree = (*) "[" "]" ["["]
    //   TokenTree = (*) "[" "]" ["{"]
    //   TokenTree = (*) "[" "]" ["}"]
    //   TokenTree = (*) "[" "]" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "[" "]" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" "]" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "[" "]" [r#"\'.\'"#]
    //   TokenTree = (*) "[" "]" [r#"[0-9]+"#]
    //   TokenTree = (*) "[" "]" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" TokenTree+ "}" ["("]
    //   TokenTree = (*) "{" TokenTree+ "}" ["*"]
    //   TokenTree = (*) "{" TokenTree+ "}" [","]
    //   TokenTree = (*) "{" TokenTree+ "}" ["."]
    //   TokenTree = (*) "{" TokenTree+ "}" [";"]
    //   TokenTree = (*) "{" TokenTree+ "}" ["="]
    //   TokenTree = (*) "{" TokenTree+ "}" ["["]
    //   TokenTree = (*) "{" TokenTree+ "}" ["{"]
    //   TokenTree = (*) "{" TokenTree+ "}" ["}"]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"\'.\'"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"[0-9]+"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "{" TokenTree+ (*) "}" ["("]
    //   TokenTree = "{" TokenTree+ (*) "}" [")"]
    //   TokenTree = "{" TokenTree+ (*) "}" ["*"]
    //   TokenTree = "{" TokenTree+ (*) "}" [","]
    //   TokenTree = "{" TokenTree+ (*) "}" ["."]
    //   TokenTree = "{" TokenTree+ (*) "}" [";"]
    //   TokenTree = "{" TokenTree+ (*) "}" ["="]
    //   TokenTree = "{" TokenTree+ (*) "}" ["["]
    //   TokenTree = "{" TokenTree+ (*) "}" ["{"]
    //   TokenTree = "{" TokenTree+ (*) "}" [r#"\"[^\"]*\""#]
    //   TokenTree = "{" TokenTree+ (*) "}" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "{" TokenTree+ (*) "}" [r#"$[$0-9]+"#]
    //   TokenTree = "{" TokenTree+ (*) "}" [r#"\'.\'"#]
    //   TokenTree = "{" TokenTree+ (*) "}" [r#"[0-9]+"#]
    //   TokenTree = "{" TokenTree+ (*) "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" "}" ["("]
    //   TokenTree = (*) "{" "}" ["*"]
    //   TokenTree = (*) "{" "}" [","]
    //   TokenTree = (*) "{" "}" ["."]
    //   TokenTree = (*) "{" "}" [";"]
    //   TokenTree = (*) "{" "}" ["="]
    //   TokenTree = (*) "{" "}" ["["]
    //   TokenTree = (*) "{" "}" ["{"]
    //   TokenTree = (*) "{" "}" ["}"]
    //   TokenTree = (*) "{" "}" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "{" "}" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" "}" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "{" "}" [r#"\'.\'"#]
    //   TokenTree = (*) "{" "}" [r#"[0-9]+"#]
    //   TokenTree = (*) "{" "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["("]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["*"]
    //   TokenTree+ = TokenTree+ (*) TokenTree [","]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["."]
    //   TokenTree+ = TokenTree+ (*) TokenTree [";"]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["="]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["["]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["{"]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["}"]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"\"[^\"]*\""#]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"$[$0-9]+"#]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"\'.\'"#]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"[0-9]+"#]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Ident ["("]
    //   UnpairedToken = (*) Ident ["*"]
    //   UnpairedToken = (*) Ident [","]
    //   UnpairedToken = (*) Ident ["."]
    //   UnpairedToken = (*) Ident [";"]
    //   UnpairedToken = (*) Ident ["="]
    //   UnpairedToken = (*) Ident ["["]
    //   UnpairedToken = (*) Ident ["{"]
    //   UnpairedToken = (*) Ident ["}"]
    //   UnpairedToken = (*) Ident [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) Ident [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Ident [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) Ident [r#"\'.\'"#]
    //   UnpairedToken = (*) Ident [r#"[0-9]+"#]
    //   UnpairedToken = (*) Ident [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Integer ["("]
    //   UnpairedToken = (*) Integer ["*"]
    //   UnpairedToken = (*) Integer [","]
    //   UnpairedToken = (*) Integer ["."]
    //   UnpairedToken = (*) Integer [";"]
    //   UnpairedToken = (*) Integer ["="]
    //   UnpairedToken = (*) Integer ["["]
    //   UnpairedToken = (*) Integer ["{"]
    //   UnpairedToken = (*) Integer ["}"]
    //   UnpairedToken = (*) Integer [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) Integer [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Integer [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) Integer [r#"\'.\'"#]
    //   UnpairedToken = (*) Integer [r#"[0-9]+"#]
    //   UnpairedToken = (*) Integer [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "*" ["("]
    //   UnpairedToken = (*) "*" ["*"]
    //   UnpairedToken = (*) "*" [","]
    //   UnpairedToken = (*) "*" ["."]
    //   UnpairedToken = (*) "*" [";"]
    //   UnpairedToken = (*) "*" ["="]
    //   UnpairedToken = (*) "*" ["["]
    //   UnpairedToken = (*) "*" ["{"]
    //   UnpairedToken = (*) "*" ["}"]
    //   UnpairedToken = (*) "*" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "*" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "*" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "*" [r#"\'.\'"#]
    //   UnpairedToken = (*) "*" [r#"[0-9]+"#]
    //   UnpairedToken = (*) "*" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "," ["("]
    //   UnpairedToken = (*) "," ["*"]
    //   UnpairedToken = (*) "," [","]
    //   UnpairedToken = (*) "," ["."]
    //   UnpairedToken = (*) "," [";"]
    //   UnpairedToken = (*) "," ["="]
    //   UnpairedToken = (*) "," ["["]
    //   UnpairedToken = (*) "," ["{"]
    //   UnpairedToken = (*) "," ["}"]
    //   UnpairedToken = (*) "," [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "," [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "," [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "," [r#"\'.\'"#]
    //   UnpairedToken = (*) "," [r#"[0-9]+"#]
    //   UnpairedToken = (*) "," [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "." ["("]
    //   UnpairedToken = (*) "." ["*"]
    //   UnpairedToken = (*) "." [","]
    //   UnpairedToken = (*) "." ["."]
    //   UnpairedToken = (*) "." [";"]
    //   UnpairedToken = (*) "." ["="]
    //   UnpairedToken = (*) "." ["["]
    //   UnpairedToken = (*) "." ["{"]
    //   UnpairedToken = (*) "." ["}"]
    //   UnpairedToken = (*) "." [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "." [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "." [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "." [r#"\'.\'"#]
    //   UnpairedToken = (*) "." [r#"[0-9]+"#]
    //   UnpairedToken = (*) "." [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) ";" ["("]
    //   UnpairedToken = (*) ";" ["*"]
    //   UnpairedToken = (*) ";" [","]
    //   UnpairedToken = (*) ";" ["."]
    //   UnpairedToken = (*) ";" [";"]
    //   UnpairedToken = (*) ";" ["="]
    //   UnpairedToken = (*) ";" ["["]
    //   UnpairedToken = (*) ";" ["{"]
    //   UnpairedToken = (*) ";" ["}"]
    //   UnpairedToken = (*) ";" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) ";" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) ";" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) ";" [r#"\'.\'"#]
    //   UnpairedToken = (*) ";" [r#"[0-9]+"#]
    //   UnpairedToken = (*) ";" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "=" ["("]
    //   UnpairedToken = (*) "=" ["*"]
    //   UnpairedToken = (*) "=" [","]
    //   UnpairedToken = (*) "=" ["."]
    //   UnpairedToken = (*) "=" [";"]
    //   UnpairedToken = (*) "=" ["="]
    //   UnpairedToken = (*) "=" ["["]
    //   UnpairedToken = (*) "=" ["{"]
    //   UnpairedToken = (*) "=" ["}"]
    //   UnpairedToken = (*) "=" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "=" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "=" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "=" [r#"\'.\'"#]
    //   UnpairedToken = (*) "=" [r#"[0-9]+"#]
    //   UnpairedToken = (*) "=" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["("]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["*"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [","]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["."]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [";"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["="]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["["]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["{"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["}"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["("]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["*"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [","]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["."]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [";"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["="]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["["]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["{"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["}"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["("]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["*"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [","]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["."]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [";"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["="]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["["]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["{"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["}"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\'.\'"# ["("]
    //   UnpairedToken = (*) r#"\'.\'"# ["*"]
    //   UnpairedToken = (*) r#"\'.\'"# [","]
    //   UnpairedToken = (*) r#"\'.\'"# ["."]
    //   UnpairedToken = (*) r#"\'.\'"# [";"]
    //   UnpairedToken = (*) r#"\'.\'"# ["="]
    //   UnpairedToken = (*) r#"\'.\'"# ["["]
    //   UnpairedToken = (*) r#"\'.\'"# ["{"]
    //   UnpairedToken = (*) r#"\'.\'"# ["}"]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Shift(S83)
    //   "*" -> Shift(S84)
    //   "," -> Shift(S85)
    //   "." -> Shift(S86)
    //   ";" -> Shift(S87)
    //   "=" -> Shift(S88)
    //   "[" -> Shift(S89)
    //   "{" -> Shift(S90)
    //   "}" -> Shift(S162)
    //   r#"\"[^\"]*\""# -> Shift(S92)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S93)
    //   r#"$[$0-9]+"# -> Shift(S94)
    //   r#"\'.\'"# -> Shift(S95)
    //   r#"[0-9]+"# -> Shift(S96)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S97)
    //
    //   Ident -> S78
    //   Integer -> S79
    //   TokenTree -> S99
    //   UnpairedToken -> S82
    pub fn __state149<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<::std::vec::Vec<()>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state83(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state84(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state85(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (17, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state86(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state87(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state88(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state89(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state90(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state162(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state92(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state93(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state94(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state95(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state96(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (31, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state97(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ident(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state78(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state79(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::TokenTree(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state99(input, __lookbehind, __tokens, __lookahead, __sym1, __sym2));
                }
                __Nonterminal::UnpairedToken(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state82(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 150
    //   TokenTree = "{" "}" (*) ["("]
    //   TokenTree = "{" "}" (*) [")"]
    //   TokenTree = "{" "}" (*) ["*"]
    //   TokenTree = "{" "}" (*) [","]
    //   TokenTree = "{" "}" (*) ["."]
    //   TokenTree = "{" "}" (*) [";"]
    //   TokenTree = "{" "}" (*) ["="]
    //   TokenTree = "{" "}" (*) ["["]
    //   TokenTree = "{" "}" (*) ["{"]
    //   TokenTree = "{" "}" (*) [r#"\"[^\"]*\""#]
    //   TokenTree = "{" "}" (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "{" "}" (*) [r#"$[$0-9]+"#]
    //   TokenTree = "{" "}" (*) [r#"\'.\'"#]
    //   TokenTree = "{" "}" (*) [r#"[0-9]+"#]
    //   TokenTree = "{" "}" (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(TokenTree = "{", "}" => ActionFn(75);)
    //   ")" -> Reduce(TokenTree = "{", "}" => ActionFn(75);)
    //   "*" -> Reduce(TokenTree = "{", "}" => ActionFn(75);)
    //   "," -> Reduce(TokenTree = "{", "}" => ActionFn(75);)
    //   "." -> Reduce(TokenTree = "{", "}" => ActionFn(75);)
    //   ";" -> Reduce(TokenTree = "{", "}" => ActionFn(75);)
    //   "=" -> Reduce(TokenTree = "{", "}" => ActionFn(75);)
    //   "[" -> Reduce(TokenTree = "{", "}" => ActionFn(75);)
    //   "{" -> Reduce(TokenTree = "{", "}" => ActionFn(75);)
    //   r#"\"[^\"]*\""# -> Reduce(TokenTree = "{", "}" => ActionFn(75);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(TokenTree = "{", "}" => ActionFn(75);)
    //   r#"$[$0-9]+"# -> Reduce(TokenTree = "{", "}" => ActionFn(75);)
    //   r#"\'.\'"# -> Reduce(TokenTree = "{", "}" => ActionFn(75);)
    //   r#"[0-9]+"# -> Reduce(TokenTree = "{", "}" => ActionFn(75);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(TokenTree = "{", "}" => ActionFn(75);)
    //
    pub fn __state150<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (14, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action75(input, __sym0, __sym1, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::TokenTree(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 151
    //   TokenTree+ = TokenTree+ TokenTree (*) ["("]
    //   TokenTree+ = TokenTree+ TokenTree (*) ["*"]
    //   TokenTree+ = TokenTree+ TokenTree (*) [","]
    //   TokenTree+ = TokenTree+ TokenTree (*) ["."]
    //   TokenTree+ = TokenTree+ TokenTree (*) [";"]
    //   TokenTree+ = TokenTree+ TokenTree (*) ["="]
    //   TokenTree+ = TokenTree+ TokenTree (*) ["["]
    //   TokenTree+ = TokenTree+ TokenTree (*) ["]"]
    //   TokenTree+ = TokenTree+ TokenTree (*) ["{"]
    //   TokenTree+ = TokenTree+ TokenTree (*) [r#"\"[^\"]*\""#]
    //   TokenTree+ = TokenTree+ TokenTree (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = TokenTree+ TokenTree (*) [r#"$[$0-9]+"#]
    //   TokenTree+ = TokenTree+ TokenTree (*) [r#"\'.\'"#]
    //   TokenTree+ = TokenTree+ TokenTree (*) [r#"[0-9]+"#]
    //   TokenTree+ = TokenTree+ TokenTree (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(TokenTree+ = TokenTree+, TokenTree => ActionFn(66);)
    //   "*" -> Reduce(TokenTree+ = TokenTree+, TokenTree => ActionFn(66);)
    //   "," -> Reduce(TokenTree+ = TokenTree+, TokenTree => ActionFn(66);)
    //   "." -> Reduce(TokenTree+ = TokenTree+, TokenTree => ActionFn(66);)
    //   ";" -> Reduce(TokenTree+ = TokenTree+, TokenTree => ActionFn(66);)
    //   "=" -> Reduce(TokenTree+ = TokenTree+, TokenTree => ActionFn(66);)
    //   "[" -> Reduce(TokenTree+ = TokenTree+, TokenTree => ActionFn(66);)
    //   "]" -> Reduce(TokenTree+ = TokenTree+, TokenTree => ActionFn(66);)
    //   "{" -> Reduce(TokenTree+ = TokenTree+, TokenTree => ActionFn(66);)
    //   r#"\"[^\"]*\""# -> Reduce(TokenTree+ = TokenTree+, TokenTree => ActionFn(66);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(TokenTree+ = TokenTree+, TokenTree => ActionFn(66);)
    //   r#"$[$0-9]+"# -> Reduce(TokenTree+ = TokenTree+, TokenTree => ActionFn(66);)
    //   r#"\'.\'"# -> Reduce(TokenTree+ = TokenTree+, TokenTree => ActionFn(66);)
    //   r#"[0-9]+"# -> Reduce(TokenTree+ = TokenTree+, TokenTree => ActionFn(66);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(TokenTree+ = TokenTree+, TokenTree => ActionFn(66);)
    //
    pub fn __state151<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<::std::vec::Vec<()>>,
        __sym1: &mut Option<()>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action66(input, __sym0, __sym1, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::TokenTree_2b(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 152
    //   TokenTree = "[" TokenTree+ "]" (*) ["("]
    //   TokenTree = "[" TokenTree+ "]" (*) ["*"]
    //   TokenTree = "[" TokenTree+ "]" (*) [","]
    //   TokenTree = "[" TokenTree+ "]" (*) ["."]
    //   TokenTree = "[" TokenTree+ "]" (*) [";"]
    //   TokenTree = "[" TokenTree+ "]" (*) ["="]
    //   TokenTree = "[" TokenTree+ "]" (*) ["["]
    //   TokenTree = "[" TokenTree+ "]" (*) ["{"]
    //   TokenTree = "[" TokenTree+ "]" (*) ["}"]
    //   TokenTree = "[" TokenTree+ "]" (*) [r#"\"[^\"]*\""#]
    //   TokenTree = "[" TokenTree+ "]" (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "[" TokenTree+ "]" (*) [r#"$[$0-9]+"#]
    //   TokenTree = "[" TokenTree+ "]" (*) [r#"\'.\'"#]
    //   TokenTree = "[" TokenTree+ "]" (*) [r#"[0-9]+"#]
    //   TokenTree = "[" TokenTree+ "]" (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(TokenTree = "[", TokenTree+, "]" => ActionFn(80);)
    //   "*" -> Reduce(TokenTree = "[", TokenTree+, "]" => ActionFn(80);)
    //   "," -> Reduce(TokenTree = "[", TokenTree+, "]" => ActionFn(80);)
    //   "." -> Reduce(TokenTree = "[", TokenTree+, "]" => ActionFn(80);)
    //   ";" -> Reduce(TokenTree = "[", TokenTree+, "]" => ActionFn(80);)
    //   "=" -> Reduce(TokenTree = "[", TokenTree+, "]" => ActionFn(80);)
    //   "[" -> Reduce(TokenTree = "[", TokenTree+, "]" => ActionFn(80);)
    //   "{" -> Reduce(TokenTree = "[", TokenTree+, "]" => ActionFn(80);)
    //   "}" -> Reduce(TokenTree = "[", TokenTree+, "]" => ActionFn(80);)
    //   r#"\"[^\"]*\""# -> Reduce(TokenTree = "[", TokenTree+, "]" => ActionFn(80);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(TokenTree = "[", TokenTree+, "]" => ActionFn(80);)
    //   r#"$[$0-9]+"# -> Reduce(TokenTree = "[", TokenTree+, "]" => ActionFn(80);)
    //   r#"\'.\'"# -> Reduce(TokenTree = "[", TokenTree+, "]" => ActionFn(80);)
    //   r#"[0-9]+"# -> Reduce(TokenTree = "[", TokenTree+, "]" => ActionFn(80);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(TokenTree = "[", TokenTree+, "]" => ActionFn(80);)
    //
    pub fn __state152<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<::std::vec::Vec<()>>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action80(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::TokenTree(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 153
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["("]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [")"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["*"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [","]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["."]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [";"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["="]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["["]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["{"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\"[^\"]*\""#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"$[$0-9]+"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[0-9]+"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Integer = (*) r#"[0-9]+"# ["("]
    //   Integer = (*) r#"[0-9]+"# [")"]
    //   Integer = (*) r#"[0-9]+"# ["*"]
    //   Integer = (*) r#"[0-9]+"# [","]
    //   Integer = (*) r#"[0-9]+"# ["."]
    //   Integer = (*) r#"[0-9]+"# [";"]
    //   Integer = (*) r#"[0-9]+"# ["="]
    //   Integer = (*) r#"[0-9]+"# ["["]
    //   Integer = (*) r#"[0-9]+"# ["{"]
    //   Integer = (*) r#"[0-9]+"# [r#"\"[^\"]*\""#]
    //   Integer = (*) r#"[0-9]+"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Integer = (*) r#"[0-9]+"# [r#"$[$0-9]+"#]
    //   Integer = (*) r#"[0-9]+"# [r#"\'.\'"#]
    //   Integer = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Integer = (*) r#"[0-9]+"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) UnpairedToken ["("]
    //   TokenTree = (*) UnpairedToken [")"]
    //   TokenTree = (*) UnpairedToken ["*"]
    //   TokenTree = (*) UnpairedToken [","]
    //   TokenTree = (*) UnpairedToken ["."]
    //   TokenTree = (*) UnpairedToken [";"]
    //   TokenTree = (*) UnpairedToken ["="]
    //   TokenTree = (*) UnpairedToken ["["]
    //   TokenTree = (*) UnpairedToken ["{"]
    //   TokenTree = (*) UnpairedToken [r#"\"[^\"]*\""#]
    //   TokenTree = (*) UnpairedToken [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) UnpairedToken [r#"$[$0-9]+"#]
    //   TokenTree = (*) UnpairedToken [r#"\'.\'"#]
    //   TokenTree = (*) UnpairedToken [r#"[0-9]+"#]
    //   TokenTree = (*) UnpairedToken [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" TokenTree+ ")" ["("]
    //   TokenTree = (*) "(" TokenTree+ ")" [")"]
    //   TokenTree = (*) "(" TokenTree+ ")" ["*"]
    //   TokenTree = (*) "(" TokenTree+ ")" [","]
    //   TokenTree = (*) "(" TokenTree+ ")" ["."]
    //   TokenTree = (*) "(" TokenTree+ ")" [";"]
    //   TokenTree = (*) "(" TokenTree+ ")" ["="]
    //   TokenTree = (*) "(" TokenTree+ ")" ["["]
    //   TokenTree = (*) "(" TokenTree+ ")" ["{"]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"\'.\'"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"[0-9]+"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "(" TokenTree+ (*) ")" ["("]
    //   TokenTree = "(" TokenTree+ (*) ")" ["*"]
    //   TokenTree = "(" TokenTree+ (*) ")" [","]
    //   TokenTree = "(" TokenTree+ (*) ")" ["."]
    //   TokenTree = "(" TokenTree+ (*) ")" [";"]
    //   TokenTree = "(" TokenTree+ (*) ")" ["="]
    //   TokenTree = "(" TokenTree+ (*) ")" ["["]
    //   TokenTree = "(" TokenTree+ (*) ")" ["]"]
    //   TokenTree = "(" TokenTree+ (*) ")" ["{"]
    //   TokenTree = "(" TokenTree+ (*) ")" [r#"\"[^\"]*\""#]
    //   TokenTree = "(" TokenTree+ (*) ")" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "(" TokenTree+ (*) ")" [r#"$[$0-9]+"#]
    //   TokenTree = "(" TokenTree+ (*) ")" [r#"\'.\'"#]
    //   TokenTree = "(" TokenTree+ (*) ")" [r#"[0-9]+"#]
    //   TokenTree = "(" TokenTree+ (*) ")" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" ")" ["("]
    //   TokenTree = (*) "(" ")" [")"]
    //   TokenTree = (*) "(" ")" ["*"]
    //   TokenTree = (*) "(" ")" [","]
    //   TokenTree = (*) "(" ")" ["."]
    //   TokenTree = (*) "(" ")" [";"]
    //   TokenTree = (*) "(" ")" ["="]
    //   TokenTree = (*) "(" ")" ["["]
    //   TokenTree = (*) "(" ")" ["{"]
    //   TokenTree = (*) "(" ")" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "(" ")" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" ")" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "(" ")" [r#"\'.\'"#]
    //   TokenTree = (*) "(" ")" [r#"[0-9]+"#]
    //   TokenTree = (*) "(" ")" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" TokenTree+ "]" ["("]
    //   TokenTree = (*) "[" TokenTree+ "]" [")"]
    //   TokenTree = (*) "[" TokenTree+ "]" ["*"]
    //   TokenTree = (*) "[" TokenTree+ "]" [","]
    //   TokenTree = (*) "[" TokenTree+ "]" ["."]
    //   TokenTree = (*) "[" TokenTree+ "]" [";"]
    //   TokenTree = (*) "[" TokenTree+ "]" ["="]
    //   TokenTree = (*) "[" TokenTree+ "]" ["["]
    //   TokenTree = (*) "[" TokenTree+ "]" ["{"]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"\'.\'"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"[0-9]+"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" "]" ["("]
    //   TokenTree = (*) "[" "]" [")"]
    //   TokenTree = (*) "[" "]" ["*"]
    //   TokenTree = (*) "[" "]" [","]
    //   TokenTree = (*) "[" "]" ["."]
    //   TokenTree = (*) "[" "]" [";"]
    //   TokenTree = (*) "[" "]" ["="]
    //   TokenTree = (*) "[" "]" ["["]
    //   TokenTree = (*) "[" "]" ["{"]
    //   TokenTree = (*) "[" "]" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "[" "]" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" "]" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "[" "]" [r#"\'.\'"#]
    //   TokenTree = (*) "[" "]" [r#"[0-9]+"#]
    //   TokenTree = (*) "[" "]" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" TokenTree+ "}" ["("]
    //   TokenTree = (*) "{" TokenTree+ "}" [")"]
    //   TokenTree = (*) "{" TokenTree+ "}" ["*"]
    //   TokenTree = (*) "{" TokenTree+ "}" [","]
    //   TokenTree = (*) "{" TokenTree+ "}" ["."]
    //   TokenTree = (*) "{" TokenTree+ "}" [";"]
    //   TokenTree = (*) "{" TokenTree+ "}" ["="]
    //   TokenTree = (*) "{" TokenTree+ "}" ["["]
    //   TokenTree = (*) "{" TokenTree+ "}" ["{"]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"\'.\'"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"[0-9]+"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" "}" ["("]
    //   TokenTree = (*) "{" "}" [")"]
    //   TokenTree = (*) "{" "}" ["*"]
    //   TokenTree = (*) "{" "}" [","]
    //   TokenTree = (*) "{" "}" ["."]
    //   TokenTree = (*) "{" "}" [";"]
    //   TokenTree = (*) "{" "}" ["="]
    //   TokenTree = (*) "{" "}" ["["]
    //   TokenTree = (*) "{" "}" ["{"]
    //   TokenTree = (*) "{" "}" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "{" "}" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" "}" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "{" "}" [r#"\'.\'"#]
    //   TokenTree = (*) "{" "}" [r#"[0-9]+"#]
    //   TokenTree = (*) "{" "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["("]
    //   TokenTree+ = TokenTree+ (*) TokenTree [")"]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["*"]
    //   TokenTree+ = TokenTree+ (*) TokenTree [","]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["."]
    //   TokenTree+ = TokenTree+ (*) TokenTree [";"]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["="]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["["]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["{"]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"\"[^\"]*\""#]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"$[$0-9]+"#]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"\'.\'"#]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"[0-9]+"#]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Ident ["("]
    //   UnpairedToken = (*) Ident [")"]
    //   UnpairedToken = (*) Ident ["*"]
    //   UnpairedToken = (*) Ident [","]
    //   UnpairedToken = (*) Ident ["."]
    //   UnpairedToken = (*) Ident [";"]
    //   UnpairedToken = (*) Ident ["="]
    //   UnpairedToken = (*) Ident ["["]
    //   UnpairedToken = (*) Ident ["{"]
    //   UnpairedToken = (*) Ident [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) Ident [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Ident [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) Ident [r#"\'.\'"#]
    //   UnpairedToken = (*) Ident [r#"[0-9]+"#]
    //   UnpairedToken = (*) Ident [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Integer ["("]
    //   UnpairedToken = (*) Integer [")"]
    //   UnpairedToken = (*) Integer ["*"]
    //   UnpairedToken = (*) Integer [","]
    //   UnpairedToken = (*) Integer ["."]
    //   UnpairedToken = (*) Integer [";"]
    //   UnpairedToken = (*) Integer ["="]
    //   UnpairedToken = (*) Integer ["["]
    //   UnpairedToken = (*) Integer ["{"]
    //   UnpairedToken = (*) Integer [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) Integer [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Integer [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) Integer [r#"\'.\'"#]
    //   UnpairedToken = (*) Integer [r#"[0-9]+"#]
    //   UnpairedToken = (*) Integer [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "*" ["("]
    //   UnpairedToken = (*) "*" [")"]
    //   UnpairedToken = (*) "*" ["*"]
    //   UnpairedToken = (*) "*" [","]
    //   UnpairedToken = (*) "*" ["."]
    //   UnpairedToken = (*) "*" [";"]
    //   UnpairedToken = (*) "*" ["="]
    //   UnpairedToken = (*) "*" ["["]
    //   UnpairedToken = (*) "*" ["{"]
    //   UnpairedToken = (*) "*" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "*" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "*" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "*" [r#"\'.\'"#]
    //   UnpairedToken = (*) "*" [r#"[0-9]+"#]
    //   UnpairedToken = (*) "*" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "," ["("]
    //   UnpairedToken = (*) "," [")"]
    //   UnpairedToken = (*) "," ["*"]
    //   UnpairedToken = (*) "," [","]
    //   UnpairedToken = (*) "," ["."]
    //   UnpairedToken = (*) "," [";"]
    //   UnpairedToken = (*) "," ["="]
    //   UnpairedToken = (*) "," ["["]
    //   UnpairedToken = (*) "," ["{"]
    //   UnpairedToken = (*) "," [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "," [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "," [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "," [r#"\'.\'"#]
    //   UnpairedToken = (*) "," [r#"[0-9]+"#]
    //   UnpairedToken = (*) "," [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "." ["("]
    //   UnpairedToken = (*) "." [")"]
    //   UnpairedToken = (*) "." ["*"]
    //   UnpairedToken = (*) "." [","]
    //   UnpairedToken = (*) "." ["."]
    //   UnpairedToken = (*) "." [";"]
    //   UnpairedToken = (*) "." ["="]
    //   UnpairedToken = (*) "." ["["]
    //   UnpairedToken = (*) "." ["{"]
    //   UnpairedToken = (*) "." [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "." [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "." [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "." [r#"\'.\'"#]
    //   UnpairedToken = (*) "." [r#"[0-9]+"#]
    //   UnpairedToken = (*) "." [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) ";" ["("]
    //   UnpairedToken = (*) ";" [")"]
    //   UnpairedToken = (*) ";" ["*"]
    //   UnpairedToken = (*) ";" [","]
    //   UnpairedToken = (*) ";" ["."]
    //   UnpairedToken = (*) ";" [";"]
    //   UnpairedToken = (*) ";" ["="]
    //   UnpairedToken = (*) ";" ["["]
    //   UnpairedToken = (*) ";" ["{"]
    //   UnpairedToken = (*) ";" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) ";" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) ";" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) ";" [r#"\'.\'"#]
    //   UnpairedToken = (*) ";" [r#"[0-9]+"#]
    //   UnpairedToken = (*) ";" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "=" ["("]
    //   UnpairedToken = (*) "=" [")"]
    //   UnpairedToken = (*) "=" ["*"]
    //   UnpairedToken = (*) "=" [","]
    //   UnpairedToken = (*) "=" ["."]
    //   UnpairedToken = (*) "=" [";"]
    //   UnpairedToken = (*) "=" ["="]
    //   UnpairedToken = (*) "=" ["["]
    //   UnpairedToken = (*) "=" ["{"]
    //   UnpairedToken = (*) "=" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "=" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "=" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "=" [r#"\'.\'"#]
    //   UnpairedToken = (*) "=" [r#"[0-9]+"#]
    //   UnpairedToken = (*) "=" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["("]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [")"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["*"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [","]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["."]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [";"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["="]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["["]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["{"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["("]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [")"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["*"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [","]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["."]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [";"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["="]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["["]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["{"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["("]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [")"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["*"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [","]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["."]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [";"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["="]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["["]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["{"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\'.\'"# ["("]
    //   UnpairedToken = (*) r#"\'.\'"# [")"]
    //   UnpairedToken = (*) r#"\'.\'"# ["*"]
    //   UnpairedToken = (*) r#"\'.\'"# [","]
    //   UnpairedToken = (*) r#"\'.\'"# ["."]
    //   UnpairedToken = (*) r#"\'.\'"# [";"]
    //   UnpairedToken = (*) r#"\'.\'"# ["="]
    //   UnpairedToken = (*) r#"\'.\'"# ["["]
    //   UnpairedToken = (*) r#"\'.\'"# ["{"]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Shift(S106)
    //   ")" -> Shift(S163)
    //   "*" -> Shift(S108)
    //   "," -> Shift(S109)
    //   "." -> Shift(S110)
    //   ";" -> Shift(S111)
    //   "=" -> Shift(S112)
    //   "[" -> Shift(S113)
    //   "{" -> Shift(S114)
    //   r#"\"[^\"]*\""# -> Shift(S115)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S116)
    //   r#"$[$0-9]+"# -> Shift(S117)
    //   r#"\'.\'"# -> Shift(S118)
    //   r#"[0-9]+"# -> Shift(S119)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S120)
    //
    //   Ident -> S101
    //   Integer -> S102
    //   TokenTree -> S143
    //   UnpairedToken -> S105
    pub fn __state153<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<::std::vec::Vec<()>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state106(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state163(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state108(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state109(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (17, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state110(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state111(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state112(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state113(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state114(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state115(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state116(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state117(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state118(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state119(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (31, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state120(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ident(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state101(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state102(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::TokenTree(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state143(input, __lookbehind, __tokens, __lookahead, __sym1, __sym2));
                }
                __Nonterminal::UnpairedToken(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state105(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 154
    //   TokenTree = "(" ")" (*) ["("]
    //   TokenTree = "(" ")" (*) ["*"]
    //   TokenTree = "(" ")" (*) [","]
    //   TokenTree = "(" ")" (*) ["."]
    //   TokenTree = "(" ")" (*) [";"]
    //   TokenTree = "(" ")" (*) ["="]
    //   TokenTree = "(" ")" (*) ["["]
    //   TokenTree = "(" ")" (*) ["]"]
    //   TokenTree = "(" ")" (*) ["{"]
    //   TokenTree = "(" ")" (*) [r#"\"[^\"]*\""#]
    //   TokenTree = "(" ")" (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "(" ")" (*) [r#"$[$0-9]+"#]
    //   TokenTree = "(" ")" (*) [r#"\'.\'"#]
    //   TokenTree = "(" ")" (*) [r#"[0-9]+"#]
    //   TokenTree = "(" ")" (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(TokenTree = "(", ")" => ActionFn(77);)
    //   "*" -> Reduce(TokenTree = "(", ")" => ActionFn(77);)
    //   "," -> Reduce(TokenTree = "(", ")" => ActionFn(77);)
    //   "." -> Reduce(TokenTree = "(", ")" => ActionFn(77);)
    //   ";" -> Reduce(TokenTree = "(", ")" => ActionFn(77);)
    //   "=" -> Reduce(TokenTree = "(", ")" => ActionFn(77);)
    //   "[" -> Reduce(TokenTree = "(", ")" => ActionFn(77);)
    //   "]" -> Reduce(TokenTree = "(", ")" => ActionFn(77);)
    //   "{" -> Reduce(TokenTree = "(", ")" => ActionFn(77);)
    //   r#"\"[^\"]*\""# -> Reduce(TokenTree = "(", ")" => ActionFn(77);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(TokenTree = "(", ")" => ActionFn(77);)
    //   r#"$[$0-9]+"# -> Reduce(TokenTree = "(", ")" => ActionFn(77);)
    //   r#"\'.\'"# -> Reduce(TokenTree = "(", ")" => ActionFn(77);)
    //   r#"[0-9]+"# -> Reduce(TokenTree = "(", ")" => ActionFn(77);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(TokenTree = "(", ")" => ActionFn(77);)
    //
    pub fn __state154<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action77(input, __sym0, __sym1, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::TokenTree(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 155
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["("]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["*"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [","]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["."]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [";"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["="]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["["]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["]"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["{"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\"[^\"]*\""#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"$[$0-9]+"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[0-9]+"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Integer = (*) r#"[0-9]+"# ["("]
    //   Integer = (*) r#"[0-9]+"# ["*"]
    //   Integer = (*) r#"[0-9]+"# [","]
    //   Integer = (*) r#"[0-9]+"# ["."]
    //   Integer = (*) r#"[0-9]+"# [";"]
    //   Integer = (*) r#"[0-9]+"# ["="]
    //   Integer = (*) r#"[0-9]+"# ["["]
    //   Integer = (*) r#"[0-9]+"# ["]"]
    //   Integer = (*) r#"[0-9]+"# ["{"]
    //   Integer = (*) r#"[0-9]+"# [r#"\"[^\"]*\""#]
    //   Integer = (*) r#"[0-9]+"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Integer = (*) r#"[0-9]+"# [r#"$[$0-9]+"#]
    //   Integer = (*) r#"[0-9]+"# [r#"\'.\'"#]
    //   Integer = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Integer = (*) r#"[0-9]+"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) UnpairedToken ["("]
    //   TokenTree = (*) UnpairedToken ["*"]
    //   TokenTree = (*) UnpairedToken [","]
    //   TokenTree = (*) UnpairedToken ["."]
    //   TokenTree = (*) UnpairedToken [";"]
    //   TokenTree = (*) UnpairedToken ["="]
    //   TokenTree = (*) UnpairedToken ["["]
    //   TokenTree = (*) UnpairedToken ["]"]
    //   TokenTree = (*) UnpairedToken ["{"]
    //   TokenTree = (*) UnpairedToken [r#"\"[^\"]*\""#]
    //   TokenTree = (*) UnpairedToken [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) UnpairedToken [r#"$[$0-9]+"#]
    //   TokenTree = (*) UnpairedToken [r#"\'.\'"#]
    //   TokenTree = (*) UnpairedToken [r#"[0-9]+"#]
    //   TokenTree = (*) UnpairedToken [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" TokenTree+ ")" ["("]
    //   TokenTree = (*) "(" TokenTree+ ")" ["*"]
    //   TokenTree = (*) "(" TokenTree+ ")" [","]
    //   TokenTree = (*) "(" TokenTree+ ")" ["."]
    //   TokenTree = (*) "(" TokenTree+ ")" [";"]
    //   TokenTree = (*) "(" TokenTree+ ")" ["="]
    //   TokenTree = (*) "(" TokenTree+ ")" ["["]
    //   TokenTree = (*) "(" TokenTree+ ")" ["]"]
    //   TokenTree = (*) "(" TokenTree+ ")" ["{"]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"\'.\'"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"[0-9]+"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" ")" ["("]
    //   TokenTree = (*) "(" ")" ["*"]
    //   TokenTree = (*) "(" ")" [","]
    //   TokenTree = (*) "(" ")" ["."]
    //   TokenTree = (*) "(" ")" [";"]
    //   TokenTree = (*) "(" ")" ["="]
    //   TokenTree = (*) "(" ")" ["["]
    //   TokenTree = (*) "(" ")" ["]"]
    //   TokenTree = (*) "(" ")" ["{"]
    //   TokenTree = (*) "(" ")" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "(" ")" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" ")" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "(" ")" [r#"\'.\'"#]
    //   TokenTree = (*) "(" ")" [r#"[0-9]+"#]
    //   TokenTree = (*) "(" ")" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" TokenTree+ "]" ["("]
    //   TokenTree = (*) "[" TokenTree+ "]" ["*"]
    //   TokenTree = (*) "[" TokenTree+ "]" [","]
    //   TokenTree = (*) "[" TokenTree+ "]" ["."]
    //   TokenTree = (*) "[" TokenTree+ "]" [";"]
    //   TokenTree = (*) "[" TokenTree+ "]" ["="]
    //   TokenTree = (*) "[" TokenTree+ "]" ["["]
    //   TokenTree = (*) "[" TokenTree+ "]" ["]"]
    //   TokenTree = (*) "[" TokenTree+ "]" ["{"]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"\'.\'"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"[0-9]+"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "[" TokenTree+ (*) "]" ["("]
    //   TokenTree = "[" TokenTree+ (*) "]" ["*"]
    //   TokenTree = "[" TokenTree+ (*) "]" [","]
    //   TokenTree = "[" TokenTree+ (*) "]" ["."]
    //   TokenTree = "[" TokenTree+ (*) "]" [";"]
    //   TokenTree = "[" TokenTree+ (*) "]" ["="]
    //   TokenTree = "[" TokenTree+ (*) "]" ["["]
    //   TokenTree = "[" TokenTree+ (*) "]" ["]"]
    //   TokenTree = "[" TokenTree+ (*) "]" ["{"]
    //   TokenTree = "[" TokenTree+ (*) "]" [r#"\"[^\"]*\""#]
    //   TokenTree = "[" TokenTree+ (*) "]" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "[" TokenTree+ (*) "]" [r#"$[$0-9]+"#]
    //   TokenTree = "[" TokenTree+ (*) "]" [r#"\'.\'"#]
    //   TokenTree = "[" TokenTree+ (*) "]" [r#"[0-9]+"#]
    //   TokenTree = "[" TokenTree+ (*) "]" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" "]" ["("]
    //   TokenTree = (*) "[" "]" ["*"]
    //   TokenTree = (*) "[" "]" [","]
    //   TokenTree = (*) "[" "]" ["."]
    //   TokenTree = (*) "[" "]" [";"]
    //   TokenTree = (*) "[" "]" ["="]
    //   TokenTree = (*) "[" "]" ["["]
    //   TokenTree = (*) "[" "]" ["]"]
    //   TokenTree = (*) "[" "]" ["{"]
    //   TokenTree = (*) "[" "]" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "[" "]" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" "]" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "[" "]" [r#"\'.\'"#]
    //   TokenTree = (*) "[" "]" [r#"[0-9]+"#]
    //   TokenTree = (*) "[" "]" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" TokenTree+ "}" ["("]
    //   TokenTree = (*) "{" TokenTree+ "}" ["*"]
    //   TokenTree = (*) "{" TokenTree+ "}" [","]
    //   TokenTree = (*) "{" TokenTree+ "}" ["."]
    //   TokenTree = (*) "{" TokenTree+ "}" [";"]
    //   TokenTree = (*) "{" TokenTree+ "}" ["="]
    //   TokenTree = (*) "{" TokenTree+ "}" ["["]
    //   TokenTree = (*) "{" TokenTree+ "}" ["]"]
    //   TokenTree = (*) "{" TokenTree+ "}" ["{"]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"\'.\'"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"[0-9]+"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" "}" ["("]
    //   TokenTree = (*) "{" "}" ["*"]
    //   TokenTree = (*) "{" "}" [","]
    //   TokenTree = (*) "{" "}" ["."]
    //   TokenTree = (*) "{" "}" [";"]
    //   TokenTree = (*) "{" "}" ["="]
    //   TokenTree = (*) "{" "}" ["["]
    //   TokenTree = (*) "{" "}" ["]"]
    //   TokenTree = (*) "{" "}" ["{"]
    //   TokenTree = (*) "{" "}" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "{" "}" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" "}" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "{" "}" [r#"\'.\'"#]
    //   TokenTree = (*) "{" "}" [r#"[0-9]+"#]
    //   TokenTree = (*) "{" "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["("]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["*"]
    //   TokenTree+ = TokenTree+ (*) TokenTree [","]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["."]
    //   TokenTree+ = TokenTree+ (*) TokenTree [";"]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["="]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["["]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["]"]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["{"]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"\"[^\"]*\""#]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"$[$0-9]+"#]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"\'.\'"#]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"[0-9]+"#]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Ident ["("]
    //   UnpairedToken = (*) Ident ["*"]
    //   UnpairedToken = (*) Ident [","]
    //   UnpairedToken = (*) Ident ["."]
    //   UnpairedToken = (*) Ident [";"]
    //   UnpairedToken = (*) Ident ["="]
    //   UnpairedToken = (*) Ident ["["]
    //   UnpairedToken = (*) Ident ["]"]
    //   UnpairedToken = (*) Ident ["{"]
    //   UnpairedToken = (*) Ident [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) Ident [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Ident [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) Ident [r#"\'.\'"#]
    //   UnpairedToken = (*) Ident [r#"[0-9]+"#]
    //   UnpairedToken = (*) Ident [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Integer ["("]
    //   UnpairedToken = (*) Integer ["*"]
    //   UnpairedToken = (*) Integer [","]
    //   UnpairedToken = (*) Integer ["."]
    //   UnpairedToken = (*) Integer [";"]
    //   UnpairedToken = (*) Integer ["="]
    //   UnpairedToken = (*) Integer ["["]
    //   UnpairedToken = (*) Integer ["]"]
    //   UnpairedToken = (*) Integer ["{"]
    //   UnpairedToken = (*) Integer [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) Integer [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Integer [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) Integer [r#"\'.\'"#]
    //   UnpairedToken = (*) Integer [r#"[0-9]+"#]
    //   UnpairedToken = (*) Integer [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "*" ["("]
    //   UnpairedToken = (*) "*" ["*"]
    //   UnpairedToken = (*) "*" [","]
    //   UnpairedToken = (*) "*" ["."]
    //   UnpairedToken = (*) "*" [";"]
    //   UnpairedToken = (*) "*" ["="]
    //   UnpairedToken = (*) "*" ["["]
    //   UnpairedToken = (*) "*" ["]"]
    //   UnpairedToken = (*) "*" ["{"]
    //   UnpairedToken = (*) "*" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "*" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "*" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "*" [r#"\'.\'"#]
    //   UnpairedToken = (*) "*" [r#"[0-9]+"#]
    //   UnpairedToken = (*) "*" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "," ["("]
    //   UnpairedToken = (*) "," ["*"]
    //   UnpairedToken = (*) "," [","]
    //   UnpairedToken = (*) "," ["."]
    //   UnpairedToken = (*) "," [";"]
    //   UnpairedToken = (*) "," ["="]
    //   UnpairedToken = (*) "," ["["]
    //   UnpairedToken = (*) "," ["]"]
    //   UnpairedToken = (*) "," ["{"]
    //   UnpairedToken = (*) "," [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "," [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "," [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "," [r#"\'.\'"#]
    //   UnpairedToken = (*) "," [r#"[0-9]+"#]
    //   UnpairedToken = (*) "," [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "." ["("]
    //   UnpairedToken = (*) "." ["*"]
    //   UnpairedToken = (*) "." [","]
    //   UnpairedToken = (*) "." ["."]
    //   UnpairedToken = (*) "." [";"]
    //   UnpairedToken = (*) "." ["="]
    //   UnpairedToken = (*) "." ["["]
    //   UnpairedToken = (*) "." ["]"]
    //   UnpairedToken = (*) "." ["{"]
    //   UnpairedToken = (*) "." [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "." [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "." [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "." [r#"\'.\'"#]
    //   UnpairedToken = (*) "." [r#"[0-9]+"#]
    //   UnpairedToken = (*) "." [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) ";" ["("]
    //   UnpairedToken = (*) ";" ["*"]
    //   UnpairedToken = (*) ";" [","]
    //   UnpairedToken = (*) ";" ["."]
    //   UnpairedToken = (*) ";" [";"]
    //   UnpairedToken = (*) ";" ["="]
    //   UnpairedToken = (*) ";" ["["]
    //   UnpairedToken = (*) ";" ["]"]
    //   UnpairedToken = (*) ";" ["{"]
    //   UnpairedToken = (*) ";" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) ";" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) ";" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) ";" [r#"\'.\'"#]
    //   UnpairedToken = (*) ";" [r#"[0-9]+"#]
    //   UnpairedToken = (*) ";" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "=" ["("]
    //   UnpairedToken = (*) "=" ["*"]
    //   UnpairedToken = (*) "=" [","]
    //   UnpairedToken = (*) "=" ["."]
    //   UnpairedToken = (*) "=" [";"]
    //   UnpairedToken = (*) "=" ["="]
    //   UnpairedToken = (*) "=" ["["]
    //   UnpairedToken = (*) "=" ["]"]
    //   UnpairedToken = (*) "=" ["{"]
    //   UnpairedToken = (*) "=" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "=" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "=" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "=" [r#"\'.\'"#]
    //   UnpairedToken = (*) "=" [r#"[0-9]+"#]
    //   UnpairedToken = (*) "=" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["("]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["*"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [","]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["."]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [";"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["="]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["["]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["]"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["{"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["("]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["*"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [","]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["."]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [";"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["="]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["["]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["]"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["{"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["("]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["*"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [","]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["."]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [";"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["="]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["["]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["]"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["{"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\'.\'"# ["("]
    //   UnpairedToken = (*) r#"\'.\'"# ["*"]
    //   UnpairedToken = (*) r#"\'.\'"# [","]
    //   UnpairedToken = (*) r#"\'.\'"# ["."]
    //   UnpairedToken = (*) r#"\'.\'"# [";"]
    //   UnpairedToken = (*) r#"\'.\'"# ["="]
    //   UnpairedToken = (*) r#"\'.\'"# ["["]
    //   UnpairedToken = (*) r#"\'.\'"# ["]"]
    //   UnpairedToken = (*) r#"\'.\'"# ["{"]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Shift(S126)
    //   "*" -> Shift(S127)
    //   "," -> Shift(S128)
    //   "." -> Shift(S129)
    //   ";" -> Shift(S130)
    //   "=" -> Shift(S131)
    //   "[" -> Shift(S132)
    //   "]" -> Shift(S164)
    //   "{" -> Shift(S134)
    //   r#"\"[^\"]*\""# -> Shift(S135)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S136)
    //   r#"$[$0-9]+"# -> Shift(S137)
    //   r#"\'.\'"# -> Shift(S138)
    //   r#"[0-9]+"# -> Shift(S139)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S140)
    //
    //   Ident -> S121
    //   Integer -> S122
    //   TokenTree -> S151
    //   UnpairedToken -> S125
    pub fn __state155<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<::std::vec::Vec<()>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state126(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state127(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state128(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (17, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state129(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state130(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state131(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state132(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (22, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state164(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state134(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state135(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state136(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state137(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state138(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state139(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (31, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state140(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ident(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state121(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state122(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::TokenTree(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state151(input, __lookbehind, __tokens, __lookahead, __sym1, __sym2));
                }
                __Nonterminal::UnpairedToken(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state125(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 156
    //   TokenTree = "[" "]" (*) ["("]
    //   TokenTree = "[" "]" (*) ["*"]
    //   TokenTree = "[" "]" (*) [","]
    //   TokenTree = "[" "]" (*) ["."]
    //   TokenTree = "[" "]" (*) [";"]
    //   TokenTree = "[" "]" (*) ["="]
    //   TokenTree = "[" "]" (*) ["["]
    //   TokenTree = "[" "]" (*) ["]"]
    //   TokenTree = "[" "]" (*) ["{"]
    //   TokenTree = "[" "]" (*) [r#"\"[^\"]*\""#]
    //   TokenTree = "[" "]" (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "[" "]" (*) [r#"$[$0-9]+"#]
    //   TokenTree = "[" "]" (*) [r#"\'.\'"#]
    //   TokenTree = "[" "]" (*) [r#"[0-9]+"#]
    //   TokenTree = "[" "]" (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(TokenTree = "[", "]" => ActionFn(79);)
    //   "*" -> Reduce(TokenTree = "[", "]" => ActionFn(79);)
    //   "," -> Reduce(TokenTree = "[", "]" => ActionFn(79);)
    //   "." -> Reduce(TokenTree = "[", "]" => ActionFn(79);)
    //   ";" -> Reduce(TokenTree = "[", "]" => ActionFn(79);)
    //   "=" -> Reduce(TokenTree = "[", "]" => ActionFn(79);)
    //   "[" -> Reduce(TokenTree = "[", "]" => ActionFn(79);)
    //   "]" -> Reduce(TokenTree = "[", "]" => ActionFn(79);)
    //   "{" -> Reduce(TokenTree = "[", "]" => ActionFn(79);)
    //   r#"\"[^\"]*\""# -> Reduce(TokenTree = "[", "]" => ActionFn(79);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(TokenTree = "[", "]" => ActionFn(79);)
    //   r#"$[$0-9]+"# -> Reduce(TokenTree = "[", "]" => ActionFn(79);)
    //   r#"\'.\'"# -> Reduce(TokenTree = "[", "]" => ActionFn(79);)
    //   r#"[0-9]+"# -> Reduce(TokenTree = "[", "]" => ActionFn(79);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(TokenTree = "[", "]" => ActionFn(79);)
    //
    pub fn __state156<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action79(input, __sym0, __sym1, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::TokenTree(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 157
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["("]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["*"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [","]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["."]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [";"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["="]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["["]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["{"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# ["}"]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\"[^\"]*\""#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"$[$0-9]+"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[0-9]+"#]
    //   Ident = (*) r#"[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Integer = (*) r#"[0-9]+"# ["("]
    //   Integer = (*) r#"[0-9]+"# ["*"]
    //   Integer = (*) r#"[0-9]+"# [","]
    //   Integer = (*) r#"[0-9]+"# ["."]
    //   Integer = (*) r#"[0-9]+"# [";"]
    //   Integer = (*) r#"[0-9]+"# ["="]
    //   Integer = (*) r#"[0-9]+"# ["["]
    //   Integer = (*) r#"[0-9]+"# ["{"]
    //   Integer = (*) r#"[0-9]+"# ["}"]
    //   Integer = (*) r#"[0-9]+"# [r#"\"[^\"]*\""#]
    //   Integer = (*) r#"[0-9]+"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   Integer = (*) r#"[0-9]+"# [r#"$[$0-9]+"#]
    //   Integer = (*) r#"[0-9]+"# [r#"\'.\'"#]
    //   Integer = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Integer = (*) r#"[0-9]+"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) UnpairedToken ["("]
    //   TokenTree = (*) UnpairedToken ["*"]
    //   TokenTree = (*) UnpairedToken [","]
    //   TokenTree = (*) UnpairedToken ["."]
    //   TokenTree = (*) UnpairedToken [";"]
    //   TokenTree = (*) UnpairedToken ["="]
    //   TokenTree = (*) UnpairedToken ["["]
    //   TokenTree = (*) UnpairedToken ["{"]
    //   TokenTree = (*) UnpairedToken ["}"]
    //   TokenTree = (*) UnpairedToken [r#"\"[^\"]*\""#]
    //   TokenTree = (*) UnpairedToken [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) UnpairedToken [r#"$[$0-9]+"#]
    //   TokenTree = (*) UnpairedToken [r#"\'.\'"#]
    //   TokenTree = (*) UnpairedToken [r#"[0-9]+"#]
    //   TokenTree = (*) UnpairedToken [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" TokenTree+ ")" ["("]
    //   TokenTree = (*) "(" TokenTree+ ")" ["*"]
    //   TokenTree = (*) "(" TokenTree+ ")" [","]
    //   TokenTree = (*) "(" TokenTree+ ")" ["."]
    //   TokenTree = (*) "(" TokenTree+ ")" [";"]
    //   TokenTree = (*) "(" TokenTree+ ")" ["="]
    //   TokenTree = (*) "(" TokenTree+ ")" ["["]
    //   TokenTree = (*) "(" TokenTree+ ")" ["{"]
    //   TokenTree = (*) "(" TokenTree+ ")" ["}"]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"\'.\'"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"[0-9]+"#]
    //   TokenTree = (*) "(" TokenTree+ ")" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" ")" ["("]
    //   TokenTree = (*) "(" ")" ["*"]
    //   TokenTree = (*) "(" ")" [","]
    //   TokenTree = (*) "(" ")" ["."]
    //   TokenTree = (*) "(" ")" [";"]
    //   TokenTree = (*) "(" ")" ["="]
    //   TokenTree = (*) "(" ")" ["["]
    //   TokenTree = (*) "(" ")" ["{"]
    //   TokenTree = (*) "(" ")" ["}"]
    //   TokenTree = (*) "(" ")" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "(" ")" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "(" ")" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "(" ")" [r#"\'.\'"#]
    //   TokenTree = (*) "(" ")" [r#"[0-9]+"#]
    //   TokenTree = (*) "(" ")" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" TokenTree+ "]" ["("]
    //   TokenTree = (*) "[" TokenTree+ "]" ["*"]
    //   TokenTree = (*) "[" TokenTree+ "]" [","]
    //   TokenTree = (*) "[" TokenTree+ "]" ["."]
    //   TokenTree = (*) "[" TokenTree+ "]" [";"]
    //   TokenTree = (*) "[" TokenTree+ "]" ["="]
    //   TokenTree = (*) "[" TokenTree+ "]" ["["]
    //   TokenTree = (*) "[" TokenTree+ "]" ["{"]
    //   TokenTree = (*) "[" TokenTree+ "]" ["}"]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"\'.\'"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"[0-9]+"#]
    //   TokenTree = (*) "[" TokenTree+ "]" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" "]" ["("]
    //   TokenTree = (*) "[" "]" ["*"]
    //   TokenTree = (*) "[" "]" [","]
    //   TokenTree = (*) "[" "]" ["."]
    //   TokenTree = (*) "[" "]" [";"]
    //   TokenTree = (*) "[" "]" ["="]
    //   TokenTree = (*) "[" "]" ["["]
    //   TokenTree = (*) "[" "]" ["{"]
    //   TokenTree = (*) "[" "]" ["}"]
    //   TokenTree = (*) "[" "]" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "[" "]" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "[" "]" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "[" "]" [r#"\'.\'"#]
    //   TokenTree = (*) "[" "]" [r#"[0-9]+"#]
    //   TokenTree = (*) "[" "]" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" TokenTree+ "}" ["("]
    //   TokenTree = (*) "{" TokenTree+ "}" ["*"]
    //   TokenTree = (*) "{" TokenTree+ "}" [","]
    //   TokenTree = (*) "{" TokenTree+ "}" ["."]
    //   TokenTree = (*) "{" TokenTree+ "}" [";"]
    //   TokenTree = (*) "{" TokenTree+ "}" ["="]
    //   TokenTree = (*) "{" TokenTree+ "}" ["["]
    //   TokenTree = (*) "{" TokenTree+ "}" ["{"]
    //   TokenTree = (*) "{" TokenTree+ "}" ["}"]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"\'.\'"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"[0-9]+"#]
    //   TokenTree = (*) "{" TokenTree+ "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "{" TokenTree+ (*) "}" ["("]
    //   TokenTree = "{" TokenTree+ (*) "}" ["*"]
    //   TokenTree = "{" TokenTree+ (*) "}" [","]
    //   TokenTree = "{" TokenTree+ (*) "}" ["."]
    //   TokenTree = "{" TokenTree+ (*) "}" [";"]
    //   TokenTree = "{" TokenTree+ (*) "}" ["="]
    //   TokenTree = "{" TokenTree+ (*) "}" ["["]
    //   TokenTree = "{" TokenTree+ (*) "}" ["]"]
    //   TokenTree = "{" TokenTree+ (*) "}" ["{"]
    //   TokenTree = "{" TokenTree+ (*) "}" [r#"\"[^\"]*\""#]
    //   TokenTree = "{" TokenTree+ (*) "}" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "{" TokenTree+ (*) "}" [r#"$[$0-9]+"#]
    //   TokenTree = "{" TokenTree+ (*) "}" [r#"\'.\'"#]
    //   TokenTree = "{" TokenTree+ (*) "}" [r#"[0-9]+"#]
    //   TokenTree = "{" TokenTree+ (*) "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" "}" ["("]
    //   TokenTree = (*) "{" "}" ["*"]
    //   TokenTree = (*) "{" "}" [","]
    //   TokenTree = (*) "{" "}" ["."]
    //   TokenTree = (*) "{" "}" [";"]
    //   TokenTree = (*) "{" "}" ["="]
    //   TokenTree = (*) "{" "}" ["["]
    //   TokenTree = (*) "{" "}" ["{"]
    //   TokenTree = (*) "{" "}" ["}"]
    //   TokenTree = (*) "{" "}" [r#"\"[^\"]*\""#]
    //   TokenTree = (*) "{" "}" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = (*) "{" "}" [r#"$[$0-9]+"#]
    //   TokenTree = (*) "{" "}" [r#"\'.\'"#]
    //   TokenTree = (*) "{" "}" [r#"[0-9]+"#]
    //   TokenTree = (*) "{" "}" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["("]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["*"]
    //   TokenTree+ = TokenTree+ (*) TokenTree [","]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["."]
    //   TokenTree+ = TokenTree+ (*) TokenTree [";"]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["="]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["["]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["{"]
    //   TokenTree+ = TokenTree+ (*) TokenTree ["}"]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"\"[^\"]*\""#]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"$[$0-9]+"#]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"\'.\'"#]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"[0-9]+"#]
    //   TokenTree+ = TokenTree+ (*) TokenTree [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Ident ["("]
    //   UnpairedToken = (*) Ident ["*"]
    //   UnpairedToken = (*) Ident [","]
    //   UnpairedToken = (*) Ident ["."]
    //   UnpairedToken = (*) Ident [";"]
    //   UnpairedToken = (*) Ident ["="]
    //   UnpairedToken = (*) Ident ["["]
    //   UnpairedToken = (*) Ident ["{"]
    //   UnpairedToken = (*) Ident ["}"]
    //   UnpairedToken = (*) Ident [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) Ident [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Ident [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) Ident [r#"\'.\'"#]
    //   UnpairedToken = (*) Ident [r#"[0-9]+"#]
    //   UnpairedToken = (*) Ident [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Integer ["("]
    //   UnpairedToken = (*) Integer ["*"]
    //   UnpairedToken = (*) Integer [","]
    //   UnpairedToken = (*) Integer ["."]
    //   UnpairedToken = (*) Integer [";"]
    //   UnpairedToken = (*) Integer ["="]
    //   UnpairedToken = (*) Integer ["["]
    //   UnpairedToken = (*) Integer ["{"]
    //   UnpairedToken = (*) Integer ["}"]
    //   UnpairedToken = (*) Integer [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) Integer [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) Integer [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) Integer [r#"\'.\'"#]
    //   UnpairedToken = (*) Integer [r#"[0-9]+"#]
    //   UnpairedToken = (*) Integer [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "*" ["("]
    //   UnpairedToken = (*) "*" ["*"]
    //   UnpairedToken = (*) "*" [","]
    //   UnpairedToken = (*) "*" ["."]
    //   UnpairedToken = (*) "*" [";"]
    //   UnpairedToken = (*) "*" ["="]
    //   UnpairedToken = (*) "*" ["["]
    //   UnpairedToken = (*) "*" ["{"]
    //   UnpairedToken = (*) "*" ["}"]
    //   UnpairedToken = (*) "*" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "*" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "*" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "*" [r#"\'.\'"#]
    //   UnpairedToken = (*) "*" [r#"[0-9]+"#]
    //   UnpairedToken = (*) "*" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "," ["("]
    //   UnpairedToken = (*) "," ["*"]
    //   UnpairedToken = (*) "," [","]
    //   UnpairedToken = (*) "," ["."]
    //   UnpairedToken = (*) "," [";"]
    //   UnpairedToken = (*) "," ["="]
    //   UnpairedToken = (*) "," ["["]
    //   UnpairedToken = (*) "," ["{"]
    //   UnpairedToken = (*) "," ["}"]
    //   UnpairedToken = (*) "," [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "," [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "," [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "," [r#"\'.\'"#]
    //   UnpairedToken = (*) "," [r#"[0-9]+"#]
    //   UnpairedToken = (*) "," [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "." ["("]
    //   UnpairedToken = (*) "." ["*"]
    //   UnpairedToken = (*) "." [","]
    //   UnpairedToken = (*) "." ["."]
    //   UnpairedToken = (*) "." [";"]
    //   UnpairedToken = (*) "." ["="]
    //   UnpairedToken = (*) "." ["["]
    //   UnpairedToken = (*) "." ["{"]
    //   UnpairedToken = (*) "." ["}"]
    //   UnpairedToken = (*) "." [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "." [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "." [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "." [r#"\'.\'"#]
    //   UnpairedToken = (*) "." [r#"[0-9]+"#]
    //   UnpairedToken = (*) "." [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) ";" ["("]
    //   UnpairedToken = (*) ";" ["*"]
    //   UnpairedToken = (*) ";" [","]
    //   UnpairedToken = (*) ";" ["."]
    //   UnpairedToken = (*) ";" [";"]
    //   UnpairedToken = (*) ";" ["="]
    //   UnpairedToken = (*) ";" ["["]
    //   UnpairedToken = (*) ";" ["{"]
    //   UnpairedToken = (*) ";" ["}"]
    //   UnpairedToken = (*) ";" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) ";" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) ";" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) ";" [r#"\'.\'"#]
    //   UnpairedToken = (*) ";" [r#"[0-9]+"#]
    //   UnpairedToken = (*) ";" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "=" ["("]
    //   UnpairedToken = (*) "=" ["*"]
    //   UnpairedToken = (*) "=" [","]
    //   UnpairedToken = (*) "=" ["."]
    //   UnpairedToken = (*) "=" [";"]
    //   UnpairedToken = (*) "=" ["="]
    //   UnpairedToken = (*) "=" ["["]
    //   UnpairedToken = (*) "=" ["{"]
    //   UnpairedToken = (*) "=" ["}"]
    //   UnpairedToken = (*) "=" [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) "=" [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) "=" [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) "=" [r#"\'.\'"#]
    //   UnpairedToken = (*) "=" [r#"[0-9]+"#]
    //   UnpairedToken = (*) "=" [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["("]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["*"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [","]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["."]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [";"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["="]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["["]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["{"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# ["}"]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"\"[^\"]*\""# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["("]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["*"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [","]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["."]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [";"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["="]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["["]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["{"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# ["}"]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"#[_a-zA-Z][_a-zA-Z0-9]*"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["("]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["*"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [","]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["."]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [";"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["="]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["["]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["{"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# ["}"]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"$[$0-9]+"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\'.\'"# ["("]
    //   UnpairedToken = (*) r#"\'.\'"# ["*"]
    //   UnpairedToken = (*) r#"\'.\'"# [","]
    //   UnpairedToken = (*) r#"\'.\'"# ["."]
    //   UnpairedToken = (*) r#"\'.\'"# [";"]
    //   UnpairedToken = (*) r#"\'.\'"# ["="]
    //   UnpairedToken = (*) r#"\'.\'"# ["["]
    //   UnpairedToken = (*) r#"\'.\'"# ["{"]
    //   UnpairedToken = (*) r#"\'.\'"# ["}"]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"\"[^\"]*\""#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"$[$0-9]+"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"\'.\'"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"[0-9]+"#]
    //   UnpairedToken = (*) r#"\'.\'"# [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Shift(S83)
    //   "*" -> Shift(S84)
    //   "," -> Shift(S85)
    //   "." -> Shift(S86)
    //   ";" -> Shift(S87)
    //   "=" -> Shift(S88)
    //   "[" -> Shift(S89)
    //   "{" -> Shift(S90)
    //   "}" -> Shift(S165)
    //   r#"\"[^\"]*\""# -> Shift(S92)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S93)
    //   r#"$[$0-9]+"# -> Shift(S94)
    //   r#"\'.\'"# -> Shift(S95)
    //   r#"[0-9]+"# -> Shift(S96)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Shift(S97)
    //
    //   Ident -> S78
    //   Integer -> S79
    //   TokenTree -> S99
    //   UnpairedToken -> S82
    pub fn __state157<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<::std::vec::Vec<()>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        match __lookahead {
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state83(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state84(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state85(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (17, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state86(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state87(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state88(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state89(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state90(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state165(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state92(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state93(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state94(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state95(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state96(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (31, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state97(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ident(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state78(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state79(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::TokenTree(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state99(input, __lookbehind, __tokens, __lookahead, __sym1, __sym2));
                }
                __Nonterminal::UnpairedToken(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state82(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 158
    //   TokenTree = "{" "}" (*) ["("]
    //   TokenTree = "{" "}" (*) ["*"]
    //   TokenTree = "{" "}" (*) [","]
    //   TokenTree = "{" "}" (*) ["."]
    //   TokenTree = "{" "}" (*) [";"]
    //   TokenTree = "{" "}" (*) ["="]
    //   TokenTree = "{" "}" (*) ["["]
    //   TokenTree = "{" "}" (*) ["]"]
    //   TokenTree = "{" "}" (*) ["{"]
    //   TokenTree = "{" "}" (*) [r#"\"[^\"]*\""#]
    //   TokenTree = "{" "}" (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "{" "}" (*) [r#"$[$0-9]+"#]
    //   TokenTree = "{" "}" (*) [r#"\'.\'"#]
    //   TokenTree = "{" "}" (*) [r#"[0-9]+"#]
    //   TokenTree = "{" "}" (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(TokenTree = "{", "}" => ActionFn(75);)
    //   "*" -> Reduce(TokenTree = "{", "}" => ActionFn(75);)
    //   "," -> Reduce(TokenTree = "{", "}" => ActionFn(75);)
    //   "." -> Reduce(TokenTree = "{", "}" => ActionFn(75);)
    //   ";" -> Reduce(TokenTree = "{", "}" => ActionFn(75);)
    //   "=" -> Reduce(TokenTree = "{", "}" => ActionFn(75);)
    //   "[" -> Reduce(TokenTree = "{", "}" => ActionFn(75);)
    //   "]" -> Reduce(TokenTree = "{", "}" => ActionFn(75);)
    //   "{" -> Reduce(TokenTree = "{", "}" => ActionFn(75);)
    //   r#"\"[^\"]*\""# -> Reduce(TokenTree = "{", "}" => ActionFn(75);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(TokenTree = "{", "}" => ActionFn(75);)
    //   r#"$[$0-9]+"# -> Reduce(TokenTree = "{", "}" => ActionFn(75);)
    //   r#"\'.\'"# -> Reduce(TokenTree = "{", "}" => ActionFn(75);)
    //   r#"[0-9]+"# -> Reduce(TokenTree = "{", "}" => ActionFn(75);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(TokenTree = "{", "}" => ActionFn(75);)
    //
    pub fn __state158<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action75(input, __sym0, __sym1, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::TokenTree(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 159
    //   TokenTree = "{" TokenTree+ "}" (*) ["("]
    //   TokenTree = "{" TokenTree+ "}" (*) ["*"]
    //   TokenTree = "{" TokenTree+ "}" (*) [","]
    //   TokenTree = "{" TokenTree+ "}" (*) ["."]
    //   TokenTree = "{" TokenTree+ "}" (*) [";"]
    //   TokenTree = "{" TokenTree+ "}" (*) ["="]
    //   TokenTree = "{" TokenTree+ "}" (*) ["["]
    //   TokenTree = "{" TokenTree+ "}" (*) ["{"]
    //   TokenTree = "{" TokenTree+ "}" (*) ["}"]
    //   TokenTree = "{" TokenTree+ "}" (*) [r#"\"[^\"]*\""#]
    //   TokenTree = "{" TokenTree+ "}" (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "{" TokenTree+ "}" (*) [r#"$[$0-9]+"#]
    //   TokenTree = "{" TokenTree+ "}" (*) [r#"\'.\'"#]
    //   TokenTree = "{" TokenTree+ "}" (*) [r#"[0-9]+"#]
    //   TokenTree = "{" TokenTree+ "}" (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(TokenTree = "{", TokenTree+, "}" => ActionFn(76);)
    //   "*" -> Reduce(TokenTree = "{", TokenTree+, "}" => ActionFn(76);)
    //   "," -> Reduce(TokenTree = "{", TokenTree+, "}" => ActionFn(76);)
    //   "." -> Reduce(TokenTree = "{", TokenTree+, "}" => ActionFn(76);)
    //   ";" -> Reduce(TokenTree = "{", TokenTree+, "}" => ActionFn(76);)
    //   "=" -> Reduce(TokenTree = "{", TokenTree+, "}" => ActionFn(76);)
    //   "[" -> Reduce(TokenTree = "{", TokenTree+, "}" => ActionFn(76);)
    //   "{" -> Reduce(TokenTree = "{", TokenTree+, "}" => ActionFn(76);)
    //   "}" -> Reduce(TokenTree = "{", TokenTree+, "}" => ActionFn(76);)
    //   r#"\"[^\"]*\""# -> Reduce(TokenTree = "{", TokenTree+, "}" => ActionFn(76);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(TokenTree = "{", TokenTree+, "}" => ActionFn(76);)
    //   r#"$[$0-9]+"# -> Reduce(TokenTree = "{", TokenTree+, "}" => ActionFn(76);)
    //   r#"\'.\'"# -> Reduce(TokenTree = "{", TokenTree+, "}" => ActionFn(76);)
    //   r#"[0-9]+"# -> Reduce(TokenTree = "{", TokenTree+, "}" => ActionFn(76);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(TokenTree = "{", TokenTree+, "}" => ActionFn(76);)
    //
    pub fn __state159<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<::std::vec::Vec<()>>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action76(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::TokenTree(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 160
    //   TokenTree = "(" TokenTree+ ")" (*) ["("]
    //   TokenTree = "(" TokenTree+ ")" (*) [")"]
    //   TokenTree = "(" TokenTree+ ")" (*) ["*"]
    //   TokenTree = "(" TokenTree+ ")" (*) [","]
    //   TokenTree = "(" TokenTree+ ")" (*) ["."]
    //   TokenTree = "(" TokenTree+ ")" (*) [";"]
    //   TokenTree = "(" TokenTree+ ")" (*) ["="]
    //   TokenTree = "(" TokenTree+ ")" (*) ["["]
    //   TokenTree = "(" TokenTree+ ")" (*) ["{"]
    //   TokenTree = "(" TokenTree+ ")" (*) [r#"\"[^\"]*\""#]
    //   TokenTree = "(" TokenTree+ ")" (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "(" TokenTree+ ")" (*) [r#"$[$0-9]+"#]
    //   TokenTree = "(" TokenTree+ ")" (*) [r#"\'.\'"#]
    //   TokenTree = "(" TokenTree+ ")" (*) [r#"[0-9]+"#]
    //   TokenTree = "(" TokenTree+ ")" (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(TokenTree = "(", TokenTree+, ")" => ActionFn(78);)
    //   ")" -> Reduce(TokenTree = "(", TokenTree+, ")" => ActionFn(78);)
    //   "*" -> Reduce(TokenTree = "(", TokenTree+, ")" => ActionFn(78);)
    //   "," -> Reduce(TokenTree = "(", TokenTree+, ")" => ActionFn(78);)
    //   "." -> Reduce(TokenTree = "(", TokenTree+, ")" => ActionFn(78);)
    //   ";" -> Reduce(TokenTree = "(", TokenTree+, ")" => ActionFn(78);)
    //   "=" -> Reduce(TokenTree = "(", TokenTree+, ")" => ActionFn(78);)
    //   "[" -> Reduce(TokenTree = "(", TokenTree+, ")" => ActionFn(78);)
    //   "{" -> Reduce(TokenTree = "(", TokenTree+, ")" => ActionFn(78);)
    //   r#"\"[^\"]*\""# -> Reduce(TokenTree = "(", TokenTree+, ")" => ActionFn(78);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(TokenTree = "(", TokenTree+, ")" => ActionFn(78);)
    //   r#"$[$0-9]+"# -> Reduce(TokenTree = "(", TokenTree+, ")" => ActionFn(78);)
    //   r#"\'.\'"# -> Reduce(TokenTree = "(", TokenTree+, ")" => ActionFn(78);)
    //   r#"[0-9]+"# -> Reduce(TokenTree = "(", TokenTree+, ")" => ActionFn(78);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(TokenTree = "(", TokenTree+, ")" => ActionFn(78);)
    //
    pub fn __state160<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<::std::vec::Vec<()>>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (14, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action78(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::TokenTree(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 161
    //   TokenTree = "[" TokenTree+ "]" (*) ["("]
    //   TokenTree = "[" TokenTree+ "]" (*) [")"]
    //   TokenTree = "[" TokenTree+ "]" (*) ["*"]
    //   TokenTree = "[" TokenTree+ "]" (*) [","]
    //   TokenTree = "[" TokenTree+ "]" (*) ["."]
    //   TokenTree = "[" TokenTree+ "]" (*) [";"]
    //   TokenTree = "[" TokenTree+ "]" (*) ["="]
    //   TokenTree = "[" TokenTree+ "]" (*) ["["]
    //   TokenTree = "[" TokenTree+ "]" (*) ["{"]
    //   TokenTree = "[" TokenTree+ "]" (*) [r#"\"[^\"]*\""#]
    //   TokenTree = "[" TokenTree+ "]" (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "[" TokenTree+ "]" (*) [r#"$[$0-9]+"#]
    //   TokenTree = "[" TokenTree+ "]" (*) [r#"\'.\'"#]
    //   TokenTree = "[" TokenTree+ "]" (*) [r#"[0-9]+"#]
    //   TokenTree = "[" TokenTree+ "]" (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(TokenTree = "[", TokenTree+, "]" => ActionFn(80);)
    //   ")" -> Reduce(TokenTree = "[", TokenTree+, "]" => ActionFn(80);)
    //   "*" -> Reduce(TokenTree = "[", TokenTree+, "]" => ActionFn(80);)
    //   "," -> Reduce(TokenTree = "[", TokenTree+, "]" => ActionFn(80);)
    //   "." -> Reduce(TokenTree = "[", TokenTree+, "]" => ActionFn(80);)
    //   ";" -> Reduce(TokenTree = "[", TokenTree+, "]" => ActionFn(80);)
    //   "=" -> Reduce(TokenTree = "[", TokenTree+, "]" => ActionFn(80);)
    //   "[" -> Reduce(TokenTree = "[", TokenTree+, "]" => ActionFn(80);)
    //   "{" -> Reduce(TokenTree = "[", TokenTree+, "]" => ActionFn(80);)
    //   r#"\"[^\"]*\""# -> Reduce(TokenTree = "[", TokenTree+, "]" => ActionFn(80);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(TokenTree = "[", TokenTree+, "]" => ActionFn(80);)
    //   r#"$[$0-9]+"# -> Reduce(TokenTree = "[", TokenTree+, "]" => ActionFn(80);)
    //   r#"\'.\'"# -> Reduce(TokenTree = "[", TokenTree+, "]" => ActionFn(80);)
    //   r#"[0-9]+"# -> Reduce(TokenTree = "[", TokenTree+, "]" => ActionFn(80);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(TokenTree = "[", TokenTree+, "]" => ActionFn(80);)
    //
    pub fn __state161<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<::std::vec::Vec<()>>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (14, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action80(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::TokenTree(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 162
    //   TokenTree = "{" TokenTree+ "}" (*) ["("]
    //   TokenTree = "{" TokenTree+ "}" (*) [")"]
    //   TokenTree = "{" TokenTree+ "}" (*) ["*"]
    //   TokenTree = "{" TokenTree+ "}" (*) [","]
    //   TokenTree = "{" TokenTree+ "}" (*) ["."]
    //   TokenTree = "{" TokenTree+ "}" (*) [";"]
    //   TokenTree = "{" TokenTree+ "}" (*) ["="]
    //   TokenTree = "{" TokenTree+ "}" (*) ["["]
    //   TokenTree = "{" TokenTree+ "}" (*) ["{"]
    //   TokenTree = "{" TokenTree+ "}" (*) [r#"\"[^\"]*\""#]
    //   TokenTree = "{" TokenTree+ "}" (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "{" TokenTree+ "}" (*) [r#"$[$0-9]+"#]
    //   TokenTree = "{" TokenTree+ "}" (*) [r#"\'.\'"#]
    //   TokenTree = "{" TokenTree+ "}" (*) [r#"[0-9]+"#]
    //   TokenTree = "{" TokenTree+ "}" (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(TokenTree = "{", TokenTree+, "}" => ActionFn(76);)
    //   ")" -> Reduce(TokenTree = "{", TokenTree+, "}" => ActionFn(76);)
    //   "*" -> Reduce(TokenTree = "{", TokenTree+, "}" => ActionFn(76);)
    //   "," -> Reduce(TokenTree = "{", TokenTree+, "}" => ActionFn(76);)
    //   "." -> Reduce(TokenTree = "{", TokenTree+, "}" => ActionFn(76);)
    //   ";" -> Reduce(TokenTree = "{", TokenTree+, "}" => ActionFn(76);)
    //   "=" -> Reduce(TokenTree = "{", TokenTree+, "}" => ActionFn(76);)
    //   "[" -> Reduce(TokenTree = "{", TokenTree+, "}" => ActionFn(76);)
    //   "{" -> Reduce(TokenTree = "{", TokenTree+, "}" => ActionFn(76);)
    //   r#"\"[^\"]*\""# -> Reduce(TokenTree = "{", TokenTree+, "}" => ActionFn(76);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(TokenTree = "{", TokenTree+, "}" => ActionFn(76);)
    //   r#"$[$0-9]+"# -> Reduce(TokenTree = "{", TokenTree+, "}" => ActionFn(76);)
    //   r#"\'.\'"# -> Reduce(TokenTree = "{", TokenTree+, "}" => ActionFn(76);)
    //   r#"[0-9]+"# -> Reduce(TokenTree = "{", TokenTree+, "}" => ActionFn(76);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(TokenTree = "{", TokenTree+, "}" => ActionFn(76);)
    //
    pub fn __state162<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<::std::vec::Vec<()>>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (14, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action76(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::TokenTree(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 163
    //   TokenTree = "(" TokenTree+ ")" (*) ["("]
    //   TokenTree = "(" TokenTree+ ")" (*) ["*"]
    //   TokenTree = "(" TokenTree+ ")" (*) [","]
    //   TokenTree = "(" TokenTree+ ")" (*) ["."]
    //   TokenTree = "(" TokenTree+ ")" (*) [";"]
    //   TokenTree = "(" TokenTree+ ")" (*) ["="]
    //   TokenTree = "(" TokenTree+ ")" (*) ["["]
    //   TokenTree = "(" TokenTree+ ")" (*) ["]"]
    //   TokenTree = "(" TokenTree+ ")" (*) ["{"]
    //   TokenTree = "(" TokenTree+ ")" (*) [r#"\"[^\"]*\""#]
    //   TokenTree = "(" TokenTree+ ")" (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "(" TokenTree+ ")" (*) [r#"$[$0-9]+"#]
    //   TokenTree = "(" TokenTree+ ")" (*) [r#"\'.\'"#]
    //   TokenTree = "(" TokenTree+ ")" (*) [r#"[0-9]+"#]
    //   TokenTree = "(" TokenTree+ ")" (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(TokenTree = "(", TokenTree+, ")" => ActionFn(78);)
    //   "*" -> Reduce(TokenTree = "(", TokenTree+, ")" => ActionFn(78);)
    //   "," -> Reduce(TokenTree = "(", TokenTree+, ")" => ActionFn(78);)
    //   "." -> Reduce(TokenTree = "(", TokenTree+, ")" => ActionFn(78);)
    //   ";" -> Reduce(TokenTree = "(", TokenTree+, ")" => ActionFn(78);)
    //   "=" -> Reduce(TokenTree = "(", TokenTree+, ")" => ActionFn(78);)
    //   "[" -> Reduce(TokenTree = "(", TokenTree+, ")" => ActionFn(78);)
    //   "]" -> Reduce(TokenTree = "(", TokenTree+, ")" => ActionFn(78);)
    //   "{" -> Reduce(TokenTree = "(", TokenTree+, ")" => ActionFn(78);)
    //   r#"\"[^\"]*\""# -> Reduce(TokenTree = "(", TokenTree+, ")" => ActionFn(78);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(TokenTree = "(", TokenTree+, ")" => ActionFn(78);)
    //   r#"$[$0-9]+"# -> Reduce(TokenTree = "(", TokenTree+, ")" => ActionFn(78);)
    //   r#"\'.\'"# -> Reduce(TokenTree = "(", TokenTree+, ")" => ActionFn(78);)
    //   r#"[0-9]+"# -> Reduce(TokenTree = "(", TokenTree+, ")" => ActionFn(78);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(TokenTree = "(", TokenTree+, ")" => ActionFn(78);)
    //
    pub fn __state163<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<::std::vec::Vec<()>>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action78(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::TokenTree(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 164
    //   TokenTree = "[" TokenTree+ "]" (*) ["("]
    //   TokenTree = "[" TokenTree+ "]" (*) ["*"]
    //   TokenTree = "[" TokenTree+ "]" (*) [","]
    //   TokenTree = "[" TokenTree+ "]" (*) ["."]
    //   TokenTree = "[" TokenTree+ "]" (*) [";"]
    //   TokenTree = "[" TokenTree+ "]" (*) ["="]
    //   TokenTree = "[" TokenTree+ "]" (*) ["["]
    //   TokenTree = "[" TokenTree+ "]" (*) ["]"]
    //   TokenTree = "[" TokenTree+ "]" (*) ["{"]
    //   TokenTree = "[" TokenTree+ "]" (*) [r#"\"[^\"]*\""#]
    //   TokenTree = "[" TokenTree+ "]" (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "[" TokenTree+ "]" (*) [r#"$[$0-9]+"#]
    //   TokenTree = "[" TokenTree+ "]" (*) [r#"\'.\'"#]
    //   TokenTree = "[" TokenTree+ "]" (*) [r#"[0-9]+"#]
    //   TokenTree = "[" TokenTree+ "]" (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(TokenTree = "[", TokenTree+, "]" => ActionFn(80);)
    //   "*" -> Reduce(TokenTree = "[", TokenTree+, "]" => ActionFn(80);)
    //   "," -> Reduce(TokenTree = "[", TokenTree+, "]" => ActionFn(80);)
    //   "." -> Reduce(TokenTree = "[", TokenTree+, "]" => ActionFn(80);)
    //   ";" -> Reduce(TokenTree = "[", TokenTree+, "]" => ActionFn(80);)
    //   "=" -> Reduce(TokenTree = "[", TokenTree+, "]" => ActionFn(80);)
    //   "[" -> Reduce(TokenTree = "[", TokenTree+, "]" => ActionFn(80);)
    //   "]" -> Reduce(TokenTree = "[", TokenTree+, "]" => ActionFn(80);)
    //   "{" -> Reduce(TokenTree = "[", TokenTree+, "]" => ActionFn(80);)
    //   r#"\"[^\"]*\""# -> Reduce(TokenTree = "[", TokenTree+, "]" => ActionFn(80);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(TokenTree = "[", TokenTree+, "]" => ActionFn(80);)
    //   r#"$[$0-9]+"# -> Reduce(TokenTree = "[", TokenTree+, "]" => ActionFn(80);)
    //   r#"\'.\'"# -> Reduce(TokenTree = "[", TokenTree+, "]" => ActionFn(80);)
    //   r#"[0-9]+"# -> Reduce(TokenTree = "[", TokenTree+, "]" => ActionFn(80);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(TokenTree = "[", TokenTree+, "]" => ActionFn(80);)
    //
    pub fn __state164<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<::std::vec::Vec<()>>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action80(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::TokenTree(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 165
    //   TokenTree = "{" TokenTree+ "}" (*) ["("]
    //   TokenTree = "{" TokenTree+ "}" (*) ["*"]
    //   TokenTree = "{" TokenTree+ "}" (*) [","]
    //   TokenTree = "{" TokenTree+ "}" (*) ["."]
    //   TokenTree = "{" TokenTree+ "}" (*) [";"]
    //   TokenTree = "{" TokenTree+ "}" (*) ["="]
    //   TokenTree = "{" TokenTree+ "}" (*) ["["]
    //   TokenTree = "{" TokenTree+ "}" (*) ["]"]
    //   TokenTree = "{" TokenTree+ "}" (*) ["{"]
    //   TokenTree = "{" TokenTree+ "}" (*) [r#"\"[^\"]*\""#]
    //   TokenTree = "{" TokenTree+ "}" (*) [r#"#[_a-zA-Z][_a-zA-Z0-9]*"#]
    //   TokenTree = "{" TokenTree+ "}" (*) [r#"$[$0-9]+"#]
    //   TokenTree = "{" TokenTree+ "}" (*) [r#"\'.\'"#]
    //   TokenTree = "{" TokenTree+ "}" (*) [r#"[0-9]+"#]
    //   TokenTree = "{" TokenTree+ "}" (*) [r#"[_a-zA-Z][_a-zA-Z0-9]*"#]
    //
    //   "(" -> Reduce(TokenTree = "{", TokenTree+, "}" => ActionFn(76);)
    //   "*" -> Reduce(TokenTree = "{", TokenTree+, "}" => ActionFn(76);)
    //   "," -> Reduce(TokenTree = "{", TokenTree+, "}" => ActionFn(76);)
    //   "." -> Reduce(TokenTree = "{", TokenTree+, "}" => ActionFn(76);)
    //   ";" -> Reduce(TokenTree = "{", TokenTree+, "}" => ActionFn(76);)
    //   "=" -> Reduce(TokenTree = "{", TokenTree+, "}" => ActionFn(76);)
    //   "[" -> Reduce(TokenTree = "{", TokenTree+, "}" => ActionFn(76);)
    //   "]" -> Reduce(TokenTree = "{", TokenTree+, "}" => ActionFn(76);)
    //   "{" -> Reduce(TokenTree = "{", TokenTree+, "}" => ActionFn(76);)
    //   r#"\"[^\"]*\""# -> Reduce(TokenTree = "{", TokenTree+, "}" => ActionFn(76);)
    //   r#"#[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(TokenTree = "{", TokenTree+, "}" => ActionFn(76);)
    //   r#"$[$0-9]+"# -> Reduce(TokenTree = "{", TokenTree+, "}" => ActionFn(76);)
    //   r#"\'.\'"# -> Reduce(TokenTree = "{", TokenTree+, "}" => ActionFn(76);)
    //   r#"[0-9]+"# -> Reduce(TokenTree = "{", TokenTree+, "}" => ActionFn(76);)
    //   r#"[_a-zA-Z][_a-zA-Z0-9]*"# -> Reduce(TokenTree = "{", TokenTree+, "}" => ActionFn(76);)
    //
    pub fn __state165<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<::std::vec::Vec<()>>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<'input>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) |
            Some((_, (31, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action76(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::TokenTree(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }
}
pub use self::__parse__Yacc::parse_Yacc;
mod __intern_token {
    extern crate lalrpop_util as __lalrpop_util;
    use self::__lalrpop_util::ParseError as __ParseError;
    pub struct __Matcher<'input> {
        text: &'input str,
        consumed: usize,
    }

    fn __tokenize(text: &str) -> Option<(usize, usize)> {
        let mut __chars = text.char_indices();
        let mut __current_match: Option<(usize, usize)> = None;
        let mut __current_state: usize = 0;
        loop {
            match __current_state {
                0 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '\"' => {
                            __current_state = 1;
                            continue;
                        }
                        '#' => {
                            __current_state = 2;
                            continue;
                        }
                        '$' => {
                            __current_state = 3;
                            continue;
                        }
                        '%' => {
                            __current_state = 4;
                            continue;
                        }
                        '\'' => {
                            __current_state = 5;
                            continue;
                        }
                        '(' => {
                            __current_match = Some((13, __index + 1));
                            __current_state = 6;
                            continue;
                        }
                        ')' => {
                            __current_match = Some((14, __index + 1));
                            __current_state = 7;
                            continue;
                        }
                        '*' => {
                            __current_match = Some((15, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        ',' => {
                            __current_match = Some((16, __index + 1));
                            __current_state = 9;
                            continue;
                        }
                        '.' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 10;
                            continue;
                        }
                        '0' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        ':' => {
                            __current_match = Some((18, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        ';' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 13;
                            continue;
                        }
                        '=' => {
                            __current_match = Some((20, __index + 1));
                            __current_state = 14;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '[' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        ']' => {
                            __current_match = Some((22, __index + 1));
                            __current_state = 17;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        's' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        't' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '{' => {
                            __current_match = Some((23, __index + 1));
                            __current_state = 18;
                            continue;
                        }
                        '|' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '}' => {
                            __current_match = Some((25, __index + 1));
                            __current_state = 20;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                1 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '\"' => {
                            __current_match = Some((26, __index + 1));
                            __current_state = 22;
                            continue;
                        }
                        _ => {
                            __current_state = 23;
                            continue;
                        }
                    }
                }
                2 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        'A' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        's' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        't' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                3 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '$' => {
                            __current_match = Some((28, __index + 1));
                            __current_state = 25;
                            continue;
                        }
                        '0' => {
                            __current_match = Some((28, __index + 1));
                            __current_state = 25;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((28, __index + 1));
                            __current_state = 25;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((28, __index + 1));
                            __current_state = 25;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((28, __index + 1));
                            __current_state = 25;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((28, __index + 1));
                            __current_state = 25;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((28, __index + 1));
                            __current_state = 25;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((28, __index + 1));
                            __current_state = 25;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((28, __index + 1));
                            __current_state = 25;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((28, __index + 1));
                            __current_state = 25;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((28, __index + 1));
                            __current_state = 25;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                4 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '%' => {
                            __current_match = Some((0, __index + 1));
                            __current_state = 26;
                            continue;
                        }
                        'd' => {
                            __current_state = 27;
                            continue;
                        }
                        'e' => {
                            __current_state = 28;
                            continue;
                        }
                        'l' => {
                            __current_state = 29;
                            continue;
                        }
                        'n' => {
                            __current_state = 30;
                            continue;
                        }
                        'p' => {
                            __current_state = 31;
                            continue;
                        }
                        'r' => {
                            __current_state = 32;
                            continue;
                        }
                        's' => {
                            __current_state = 33;
                            continue;
                        }
                        't' => {
                            __current_state = 34;
                            continue;
                        }
                        '{' => {
                            __current_match = Some((11, __index + 1));
                            __current_state = 35;
                            continue;
                        }
                        '}' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 36;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                5 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            __current_state = 37;
                            continue;
                        }
                    }
                }
                6 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                7 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                8 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                9 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                10 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                11 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                12 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                13 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                14 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                15 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        's' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        't' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((31, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                16 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                17 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                18 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                19 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                20 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                21 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                22 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                23 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '\"' => {
                            __current_match = Some((26, __index + 1));
                            __current_state = 22;
                            continue;
                        }
                        _ => {
                            __current_state = 23;
                            continue;
                        }
                    }
                }
                24 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        's' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        't' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                25 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '$' => {
                            __current_match = Some((28, __index + 1));
                            __current_state = 25;
                            continue;
                        }
                        '0' => {
                            __current_match = Some((28, __index + 1));
                            __current_state = 25;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((28, __index + 1));
                            __current_state = 25;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((28, __index + 1));
                            __current_state = 25;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((28, __index + 1));
                            __current_state = 25;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((28, __index + 1));
                            __current_state = 25;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((28, __index + 1));
                            __current_state = 25;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((28, __index + 1));
                            __current_state = 25;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((28, __index + 1));
                            __current_state = 25;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((28, __index + 1));
                            __current_state = 25;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((28, __index + 1));
                            __current_state = 25;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                26 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                27 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        'e' => {
                            __current_state = 38;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                28 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        'm' => {
                            __current_state = 39;
                            continue;
                        }
                        'x' => {
                            __current_state = 40;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                29 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        'e' => {
                            __current_state = 41;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                30 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        'o' => {
                            __current_state = 42;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                31 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        'r' => {
                            __current_state = 43;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                32 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        'i' => {
                            __current_state = 44;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                33 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        't' => {
                            __current_state = 45;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                34 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        'o' => {
                            __current_state = 46;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                35 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                36 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                37 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '\'' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 47;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                38 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        'b' => {
                            __current_state = 48;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                39 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        'p' => {
                            __current_state = 49;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                40 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        'p' => {
                            __current_state = 50;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                41 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        'f' => {
                            __current_state = 51;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                42 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        'n' => {
                            __current_state = 52;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                43 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        'e' => {
                            __current_state = 53;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                44 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        'g' => {
                            __current_state = 54;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                45 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        'a' => {
                            __current_state = 55;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                46 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        'k' => {
                            __current_state = 56;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                47 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                48 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        'u' => {
                            __current_state = 57;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                49 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        't' => {
                            __current_state = 58;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                50 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        'e' => {
                            __current_state = 59;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                51 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        't' => {
                            __current_match = Some((4, __index + 1));
                            __current_state = 60;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                52 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        'a' => {
                            __current_state = 61;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                53 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        'c' => {
                            __current_match = Some((6, __index + 1));
                            __current_state = 62;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                54 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        'h' => {
                            __current_state = 63;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                55 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        'r' => {
                            __current_state = 64;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                56 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        'e' => {
                            __current_state = 65;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                57 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        'g' => {
                            __current_match = Some((1, __index + 1));
                            __current_state = 66;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                58 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        'y' => {
                            __current_match = Some((2, __index + 1));
                            __current_state = 67;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                59 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        'c' => {
                            __current_state = 68;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                60 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                61 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        's' => {
                            __current_state = 69;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                62 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        'e' => {
                            __current_state = 70;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                63 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        't' => {
                            __current_match = Some((8, __index + 1));
                            __current_state = 71;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                64 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        't' => {
                            __current_match = Some((9, __index + 1));
                            __current_state = 72;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                65 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        'n' => {
                            __current_match = Some((10, __index + 1));
                            __current_state = 73;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                66 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                67 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                68 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        't' => {
                            __current_match = Some((3, __index + 1));
                            __current_state = 74;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                69 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        's' => {
                            __current_state = 75;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                70 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        'd' => {
                            __current_state = 76;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                71 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                72 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                73 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                74 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                75 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        'o' => {
                            __current_state = 77;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                76 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        'e' => {
                            __current_state = 78;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                77 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        'c' => {
                            __current_match = Some((5, __index + 1));
                            __current_state = 79;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                78 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        'n' => {
                            __current_state = 80;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                79 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                80 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        'c' => {
                            __current_state = 81;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                81 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        'e' => {
                            __current_match = Some((7, __index + 1));
                            __current_state = 82;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                82 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                _ => { panic!("invalid state {}", __current_state); }
            }
        }
    }

    impl<'input> __Matcher<'input> {
        pub fn new(s: &'input str) -> __Matcher<'input> {
            __Matcher { text: s, consumed: 0 }
        }
    }

    impl<'input> Iterator for __Matcher<'input> {
        type Item = Result<(usize, (usize, &'input str), usize), __ParseError<usize,(usize, &'input str),()>>;

        fn next(&mut self) -> Option<Self::Item> {
            let __text = self.text.trim_left();
            let __whitespace = self.text.len() - __text.len();
            let __start_offset = self.consumed + __whitespace;
            if __text.is_empty() {
                self.text = __text;
                self.consumed = __start_offset;
                None
            } else {
                match __tokenize(__text) {
                    Some((__index, __length)) => {
                        let __result = &__text[..__length];
                        let __remaining = &__text[__length..];
                        let __end_offset = __start_offset + __length;
                        self.text = __remaining;
                        self.consumed = __end_offset;
                        Some(Ok((__start_offset, (__index, __result), __end_offset)))
                    }
                    None => {
                        Some(Err(__ParseError::InvalidToken { location: __start_offset }))
                    }
                }
            }
        }
    }
}

pub fn __action0<
    'input,
>(
    input: &'input str,
    __0: Yacc<'input>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Yacc<'input>
{
    (__0)
}

pub fn __action1<
    'input,
>(
    input: &'input str,
    _: (),
    d: Vec<BisonDecl<'input>>,
    _: &'input str,
    r: ::std::vec::Vec<GrammarRule<'input>>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Yacc<'input>
{
    Yacc {
    declarations: d,
    rules: r
}
}

pub fn __action2<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __1: ::std::vec::Vec<()>,
    __2: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ()
{
    ()
}

pub fn __action3<
    'input,
>(
    input: &'input str,
    __0: ::std::vec::Vec<Option<BisonDecl<'input>>>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Vec<BisonDecl<'input>>
{
    __0.into_iter().filter_map(|e| e).collect()
}

pub fn __action4<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Option<BisonDecl<'input>>
{
    None
}

pub fn __action5<
    'input,
>(
    input: &'input str,
    _: &'input str,
    __0: Ident<'input>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Option<BisonDecl<'input>>
{
    Some(BisonDecl::Token(__0))
}

pub fn __action6<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __1: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Option<BisonDecl<'input>>
{
    None
}

pub fn __action7<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __1: ::std::vec::Vec<Symbol<'input>>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Option<BisonDecl<'input>>
{
    None
}

pub fn __action8<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __1: ::std::vec::Vec<Symbol<'input>>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Option<BisonDecl<'input>>
{
    None
}

pub fn __action9<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __1: ::std::vec::Vec<Symbol<'input>>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Option<BisonDecl<'input>>
{
    None
}

pub fn __action10<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __1: ::std::vec::Vec<Symbol<'input>>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Option<BisonDecl<'input>>
{
    None
}

pub fn __action11<
    'input,
>(
    input: &'input str,
    _: &'input str,
    __0: Ident<'input>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Option<BisonDecl<'input>>
{
    Some(BisonDecl::Start(__0))
}

pub fn __action12<
    'input,
>(
    input: &'input str,
    __0: Ident<'input>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Symbol<'input>
{
    Symbol::Ident(__0)
}

pub fn __action13<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Symbol<'input>
{
    Symbol::Character(__0)
}

pub fn __action14<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Ident<'input>
{
    Ident { text: __0 }
}

pub fn __action15<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> &'input str
{
    (__0)
}

pub fn __action16<
    'input,
>(
    input: &'input str,
    n: Ident<'input>,
    _: &'input str,
    a: Vec<Alternative<'input>>,
    _: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> GrammarRule<'input>
{
    GrammarRule {
        nonterminal: n,
        alternatives: a
    }
}

pub fn __action17<
    'input,
>(
    input: &'input str,
    __0: Alternative<'input>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Vec<Alternative<'input>>
{
    vec![__0]
}

pub fn __action18<
    'input,
>(
    input: &'input str,
    v: Vec<Alternative<'input>>,
    _: &'input str,
    e: Alternative<'input>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Vec<Alternative<'input>>
{
    { let mut v = v; v.push(e); v }
}

pub fn __action19<
    'input,
>(
    input: &'input str,
    __0: ::std::vec::Vec<Option<Symbol<'input>>>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Alternative<'input>
{
    Alternative { symbols: __0.into_iter().filter_map(|x| x).collect() }
}

pub fn __action20<
    'input,
>(
    input: &'input str,
    __0: Symbol<'input>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Option<Symbol<'input>>
{
    Some(__0)
}

pub fn __action21<
    'input,
>(
    input: &'input str,
    __0: (),
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Option<Symbol<'input>>
{
    None
}

pub fn __action22<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __1: Symbol<'input>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Option<Symbol<'input>>
{
    None
}

pub fn __action23<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Option<Symbol<'input>>
{
    None
}

pub fn __action24<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __1: ::std::vec::Vec<()>,
    __2: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ()
{
    ()
}

pub fn __action25<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __1: ::std::vec::Vec<()>,
    __2: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ()
{
    ()
}

pub fn __action26<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __1: ::std::vec::Vec<()>,
    __2: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ()
{
    ()
}

pub fn __action27<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __1: ::std::vec::Vec<()>,
    __2: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ()
{
    ()
}

pub fn __action28<
    'input,
>(
    input: &'input str,
    __0: (),
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ()
{
    (__0)
}

pub fn __action29<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ()
{
    ()
}

pub fn __action30<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ()
{
    ()
}

pub fn __action31<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ()
{
    ()
}

pub fn __action32<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ()
{
    ()
}

pub fn __action33<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ()
{
    ()
}

pub fn __action34<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ()
{
    ()
}

pub fn __action35<
    'input,
>(
    input: &'input str,
    __0: (),
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ()
{
    (__0)
}

pub fn __action36<
    'input,
>(
    input: &'input str,
    __0: Ident<'input>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ()
{
    ()
}

pub fn __action37<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ()
{
    ()
}

pub fn __action38<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ()
{
    ()
}

pub fn __action39<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ()
{
    ()
}

pub fn __action40<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ()
{
    ()
}

pub fn __action41<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ()
{
    ()
}

pub fn __action42<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ()
{
    ()
}

pub fn __action43<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ()
{
    ()
}

pub fn __action44<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ()
{
    ()
}

pub fn __action45<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ()
{
    ()
}

pub fn __action46<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ()
{
    ()
}

pub fn __action47<
    'input,
>(
    input: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<()>
{
    vec![]
}

pub fn __action48<
    'input,
>(
    input: &'input str,
    v: ::std::vec::Vec<()>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<()>
{
    v
}

pub fn __action49<
    'input,
>(
    input: &'input str,
    __0: Option<Symbol<'input>>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<Option<Symbol<'input>>>
{
    vec![__0]
}

pub fn __action50<
    'input,
>(
    input: &'input str,
    v: ::std::vec::Vec<Option<Symbol<'input>>>,
    e: Option<Symbol<'input>>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<Option<Symbol<'input>>>
{
    { let mut v = v; v.push(e); v }
}

pub fn __action51<
    'input,
>(
    input: &'input str,
    __0: Symbol<'input>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<Symbol<'input>>
{
    vec![__0]
}

pub fn __action52<
    'input,
>(
    input: &'input str,
    v: ::std::vec::Vec<Symbol<'input>>,
    e: Symbol<'input>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<Symbol<'input>>
{
    { let mut v = v; v.push(e); v }
}

pub fn __action53<
    'input,
>(
    input: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<Option<BisonDecl<'input>>>
{
    vec![]
}

pub fn __action54<
    'input,
>(
    input: &'input str,
    v: ::std::vec::Vec<Option<BisonDecl<'input>>>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<Option<BisonDecl<'input>>>
{
    v
}

pub fn __action55<
    'input,
>(
    input: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<()>
{
    vec![]
}

pub fn __action56<
    'input,
>(
    input: &'input str,
    v: ::std::vec::Vec<()>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<()>
{
    v
}

pub fn __action57<
    'input,
>(
    input: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<GrammarRule<'input>>
{
    vec![]
}

pub fn __action58<
    'input,
>(
    input: &'input str,
    v: ::std::vec::Vec<GrammarRule<'input>>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<GrammarRule<'input>>
{
    v
}

pub fn __action59<
    'input,
>(
    input: &'input str,
    __0: GrammarRule<'input>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<GrammarRule<'input>>
{
    vec![__0]
}

pub fn __action60<
    'input,
>(
    input: &'input str,
    v: ::std::vec::Vec<GrammarRule<'input>>,
    e: GrammarRule<'input>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<GrammarRule<'input>>
{
    { let mut v = v; v.push(e); v }
}

pub fn __action61<
    'input,
>(
    input: &'input str,
    __0: (),
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<()>
{
    vec![__0]
}

pub fn __action62<
    'input,
>(
    input: &'input str,
    v: ::std::vec::Vec<()>,
    e: (),
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<()>
{
    { let mut v = v; v.push(e); v }
}

pub fn __action63<
    'input,
>(
    input: &'input str,
    __0: Option<BisonDecl<'input>>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<Option<BisonDecl<'input>>>
{
    vec![__0]
}

pub fn __action64<
    'input,
>(
    input: &'input str,
    v: ::std::vec::Vec<Option<BisonDecl<'input>>>,
    e: Option<BisonDecl<'input>>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<Option<BisonDecl<'input>>>
{
    { let mut v = v; v.push(e); v }
}

pub fn __action65<
    'input,
>(
    input: &'input str,
    __0: (),
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<()>
{
    vec![__0]
}

pub fn __action66<
    'input,
>(
    input: &'input str,
    v: ::std::vec::Vec<()>,
    e: (),
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<()>
{
    { let mut v = v; v.push(e); v }
}

pub fn __action67<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __1: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ()
{
    let __temp0 = __action55(
        input,
        __lookbehind,
        __lookahead,
    );
    __action2(
        input,
        __0,
        __temp0,
        __1,
        __lookbehind,
        __lookahead,
    )
}

pub fn __action68<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __1: ::std::vec::Vec<()>,
    __2: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ()
{
    let __temp0 = __action56(
        input,
        __1,
        __lookbehind,
        __lookahead,
    );
    __action2(
        input,
        __0,
        __temp0,
        __2,
        __lookbehind,
        __lookahead,
    )
}

pub fn __action69<
    'input,
>(
    input: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Vec<BisonDecl<'input>>
{
    let __temp0 = __action53(
        input,
        __lookbehind,
        __lookahead,
    );
    __action3(
        input,
        __temp0,
        __lookbehind,
        __lookahead,
    )
}

pub fn __action70<
    'input,
>(
    input: &'input str,
    __0: ::std::vec::Vec<Option<BisonDecl<'input>>>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Vec<BisonDecl<'input>>
{
    let __temp0 = __action54(
        input,
        __0,
        __lookbehind,
        __lookahead,
    );
    __action3(
        input,
        __temp0,
        __lookbehind,
        __lookahead,
    )
}

pub fn __action71<
    'input,
>(
    input: &'input str,
    __0: (),
    __1: Vec<BisonDecl<'input>>,
    __2: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Yacc<'input>
{
    let __temp0 = __action57(
        input,
        __lookbehind,
        __lookahead,
    );
    __action1(
        input,
        __0,
        __1,
        __2,
        __temp0,
        __lookbehind,
        __lookahead,
    )
}

pub fn __action72<
    'input,
>(
    input: &'input str,
    __0: (),
    __1: Vec<BisonDecl<'input>>,
    __2: &'input str,
    __3: ::std::vec::Vec<GrammarRule<'input>>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Yacc<'input>
{
    let __temp0 = __action58(
        input,
        __3,
        __lookbehind,
        __lookahead,
    );
    __action1(
        input,
        __0,
        __1,
        __2,
        __temp0,
        __lookbehind,
        __lookahead,
    )
}

pub fn __action73<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __1: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ()
{
    let __temp0 = __action47(
        input,
        __lookbehind,
        __lookahead,
    );
    __action24(
        input,
        __0,
        __temp0,
        __1,
        __lookbehind,
        __lookahead,
    )
}

pub fn __action74<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __1: ::std::vec::Vec<()>,
    __2: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ()
{
    let __temp0 = __action48(
        input,
        __1,
        __lookbehind,
        __lookahead,
    );
    __action24(
        input,
        __0,
        __temp0,
        __2,
        __lookbehind,
        __lookahead,
    )
}

pub fn __action75<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __1: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ()
{
    let __temp0 = __action47(
        input,
        __lookbehind,
        __lookahead,
    );
    __action25(
        input,
        __0,
        __temp0,
        __1,
        __lookbehind,
        __lookahead,
    )
}

pub fn __action76<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __1: ::std::vec::Vec<()>,
    __2: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ()
{
    let __temp0 = __action48(
        input,
        __1,
        __lookbehind,
        __lookahead,
    );
    __action25(
        input,
        __0,
        __temp0,
        __2,
        __lookbehind,
        __lookahead,
    )
}

pub fn __action77<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __1: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ()
{
    let __temp0 = __action47(
        input,
        __lookbehind,
        __lookahead,
    );
    __action26(
        input,
        __0,
        __temp0,
        __1,
        __lookbehind,
        __lookahead,
    )
}

pub fn __action78<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __1: ::std::vec::Vec<()>,
    __2: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ()
{
    let __temp0 = __action48(
        input,
        __1,
        __lookbehind,
        __lookahead,
    );
    __action26(
        input,
        __0,
        __temp0,
        __2,
        __lookbehind,
        __lookahead,
    )
}

pub fn __action79<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __1: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ()
{
    let __temp0 = __action47(
        input,
        __lookbehind,
        __lookahead,
    );
    __action27(
        input,
        __0,
        __temp0,
        __1,
        __lookbehind,
        __lookahead,
    )
}

pub fn __action80<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __1: ::std::vec::Vec<()>,
    __2: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ()
{
    let __temp0 = __action48(
        input,
        __1,
        __lookbehind,
        __lookahead,
    );
    __action27(
        input,
        __0,
        __temp0,
        __2,
        __lookbehind,
        __lookahead,
    )
}

pub trait __ToTriple<'input, > {
    type Error;
    fn to_triple(value: Self) -> Result<(usize,(usize, &'input str),usize),Self::Error>;
}

impl<'input, > __ToTriple<'input, > for (usize, (usize, &'input str), usize) {
    type Error = ();
    fn to_triple(value: Self) -> Result<(usize,(usize, &'input str),usize),()> {
        Ok(value)
    }
}
impl<'input, > __ToTriple<'input, > for Result<(usize, (usize, &'input str), usize),()> {
    type Error = ();
    fn to_triple(value: Self) -> Result<(usize,(usize, &'input str),usize),()> {
        value
    }
}
